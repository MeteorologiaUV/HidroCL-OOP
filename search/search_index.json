{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to HidroCL","title":"Home"},{"location":"#welcome-to-hidrocl","text":"","title":"Welcome to HidroCL"},{"location":"download/","text":"Download functions download_era5land ( year , month , day , path ) function to download era5-land reanalysis data from CDS This functions needs a .cdsapirc file in the home directory with the following content: url: https://cds.climate.copernicus.eu/api/v2 key: Examples: >>> download_era5land ( 2000 , 6 , 1 , '/path/to/data' ) Parameters: Name Type Description Default year int year of the data to be downloaded required month int month of the data to be downloaded required day int day of the data to be downloaded required path str path to save the data required Returns: Type Description None Source code in hidrocl/download/__init__.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def download_era5land ( year , month , day , path ): \"\"\"function to download era5-land reanalysis data from CDS This functions needs a .cdsapirc file in the home directory with the following content: url: https://cds.climate.copernicus.eu/api/v2 key: <your key> Examples: >>> download_era5land(2000, 6, 1, '/path/to/data') Args: year (int): year of the data to be downloaded month (int): month of the data to be downloaded day (int): day of the data to be downloaded path (str):path to save the data Returns: None \"\"\" fname = os . path . join ( path , f 'era5-land_ { year : 04d }{ month : 02d }{ day : 02d } .nc' ) c = cdsapi . Client () c . retrieve ( 'reanalysis-era5-land' , { 'format' : 'netcdf' , 'variable' : [ '2m_temperature' , 'potential_evaporation' , 'snow_albedo' , 'snow_cover' , 'snow_density' , 'snow_depth' , 'snow_depth_water_equivalent' , 'total_evaporation' , 'total_precipitation' , 'volumetric_soil_water_layer_1' , 'volumetric_soil_water_layer_2' , 'volumetric_soil_water_layer_3' , 'volumetric_soil_water_layer_4' , ], 'month' : [ str ( month ) . zfill ( 2 ), ], 'day' : [ str ( day ) . zfill ( 2 ), ], 'time' : [ '00:00' , '01:00' , '02:00' , '03:00' , '04:00' , '05:00' , '06:00' , '07:00' , '08:00' , '09:00' , '10:00' , '11:00' , '12:00' , '13:00' , '14:00' , '15:00' , '16:00' , '17:00' , '18:00' , '19:00' , '20:00' , '21:00' , '22:00' , '23:00' , ], 'year' : [ str ( year ) . zfill ( 4 ), ], 'area' : [ - 15 , - 75 , - 55 , - 65 , ], }, fname ) download_imerg ( url_extract , folder , user , password , timeout = 60 ) download IMERG data from jsimpsonhttps.pps.eosdis.nasa.gov. It is recommended to use the function get_imerg to get the filenames of the data to be downloaded Examples: >>> download_imerg ( '/imerg/gis/2000/06/xyz.tif' , '/path/to/data' , 'user@doma.in' , 'password' ) xyz.tif downloaded >>> # for multiple files (natural process) >>> files = get_imerg ( '2000-06' , '2000-07' , 'user@doma.in' , 'password' ) >>> for file in files : >>> download_imerg ( file , '/path/to/data' , 'user@doma.in' , 'password' ) xyz1.tif downloaded xyz2.tif downloaded ... Parameters: Name Type Description Default url_extract str extract of url in format '/imerg/gis/2000/06/xyz.tif' required folder str folder to save the data required user str username to access jsimpsonhttps.pps.eosdis.nasa.gov required password str password to access jsimpsonhttps.pps.eosdis.nasa.gov required timeout int timeout in seconds 60 Returns: Type Description None Source code in hidrocl/download/__init__.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 def download_imerg ( url_extract , folder , user , password , timeout = 60 ): \"\"\"download IMERG data from jsimpsonhttps.pps.eosdis.nasa.gov. It is recommended to use the function get_imerg to get the filenames of the data to be downloaded Examples: >>> download_imerg('/imerg/gis/2000/06/xyz.tif', '/path/to/data', 'user@doma.in', 'password') xyz.tif downloaded >>> # for multiple files (natural process) >>> files = get_imerg('2000-06', '2000-07', 'user@doma.in', 'password') >>> for file in files: >>> download_imerg(file, '/path/to/data', 'user@doma.in', 'password') xyz1.tif downloaded xyz2.tif downloaded ... Args: url_extract (str): extract of url in format '/imerg/gis/2000/06/xyz.tif' folder (str): folder to save the data user (str): username to access jsimpsonhttps.pps.eosdis.nasa.gov password (str): password to access jsimpsonhttps.pps.eosdis.nasa.gov timeout (int): timeout in seconds Returns: None \"\"\" url = 'https://jsimpsonhttps.pps.eosdis.nasa.gov' + url_extract fname = url . split ( '/' )[ - 1 ] response = requests . get ( url , auth = HTTPBasicAuth ( user , password ), timeout = timeout ) response . raise_for_status () with open ( os . path . join ( folder , fname ), 'wb' ) as f : f . write ( response . content ) print ( f ' { fname } downloaded' ) download_satsoilmoist ( year , month , day , path ) function to download Soil moisture gridded data from CDS Examples: >>> download_satsoilmoist ( 2000 , 6 , 1 , '/path/to/data' ) Parameters: Name Type Description Default year int year of the data to be downloaded required month int month of the data to be downloaded required day int day of the data to be downloaded required path str path to save the data required Returns: Type Description None Source code in hidrocl/download/__init__.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def download_satsoilmoist ( year , month , day , path ): \"\"\"function to download Soil moisture gridded data from CDS Examples: >>> download_satsoilmoist(2000, 6, 1, '/path/to/data') Args: year (int): year of the data to be downloaded month (int): month of the data to be downloaded day (int): day of the data to be downloaded path (str): path to save the data Returns: None \"\"\" c = cdsapi . Client () c . retrieve ( 'satellite-soil-moisture' , { 'format' : 'tgz' , 'variable' : 'volumetric_surface_soil_moisture' , 'type_of_sensor' : [ 'combined_passive_and_active' , 'passive' , ], 'time_aggregation' : 'day_average' , 'month' : str ( month ) . zfill ( 2 ), 'year' : str ( year ) . zfill ( 4 ), 'day' : str ( day ) . zfill ( 2 ), 'type_of_record' : 'cdr' , 'version' : 'v202012.0.0' , }, 'download.tar.gz' ) with tarfile . open ( 'download.tar.gz' ) as tar : tar . extractall ( path = path ) os . remove ( 'download.tar.gz' ) get_imerg ( start , end , user , password , timeout = 60 ) function to get IMERG data filenames from jsimpsonhttps.pps.eosdis.nasa.gov Examples: >>> get_imerg ( '2000-06' , '2000-07' , 'user@doma.in' , 'password' ) ['/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S000000-E002959.0000.V06B.30min.tif', '/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S003000-E005959.0030.V06B.30min.tif', ...] Parameters: Name Type Description Default start str start date in the format YYYY-MM required end str start date in the format YYYY-MM required user str username to access jsimpsonhttps.pps.eosdis.nasa.gov required password str password to access jsimpsonhttps.pps.eosdis.nasa.gov required timeout int timeout in seconds 60 Returns: Name Type Description list a list representing the filename of IMERG data available for the requested period Raises: Type Description ValueError if: - start or end are not in the format YYYY-MM - start is after end - start is less than 2000-06 Source code in hidrocl/download/__init__.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 def get_imerg ( start , end , user , password , timeout = 60 ): \"\"\"function to get IMERG data filenames from jsimpsonhttps.pps.eosdis.nasa.gov Examples: >>> get_imerg('2000-06', '2000-07', 'user@doma.in', 'password') ['/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S000000-E002959.0000.V06B.30min.tif', '/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S003000-E005959.0030.V06B.30min.tif', ...] Args: start (str): start date in the format YYYY-MM end (str): start date in the format YYYY-MM user (str): username to access jsimpsonhttps.pps.eosdis.nasa.gov password (str): password to access jsimpsonhttps.pps.eosdis.nasa.gov timeout (int): timeout in seconds Returns: list: a list representing the filename of IMERG data available for the requested period Raises: ValueError: if: - start or end are not in the format YYYY-MM - start is after end - start is less than 2000-06 \"\"\" start = pd . to_datetime ( start + '-01' , format = \"%Y-%m- %d \" ) end = pd . to_datetime ( end + '-01' , format = \"%Y-%m- %d \" ) if start > end : raise ValueError ( \"start date should be less than end date\" ) if start . year < 2000 : raise ValueError ( \"start date should be greater than 2000\" ) if end . year > datetime . now () . year : raise ValueError ( \"end date should be less than current year\" ) if start . year == 200 and start . month < 6 : raise ValueError ( \"start date should be greater than 2000-06-01\" ) p = pd . period_range ( start , end , freq = 'M' ) final_response = [] for yyyymm in p : year = int ( yyyymm . strftime ( '%Y' )) month = int ( yyyymm . strftime ( '%m' )) url = f 'https://jsimpsonhttps.pps.eosdis.nasa.gov/text/imerg/gis/ { year : 04d } / { month : 02d } /' response = requests . get ( url , auth = HTTPBasicAuth ( user , password ), timeout = timeout ) vals = str ( response . content ) . split ( ' \\\\ n' ) vals_filtered = [ val for val in vals if '3B-HHR-L' in val and '30min.tif' in val ] final_response . extend ( vals_filtered ) return final_response","title":"Download functions"},{"location":"download/#download-functions","text":"","title":"Download functions"},{"location":"download/#hidrocl.download.download_era5land","text":"function to download era5-land reanalysis data from CDS This functions needs a .cdsapirc file in the home directory with the following content: url: https://cds.climate.copernicus.eu/api/v2 key: Examples: >>> download_era5land ( 2000 , 6 , 1 , '/path/to/data' ) Parameters: Name Type Description Default year int year of the data to be downloaded required month int month of the data to be downloaded required day int day of the data to be downloaded required path str path to save the data required Returns: Type Description None Source code in hidrocl/download/__init__.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def download_era5land ( year , month , day , path ): \"\"\"function to download era5-land reanalysis data from CDS This functions needs a .cdsapirc file in the home directory with the following content: url: https://cds.climate.copernicus.eu/api/v2 key: <your key> Examples: >>> download_era5land(2000, 6, 1, '/path/to/data') Args: year (int): year of the data to be downloaded month (int): month of the data to be downloaded day (int): day of the data to be downloaded path (str):path to save the data Returns: None \"\"\" fname = os . path . join ( path , f 'era5-land_ { year : 04d }{ month : 02d }{ day : 02d } .nc' ) c = cdsapi . Client () c . retrieve ( 'reanalysis-era5-land' , { 'format' : 'netcdf' , 'variable' : [ '2m_temperature' , 'potential_evaporation' , 'snow_albedo' , 'snow_cover' , 'snow_density' , 'snow_depth' , 'snow_depth_water_equivalent' , 'total_evaporation' , 'total_precipitation' , 'volumetric_soil_water_layer_1' , 'volumetric_soil_water_layer_2' , 'volumetric_soil_water_layer_3' , 'volumetric_soil_water_layer_4' , ], 'month' : [ str ( month ) . zfill ( 2 ), ], 'day' : [ str ( day ) . zfill ( 2 ), ], 'time' : [ '00:00' , '01:00' , '02:00' , '03:00' , '04:00' , '05:00' , '06:00' , '07:00' , '08:00' , '09:00' , '10:00' , '11:00' , '12:00' , '13:00' , '14:00' , '15:00' , '16:00' , '17:00' , '18:00' , '19:00' , '20:00' , '21:00' , '22:00' , '23:00' , ], 'year' : [ str ( year ) . zfill ( 4 ), ], 'area' : [ - 15 , - 75 , - 55 , - 65 , ], }, fname )","title":"download_era5land()"},{"location":"download/#hidrocl.download.download_imerg","text":"download IMERG data from jsimpsonhttps.pps.eosdis.nasa.gov. It is recommended to use the function get_imerg to get the filenames of the data to be downloaded Examples: >>> download_imerg ( '/imerg/gis/2000/06/xyz.tif' , '/path/to/data' , 'user@doma.in' , 'password' ) xyz.tif downloaded >>> # for multiple files (natural process) >>> files = get_imerg ( '2000-06' , '2000-07' , 'user@doma.in' , 'password' ) >>> for file in files : >>> download_imerg ( file , '/path/to/data' , 'user@doma.in' , 'password' ) xyz1.tif downloaded xyz2.tif downloaded ... Parameters: Name Type Description Default url_extract str extract of url in format '/imerg/gis/2000/06/xyz.tif' required folder str folder to save the data required user str username to access jsimpsonhttps.pps.eosdis.nasa.gov required password str password to access jsimpsonhttps.pps.eosdis.nasa.gov required timeout int timeout in seconds 60 Returns: Type Description None Source code in hidrocl/download/__init__.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 def download_imerg ( url_extract , folder , user , password , timeout = 60 ): \"\"\"download IMERG data from jsimpsonhttps.pps.eosdis.nasa.gov. It is recommended to use the function get_imerg to get the filenames of the data to be downloaded Examples: >>> download_imerg('/imerg/gis/2000/06/xyz.tif', '/path/to/data', 'user@doma.in', 'password') xyz.tif downloaded >>> # for multiple files (natural process) >>> files = get_imerg('2000-06', '2000-07', 'user@doma.in', 'password') >>> for file in files: >>> download_imerg(file, '/path/to/data', 'user@doma.in', 'password') xyz1.tif downloaded xyz2.tif downloaded ... Args: url_extract (str): extract of url in format '/imerg/gis/2000/06/xyz.tif' folder (str): folder to save the data user (str): username to access jsimpsonhttps.pps.eosdis.nasa.gov password (str): password to access jsimpsonhttps.pps.eosdis.nasa.gov timeout (int): timeout in seconds Returns: None \"\"\" url = 'https://jsimpsonhttps.pps.eosdis.nasa.gov' + url_extract fname = url . split ( '/' )[ - 1 ] response = requests . get ( url , auth = HTTPBasicAuth ( user , password ), timeout = timeout ) response . raise_for_status () with open ( os . path . join ( folder , fname ), 'wb' ) as f : f . write ( response . content ) print ( f ' { fname } downloaded' )","title":"download_imerg()"},{"location":"download/#hidrocl.download.download_satsoilmoist","text":"function to download Soil moisture gridded data from CDS Examples: >>> download_satsoilmoist ( 2000 , 6 , 1 , '/path/to/data' ) Parameters: Name Type Description Default year int year of the data to be downloaded required month int month of the data to be downloaded required day int day of the data to be downloaded required path str path to save the data required Returns: Type Description None Source code in hidrocl/download/__init__.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def download_satsoilmoist ( year , month , day , path ): \"\"\"function to download Soil moisture gridded data from CDS Examples: >>> download_satsoilmoist(2000, 6, 1, '/path/to/data') Args: year (int): year of the data to be downloaded month (int): month of the data to be downloaded day (int): day of the data to be downloaded path (str): path to save the data Returns: None \"\"\" c = cdsapi . Client () c . retrieve ( 'satellite-soil-moisture' , { 'format' : 'tgz' , 'variable' : 'volumetric_surface_soil_moisture' , 'type_of_sensor' : [ 'combined_passive_and_active' , 'passive' , ], 'time_aggregation' : 'day_average' , 'month' : str ( month ) . zfill ( 2 ), 'year' : str ( year ) . zfill ( 4 ), 'day' : str ( day ) . zfill ( 2 ), 'type_of_record' : 'cdr' , 'version' : 'v202012.0.0' , }, 'download.tar.gz' ) with tarfile . open ( 'download.tar.gz' ) as tar : tar . extractall ( path = path ) os . remove ( 'download.tar.gz' )","title":"download_satsoilmoist()"},{"location":"download/#hidrocl.download.get_imerg","text":"function to get IMERG data filenames from jsimpsonhttps.pps.eosdis.nasa.gov Examples: >>> get_imerg ( '2000-06' , '2000-07' , 'user@doma.in' , 'password' ) ['/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S000000-E002959.0000.V06B.30min.tif', '/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S003000-E005959.0030.V06B.30min.tif', ...] Parameters: Name Type Description Default start str start date in the format YYYY-MM required end str start date in the format YYYY-MM required user str username to access jsimpsonhttps.pps.eosdis.nasa.gov required password str password to access jsimpsonhttps.pps.eosdis.nasa.gov required timeout int timeout in seconds 60 Returns: Name Type Description list a list representing the filename of IMERG data available for the requested period Raises: Type Description ValueError if: - start or end are not in the format YYYY-MM - start is after end - start is less than 2000-06 Source code in hidrocl/download/__init__.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 def get_imerg ( start , end , user , password , timeout = 60 ): \"\"\"function to get IMERG data filenames from jsimpsonhttps.pps.eosdis.nasa.gov Examples: >>> get_imerg('2000-06', '2000-07', 'user@doma.in', 'password') ['/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S000000-E002959.0000.V06B.30min.tif', '/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S003000-E005959.0030.V06B.30min.tif', ...] Args: start (str): start date in the format YYYY-MM end (str): start date in the format YYYY-MM user (str): username to access jsimpsonhttps.pps.eosdis.nasa.gov password (str): password to access jsimpsonhttps.pps.eosdis.nasa.gov timeout (int): timeout in seconds Returns: list: a list representing the filename of IMERG data available for the requested period Raises: ValueError: if: - start or end are not in the format YYYY-MM - start is after end - start is less than 2000-06 \"\"\" start = pd . to_datetime ( start + '-01' , format = \"%Y-%m- %d \" ) end = pd . to_datetime ( end + '-01' , format = \"%Y-%m- %d \" ) if start > end : raise ValueError ( \"start date should be less than end date\" ) if start . year < 2000 : raise ValueError ( \"start date should be greater than 2000\" ) if end . year > datetime . now () . year : raise ValueError ( \"end date should be less than current year\" ) if start . year == 200 and start . month < 6 : raise ValueError ( \"start date should be greater than 2000-06-01\" ) p = pd . period_range ( start , end , freq = 'M' ) final_response = [] for yyyymm in p : year = int ( yyyymm . strftime ( '%Y' )) month = int ( yyyymm . strftime ( '%m' )) url = f 'https://jsimpsonhttps.pps.eosdis.nasa.gov/text/imerg/gis/ { year : 04d } / { month : 02d } /' response = requests . get ( url , auth = HTTPBasicAuth ( user , password ), timeout = timeout ) vals = str ( response . content ) . split ( ' \\\\ n' ) vals_filtered = [ val for val in vals if '3B-HHR-L' in val and '30min.tif' in val ] final_response . extend ( vals_filtered ) return final_response","title":"get_imerg()"},{"location":"how-to/","text":"How to","title":"How to"},{"location":"how-to/#how-to","text":"","title":"How to"},{"location":"products/","text":"Product processors Era5_land A class to process ERA5-Land hourly to hidrocl variables. Where: temperature: t2m -> temp (10 * \u00baC) mean potential evapotranspiration: pev -> pet (10000 * m) sum snow albedo: asn -> snwa (10 * frac) mean snow cover: snowc -> snw (10 * frac) mean snow density: rsn -> snwdn (10 * kg/m3) mean snow depth: sd -> snwdt (10 * m) mean evapotranspiration: e -> et (10000 * m) sum total precipitation: tp -> pp (10000 * m) sum volumetric soil water: swvl1+swvl2+swvl3+swvl4 -> soilm (1000 * m3/m3) mean temp, pp, et, pet, snow, snowa, snowdn, snowdt, soilm Attributes: Name Type Description temp HidroCLVariable HidroCLVariable object with ERA5 temperature data pp HidroCLVariable HidroCLVariable object with ERA5 precipitation data et HidroCLVariable HidroCLVariable object with ERA5 evapotranspiration data pet HidroCLVariable HidroCLVariable object with ERA5 potential evapotranspiration data snw HidroCLVariable HidroCLVariable object with ERA5 snow cover data snwa HidroCLVariable HidroCLVariable object with ERA5 snow albedo data snwdn HidroCLVariable HidroCLVariable object with ERA5 snow density data snwdt HidroCLVariable HidroCLVariable object with ERA5 snow depth data soilm HidroCLVariable HidroCLVariable object with ERA5 volumetric soil water data temp_log str Log file path for temperature data pp_log str Log file path for precipitation data et_log str Log file path for evapotranspiration data pet_log str Log file path for potential evapotranspiration data snw_log str Log file path for snow cover data snwa_log str Log file path for snow albedo data snwdn_log str Log file path for snow density data snwdt_log str Log file path for snow depth data soilm_log str Log file path for volumetric soil water data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list List of common elements between the snow, temp, et and soilm databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 1 scenes for era5) complete_scenes list List of complete scenes (1 scenes for era5) incomplete_scenes list List of incomplete scenes (less than 1 scenes for era5) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 class Era5_land : \"\"\" A class to process ERA5-Land hourly to hidrocl variables. Where: temperature: t2m -> temp (10 * \u00baC) mean \\n potential evapotranspiration: pev -> pet (10000 * m) sum \\n snow albedo: asn -> snwa (10 * frac) mean \\n snow cover: snowc -> snw (10 * frac) mean \\n snow density: rsn -> snwdn (10 * kg/m3) mean \\n snow depth: sd -> snwdt (10 * m) mean \\n evapotranspiration: e -> et (10000 * m) sum \\n total precipitation: tp -> pp (10000 * m) sum \\n volumetric soil water: swvl1+swvl2+swvl3+swvl4 -> soilm (1000 * m3/m3) mean \\n temp, pp, et, pet, snow, snowa, snowdn, snowdt, soilm \\n Attributes: temp (HidroCLVariable): HidroCLVariable object with ERA5 temperature data \\n pp (HidroCLVariable): HidroCLVariable object with ERA5 precipitation data \\n et (HidroCLVariable): HidroCLVariable object with ERA5 evapotranspiration data \\n pet (HidroCLVariable): HidroCLVariable object with ERA5 potential evapotranspiration data \\n snw (HidroCLVariable): HidroCLVariable object with ERA5 snow cover data \\n snwa (HidroCLVariable): HidroCLVariable object with ERA5 snow albedo data \\n snwdn (HidroCLVariable): HidroCLVariable object with ERA5 snow density data \\n snwdt (HidroCLVariable): HidroCLVariable object with ERA5 snow depth data \\n soilm (HidroCLVariable): HidroCLVariable object with ERA5 volumetric soil water data \\n temp_log (str): Log file path for temperature data \\n pp_log (str): Log file path for precipitation data \\n et_log (str): Log file path for evapotranspiration data \\n pet_log (str): Log file path for potential evapotranspiration data \\n snw_log (str): Log file path for snow cover data \\n snwa_log (str): Log file path for snow albedo data \\n snwdn_log (str): Log file path for snow density data \\n snwdt_log (str): Log file path for snow depth data \\n soilm_log (str): Log file path for volumetric soil water data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): List of common elements between the snow, temp, et and soilm databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 1 scenes for era5) \\n complete_scenes (list): List of complete scenes (1 scenes for era5) \\n incomplete_scenes (list): List of incomplete scenes (less than 1 scenes for era5) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , temp , pp , et , pet , snw , snwa , snwdn , snwdt , soilm , product_path , vector_path , temp_log , pp_log , et_log , pet_log , snw_log , snwa_log , snwdn_log , snwdt_log , soilm_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Era5_land >>> temp = HidroCLVariable('temp',temp.db, temppc.db) >>> pp = HidroCLVariable('pp', pp.db, pppc.db) >>> et = HidroCLVariable('et', et.db, etpc.db) >>> pet = HidroCLVariable('pet', pet.db, petpc.db) >>> snw = HidroCLVariable('snw', snw.db, snwpc.db) >>> snwa = HidroCLVariable('snwa', snwa.db, snwapc.db) >>> snwdn = HidroCLVariable('snwdn', snwdn.db, snwdnpc.db) >>> snwdt = HidroCLVariable('snwdt', snwdt.db, snwdtpc.db) >>> soilm = HidroCLVariable('soilm', soilm.db, soilmdb.db) >>> product_path = '/home/user/era5-land' >>> vector_path = '/home/user/shapefiles' >>> temp_log = '/home/user/temp.log' >>> pp_log = '/home/user/pp.log' >>> et_log = '/home/user/et.log' >>> pet_log = '/home/user/pet.log' >>> snw_log = '/home/user/snw.log' >>> snwa_log = '/home/user/snwa.log' >>> snwdn_log = '/home/user/snwdn.log' >>> snwdt_log = '/home/user/snwdt.log' >>> soilm_log = '/home/user/soilm.log' >>> era5 = Era5_land(temp, pp, et, pet, snw, snwa, snwdn, snwdt, soilm, product_path, vector_path, temp_log, pp_log, et_log, pet_log, snw_log, snwa_log, snwdn_log, snwdt_log, soilm_log) >>> era5 \"Class to extract ERA5-Land Hourly 0.1 degree\" >>> era5.run_extraction() Args: temp (HidroCLVariable): HidroCLVariable object with ERA5 temperature data \\n pp (HidroCLVariable): HidroCLVariable object with ERA5 precipitation data \\n et (HidroCLVariable): HidroCLVariable object with ERA5 evapotranspiration data \\n pet (HidroCLVariable): HidroCLVariable object with ERA5 potential evapotranspiration data \\n snw (HidroCLVariable): HidroCLVariable object with ERA5 snow cover data \\n snwa (HidroCLVariable): HidroCLVariable object with ERA5 snow albedo data \\n snwdn (HidroCLVariable): HidroCLVariable object with ERA5 snow density data \\n snwdt (HidroCLVariable): HidroCLVariable object with ERA5 snow depth data \\n soilm (HidroCLVariable): HidroCLVariable object with ERA5 volumetric soil water data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n temp_log (str): Log file path for temperature data \\n pp_log (str): Log file path for precipitation data \\n et_log (str): Log file path for evapotranspiration data \\n pet_log (str): Log file path for potential evapotranspiration data \\n snw_log (str): Log file path for snow cover data \\n snwa_log (str): Log file path for snow albedo data \\n snwdn_log (str): Log file path for snow density data \\n snwdt_log (str): Log file path for snow depth data \\n soilm_log (str): Log file path for volumetric soil water data \\n Raises: TypeError: If temp, pp, et, pet, snow, snowa, snowdn, snowdt or soilm is not HidroCLVariable objects \\n \"\"\" if t . check_instance ( temp , pp , et , pet , snw , snwa , snwdn , snwdt , soilm ): self . temp = temp self . pp = pp self . et = et self . pet = pet self . snw = snw self . snwa = snwa self . snwdn = snwdn self . snwdt = snwdt self . soilm = soilm self . temp_log = temp_log self . pp_log = pp_log self . et_log = et_log self . pet_log = pet_log self . snw_log = snw_log self . snwa_log = snwa_log self . snwdn_log = snwdn_log self . snwdt_log = snwdt_log self . soilm_log = soilm_log self . productname = \"ERA5-Land Hourly 0.1 degree\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"era5\" ) self . product_ids = t . get_product_ids ( self . product_files , \"era5\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"era5\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = \"era5\" ) else : raise TypeError ( 'temp, pp, et, pet, snw, snwa, snwdn, snwdt and soilm must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } Temperature records: { len ( self . temp . indatabase ) } . Temperature path: { self . temp . database } Precipitation records: { len ( self . pp . indatabase ) } . Precipitation path: { self . pp . database } Evapotranspiration records: { len ( self . et . indatabase ) } . Evapotranspiration path: { self . et . database } Potential evapotranspiration records: { len ( self . pet . indatabase ) } . Potential evapotranspiration path: { self . pet . database } Snow cover records: { len ( self . snw . indatabase ) } . Snow cover path: { self . snw . database } Snow albedo records: { len ( self . snwa . indatabase ) } . Snow albedo path: { self . snwa . database } Snow density records: { len ( self . snwdn . indatabase ) } . Snow density path: { self . snwdn . database } Snow depth records: { len ( self . snwdt . indatabase ) } . Snow depth path: { self . snwdt . database } Volumetric soil water records: { len ( self . soilm . indatabase ) } . Volumetric soil water path: { self . soilm . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . temp . checkdatabase () self . pp . checkdatabase () self . et . checkdatabase () self . pet . checkdatabase () self . snw . checkdatabase () self . snwa . checkdatabase () self . snwdn . checkdatabase () self . snwdt . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"era5\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . temp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'temp_era5' , self . temp . catchment_names , self . temp_log , database = self . temp . database , pcdatabase = self . temp . pcdatabase , vector_path = self . vectorpath , layer = \"t2m\" ) if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pp_era5' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath , layer = \"tp\" ) if scene not in self . et . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'et_era5' , self . et . catchment_names , self . et_log , database = self . et . database , pcdatabase = self . et . pcdatabase , vector_path = self . vectorpath , layer = \"e\" ) if scene not in self . pet . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pet_era5' , self . pet . catchment_names , self . pet_log , database = self . pet . database , pcdatabase = self . pet . pcdatabase , vector_path = self . vectorpath , layer = \"pev\" ) if scene not in self . snw . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snw_era5' , self . snw . catchment_names , self . snw_log , database = self . snw . database , pcdatabase = self . snw . pcdatabase , vector_path = self . vectorpath , layer = \"snowc\" ) if scene not in self . snwa . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snwa_era5' , self . snwa . catchment_names , self . snwa_log , database = self . snwa . database , pcdatabase = self . snwa . pcdatabase , vector_path = self . vectorpath , layer = \"asn\" ) if scene not in self . snwdn . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snwdn_era5' , self . snwdn . catchment_names , self . snwdn_log , database = self . snwdn . database , pcdatabase = self . snwdn . pcdatabase , vector_path = self . vectorpath , layer = \"rsn\" ) if scene not in self . snwdt . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snwdt_era5' , self . snwdt . catchment_names , self . snwdt_log , database = self . snwdt . database , pcdatabase = self . snwdt . pcdatabase , vector_path = self . vectorpath , layer = \"sd\" ) if scene not in self . soilm . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'soilm_era5' , self . soilm . catchment_names , self . soilm_log , database = self . soilm . database , pcdatabase = self . soilm . pcdatabase , vector_path = self . vectorpath , layer = [ \"swvl1\" , \"swvl2\" , \"swvl3\" , \"swvl4\" ]) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . temp . checkdatabase () self . pp . checkdatabase () self . et . checkdatabase () self . pet . checkdatabase () self . snw . checkdatabase () self . snwa . checkdatabase () self . snwdn . checkdatabase () self . snwdt . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"era5\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'era5' , log_file = log_file ) __init__ ( temp , pp , et , pet , snw , snwa , snwdn , snwdt , soilm , product_path , vector_path , temp_log , pp_log , et_log , pet_log , snw_log , snwa_log , snwdn_log , snwdt_log , soilm_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Era5_land >>> temp = HidroCLVariable ( 'temp' , temp . db , temppc . db ) >>> pp = HidroCLVariable ( 'pp' , pp . db , pppc . db ) >>> et = HidroCLVariable ( 'et' , et . db , etpc . db ) >>> pet = HidroCLVariable ( 'pet' , pet . db , petpc . db ) >>> snw = HidroCLVariable ( 'snw' , snw . db , snwpc . db ) >>> snwa = HidroCLVariable ( 'snwa' , snwa . db , snwapc . db ) >>> snwdn = HidroCLVariable ( 'snwdn' , snwdn . db , snwdnpc . db ) >>> snwdt = HidroCLVariable ( 'snwdt' , snwdt . db , snwdtpc . db ) >>> soilm = HidroCLVariable ( 'soilm' , soilm . db , soilmdb . db ) >>> product_path = '/home/user/era5-land' >>> vector_path = '/home/user/shapefiles' >>> temp_log = '/home/user/temp.log' >>> pp_log = '/home/user/pp.log' >>> et_log = '/home/user/et.log' >>> pet_log = '/home/user/pet.log' >>> snw_log = '/home/user/snw.log' >>> snwa_log = '/home/user/snwa.log' >>> snwdn_log = '/home/user/snwdn.log' >>> snwdt_log = '/home/user/snwdt.log' >>> soilm_log = '/home/user/soilm.log' >>> era5 = Era5_land ( temp , pp , et , pet , snw , snwa , snwdn , snwdt , soilm, product_path, vector_path, temp_log, pp_log, et_log, pet_log, snw_log, snwa_log, snwdn_log, snwdt_log, soilm_log) >>> era5 \"Class to extract ERA5-Land Hourly 0.1 degree\" >>> era5 . run_extraction () Parameters: Name Type Description Default temp HidroCLVariable HidroCLVariable object with ERA5 temperature data required pp HidroCLVariable HidroCLVariable object with ERA5 precipitation data required et HidroCLVariable HidroCLVariable object with ERA5 evapotranspiration data required pet HidroCLVariable HidroCLVariable object with ERA5 potential evapotranspiration data required snw HidroCLVariable HidroCLVariable object with ERA5 snow cover data required snwa HidroCLVariable HidroCLVariable object with ERA5 snow albedo data required snwdn HidroCLVariable HidroCLVariable object with ERA5 snow density data required snwdt HidroCLVariable HidroCLVariable object with ERA5 snow depth data required soilm HidroCLVariable HidroCLVariable object with ERA5 volumetric soil water data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required temp_log str Log file path for temperature data required pp_log str Log file path for precipitation data required et_log str Log file path for evapotranspiration data required pet_log str Log file path for potential evapotranspiration data required snw_log str Log file path for snow cover data required snwa_log str Log file path for snow albedo data required snwdn_log str Log file path for snow density data required snwdt_log str Log file path for snow depth data required soilm_log str Log file path for volumetric soil water data required Raises: Type Description TypeError If temp, pp, et, pet, snow, snowa, snowdn, snowdt or soilm is not HidroCLVariable objects Source code in hidrocl/products/__init__.py 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 def __init__ ( self , temp , pp , et , pet , snw , snwa , snwdn , snwdt , soilm , product_path , vector_path , temp_log , pp_log , et_log , pet_log , snw_log , snwa_log , snwdn_log , snwdt_log , soilm_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Era5_land >>> temp = HidroCLVariable('temp',temp.db, temppc.db) >>> pp = HidroCLVariable('pp', pp.db, pppc.db) >>> et = HidroCLVariable('et', et.db, etpc.db) >>> pet = HidroCLVariable('pet', pet.db, petpc.db) >>> snw = HidroCLVariable('snw', snw.db, snwpc.db) >>> snwa = HidroCLVariable('snwa', snwa.db, snwapc.db) >>> snwdn = HidroCLVariable('snwdn', snwdn.db, snwdnpc.db) >>> snwdt = HidroCLVariable('snwdt', snwdt.db, snwdtpc.db) >>> soilm = HidroCLVariable('soilm', soilm.db, soilmdb.db) >>> product_path = '/home/user/era5-land' >>> vector_path = '/home/user/shapefiles' >>> temp_log = '/home/user/temp.log' >>> pp_log = '/home/user/pp.log' >>> et_log = '/home/user/et.log' >>> pet_log = '/home/user/pet.log' >>> snw_log = '/home/user/snw.log' >>> snwa_log = '/home/user/snwa.log' >>> snwdn_log = '/home/user/snwdn.log' >>> snwdt_log = '/home/user/snwdt.log' >>> soilm_log = '/home/user/soilm.log' >>> era5 = Era5_land(temp, pp, et, pet, snw, snwa, snwdn, snwdt, soilm, product_path, vector_path, temp_log, pp_log, et_log, pet_log, snw_log, snwa_log, snwdn_log, snwdt_log, soilm_log) >>> era5 \"Class to extract ERA5-Land Hourly 0.1 degree\" >>> era5.run_extraction() Args: temp (HidroCLVariable): HidroCLVariable object with ERA5 temperature data \\n pp (HidroCLVariable): HidroCLVariable object with ERA5 precipitation data \\n et (HidroCLVariable): HidroCLVariable object with ERA5 evapotranspiration data \\n pet (HidroCLVariable): HidroCLVariable object with ERA5 potential evapotranspiration data \\n snw (HidroCLVariable): HidroCLVariable object with ERA5 snow cover data \\n snwa (HidroCLVariable): HidroCLVariable object with ERA5 snow albedo data \\n snwdn (HidroCLVariable): HidroCLVariable object with ERA5 snow density data \\n snwdt (HidroCLVariable): HidroCLVariable object with ERA5 snow depth data \\n soilm (HidroCLVariable): HidroCLVariable object with ERA5 volumetric soil water data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n temp_log (str): Log file path for temperature data \\n pp_log (str): Log file path for precipitation data \\n et_log (str): Log file path for evapotranspiration data \\n pet_log (str): Log file path for potential evapotranspiration data \\n snw_log (str): Log file path for snow cover data \\n snwa_log (str): Log file path for snow albedo data \\n snwdn_log (str): Log file path for snow density data \\n snwdt_log (str): Log file path for snow depth data \\n soilm_log (str): Log file path for volumetric soil water data \\n Raises: TypeError: If temp, pp, et, pet, snow, snowa, snowdn, snowdt or soilm is not HidroCLVariable objects \\n \"\"\" if t . check_instance ( temp , pp , et , pet , snw , snwa , snwdn , snwdt , soilm ): self . temp = temp self . pp = pp self . et = et self . pet = pet self . snw = snw self . snwa = snwa self . snwdn = snwdn self . snwdt = snwdt self . soilm = soilm self . temp_log = temp_log self . pp_log = pp_log self . et_log = et_log self . pet_log = pet_log self . snw_log = snw_log self . snwa_log = snwa_log self . snwdn_log = snwdn_log self . snwdt_log = snwdt_log self . soilm_log = soilm_log self . productname = \"ERA5-Land Hourly 0.1 degree\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"era5\" ) self . product_ids = t . get_product_ids ( self . product_files , \"era5\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"era5\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = \"era5\" ) else : raise TypeError ( 'temp, pp, et, pet, snw, snwa, snwdn, snwdt and soilm must be HidroCLVariable objects' ) __repr__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1949 1950 1951 1952 1953 1954 1955 1956 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } Temperature records: { len ( self . temp . indatabase ) } . Temperature path: { self . temp . database } Precipitation records: { len ( self . pp . indatabase ) } . Precipitation path: { self . pp . database } Evapotranspiration records: { len ( self . et . indatabase ) } . Evapotranspiration path: { self . et . database } Potential evapotranspiration records: { len ( self . pet . indatabase ) } . Potential evapotranspiration path: { self . pet . database } Snow cover records: { len ( self . snw . indatabase ) } . Snow cover path: { self . snw . database } Snow albedo records: { len ( self . snwa . indatabase ) } . Snow albedo path: { self . snwa . database } Snow density records: { len ( self . snwdn . indatabase ) } . Snow density path: { self . snwdn . database } Snow depth records: { len ( self . snwdt . indatabase ) } . Snow depth path: { self . snwdt . database } Volumetric soil water records: { len ( self . soilm . indatabase ) } . Volumetric soil water path: { self . soilm . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . temp . checkdatabase () self . pp . checkdatabase () self . et . checkdatabase () self . pet . checkdatabase () self . snw . checkdatabase () self . snwa . checkdatabase () self . snwdn . checkdatabase () self . snwdt . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"era5\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . temp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'temp_era5' , self . temp . catchment_names , self . temp_log , database = self . temp . database , pcdatabase = self . temp . pcdatabase , vector_path = self . vectorpath , layer = \"t2m\" ) if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pp_era5' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath , layer = \"tp\" ) if scene not in self . et . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'et_era5' , self . et . catchment_names , self . et_log , database = self . et . database , pcdatabase = self . et . pcdatabase , vector_path = self . vectorpath , layer = \"e\" ) if scene not in self . pet . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pet_era5' , self . pet . catchment_names , self . pet_log , database = self . pet . database , pcdatabase = self . pet . pcdatabase , vector_path = self . vectorpath , layer = \"pev\" ) if scene not in self . snw . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snw_era5' , self . snw . catchment_names , self . snw_log , database = self . snw . database , pcdatabase = self . snw . pcdatabase , vector_path = self . vectorpath , layer = \"snowc\" ) if scene not in self . snwa . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snwa_era5' , self . snwa . catchment_names , self . snwa_log , database = self . snwa . database , pcdatabase = self . snwa . pcdatabase , vector_path = self . vectorpath , layer = \"asn\" ) if scene not in self . snwdn . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snwdn_era5' , self . snwdn . catchment_names , self . snwdn_log , database = self . snwdn . database , pcdatabase = self . snwdn . pcdatabase , vector_path = self . vectorpath , layer = \"rsn\" ) if scene not in self . snwdt . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snwdt_era5' , self . snwdt . catchment_names , self . snwdt_log , database = self . snwdt . database , pcdatabase = self . snwdt . pcdatabase , vector_path = self . vectorpath , layer = \"sd\" ) if scene not in self . soilm . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'soilm_era5' , self . soilm . catchment_names , self . soilm_log , database = self . soilm . database , pcdatabase = self . soilm . pcdatabase , vector_path = self . vectorpath , layer = [ \"swvl1\" , \"swvl2\" , \"swvl3\" , \"swvl4\" ]) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . temp . checkdatabase () self . pp . checkdatabase () self . et . checkdatabase () self . pet . checkdatabase () self . snw . checkdatabase () self . snwa . checkdatabase () self . snwdn . checkdatabase () self . snwdt . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"era5\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'era5' , log_file = log_file ) Gfs A class to process GFS to hidrocl variables. The used variables are: - gh: Geopotential height - prate: Precipitation rate - r2: 2m relative humidity - t2m: 2m temperature - u10: 10m U wind component - v10: 10m V wind component Attributes: Name Type Description db0 HidroCLVariable HidroCLVariable object with GFS variable (see avobe) of day 0 db1 HidroCLVariable HidroCLVariable object with GFS variable (see avobe) of day 1 db2 HidroCLVariable HidroCLVariable object with GFS variable (see avobe) of day 2 db3 HidroCLVariable HidroCLVariable object with GFS variable (see avobe) of day 3 db4 HidroCLVariable HidroCLVariable object with GFS variable (see avobe) of day 4 db_log str Log file path for temperature data valid_time int Valid time for extracting the product variable str Variable name productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 1 scenes for era5) complete_scenes list List of complete scenes (1 scenes for era5) incomplete_scenes list List of incomplete scenes (less than 1 scenes for era5) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 class Gfs : \"\"\" A class to process GFS to hidrocl variables. The used variables are: - gh: Geopotential height - prate: Precipitation rate - r2: 2m relative humidity - t2m: 2m temperature - u10: 10m U wind component - v10: 10m V wind component Attributes: db0 (HidroCLVariable): HidroCLVariable object with GFS variable (see avobe) of day 0 \\n db1 (HidroCLVariable): HidroCLVariable object with GFS variable (see avobe) of day 1 \\n db2 (HidroCLVariable): HidroCLVariable object with GFS variable (see avobe) of day 2 \\n db3 (HidroCLVariable): HidroCLVariable object with GFS variable (see avobe) of day 3 \\n db4 (HidroCLVariable): HidroCLVariable object with GFS variable (see avobe) of day 4 \\n db_log (str): Log file path for temperature data \\n valid_time (int): Valid time for extracting the product \\n variable (str): Variable name \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 1 scenes for era5) \\n complete_scenes (list): List of complete scenes (1 scenes for era5) \\n incomplete_scenes (list): List of incomplete scenes (less than 1 scenes for era5) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , db0 , db1 , db2 , db3 , db4 , db_log , variable , aggregation , product_path , vectorpath ): \"\"\" Examples: Args: db (HidroCLVariable): HidroCLVariable object with GFS variable (see avobe) \\n db_log (str): Log file path for extracted data \\n valid_time (int): Valid time for extracting the product \\n variable (str): Variable name \\n product_path (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n Raises: TypeError: If db is not HidroCLVariable objects \\n \"\"\" if t . check_instance ( db0 , db1 , db2 , db3 , db4 ): self . db0 = db0 self . db1 = db1 self . db2 = db2 self . db3 = db3 self . db4 = db4 self . db_log = db_log self . variable = variable self . aggregation = aggregation self . productname = \"GFS 0.5\u00ba\" self . productpath = product_path self . vectorpath = vectorpath self . common_elements = t . compare_indatabase ( self . db0 . indatabase , self . db1 . indatabase , self . db2 . indatabase , self . db3 . indatabase , self . db4 . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"gfs\" , variable = self . variable ) self . product_ids = t . get_product_ids ( self . product_files , \"gfs\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"gfs\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = \"gfs\" ) else : raise TypeError ( 'db0, db1, db2, db3, db4 must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } Database records day0: { len ( self . db0 . indatabase ) } . Database path day 0: { self . db0 . database } Database records day1: { len ( self . db1 . indatabase ) } . Database path day 1: { self . db1 . database } Database records day2: { len ( self . db2 . indatabase ) } . Database path day 2: { self . db2 . database } Database records day3: { len ( self . db3 . indatabase ) } . Database path day 3: { self . db3 . database } Database records day4: { len ( self . db4 . indatabase ) } . Database path day 4: { self . db4 . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . db0 . checkdatabase () self . db1 . checkdatabase () self . db2 . checkdatabase () self . db3 . checkdatabase () self . db4 . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = \"gfs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : days = [] if scene not in self . db0 . indatabase : days . append ( 0 ) if scene not in self . db1 . indatabase : days . append ( 1 ) if scene not in self . db2 . indatabase : days . append ( 2 ) if scene not in self . db3 . indatabase : days . append ( 3 ) if scene not in self . db4 . indatabase : days . append ( 4 ) e . zonal_stats ( scene , scenes_path , temp_dir , 'gfs' , self . db0 . catchment_names , self . db_log , database = None , databases = [ self . db0 . database , self . db1 . database , self . db2 . database , self . db3 . database , self . db4 . database ], pcdatabase = None , pcdatabases = [ self . db0 . pcdatabase , self . db1 . pcdatabase , self . db2 . pcdatabase , self . db3 . pcdatabase , self . db4 . pcdatabase ], vector_path = self . vectorpath , layer = self . variable , aggregation = self . aggregation , days = days ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . temp . checkdatabase () self . pp . checkdatabase () self . et . checkdatabase () self . pet . checkdatabase () self . snw . checkdatabase () self . snwa . checkdatabase () self . snwdn . checkdatabase () self . snwdt . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"era5\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'era5' , log_file = log_file ) __init__ ( db0 , db1 , db2 , db3 , db4 , db_log , variable , aggregation , product_path , vectorpath ) Examples: Parameters: Name Type Description Default db HidroCLVariable HidroCLVariable object with GFS variable (see avobe) required db_log str Log file path for extracted data required valid_time int Valid time for extracting the product required variable str Variable name required product_path str Path to the product folder where the product files are located required vectorpath str Path to the vector folder with Shapefile with areas to be processed required Raises: Type Description TypeError If db is not HidroCLVariable objects Source code in hidrocl/products/__init__.py 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 def __init__ ( self , db0 , db1 , db2 , db3 , db4 , db_log , variable , aggregation , product_path , vectorpath ): \"\"\" Examples: Args: db (HidroCLVariable): HidroCLVariable object with GFS variable (see avobe) \\n db_log (str): Log file path for extracted data \\n valid_time (int): Valid time for extracting the product \\n variable (str): Variable name \\n product_path (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n Raises: TypeError: If db is not HidroCLVariable objects \\n \"\"\" if t . check_instance ( db0 , db1 , db2 , db3 , db4 ): self . db0 = db0 self . db1 = db1 self . db2 = db2 self . db3 = db3 self . db4 = db4 self . db_log = db_log self . variable = variable self . aggregation = aggregation self . productname = \"GFS 0.5\u00ba\" self . productpath = product_path self . vectorpath = vectorpath self . common_elements = t . compare_indatabase ( self . db0 . indatabase , self . db1 . indatabase , self . db2 . indatabase , self . db3 . indatabase , self . db4 . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"gfs\" , variable = self . variable ) self . product_ids = t . get_product_ids ( self . product_files , \"gfs\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"gfs\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = \"gfs\" ) else : raise TypeError ( 'db0, db1, db2, db3, db4 must be HidroCLVariable objects' ) __repr__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 2255 2256 2257 2258 2259 2260 2261 2262 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } Database records day0: { len ( self . db0 . indatabase ) } . Database path day 0: { self . db0 . database } Database records day1: { len ( self . db1 . indatabase ) } . Database path day 1: { self . db1 . database } Database records day2: { len ( self . db2 . indatabase ) } . Database path day 2: { self . db2 . database } Database records day3: { len ( self . db3 . indatabase ) } . Database path day 3: { self . db3 . database } Database records day4: { len ( self . db4 . indatabase ) } . Database path day 4: { self . db4 . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . db0 . checkdatabase () self . db1 . checkdatabase () self . db2 . checkdatabase () self . db3 . checkdatabase () self . db4 . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = \"gfs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : days = [] if scene not in self . db0 . indatabase : days . append ( 0 ) if scene not in self . db1 . indatabase : days . append ( 1 ) if scene not in self . db2 . indatabase : days . append ( 2 ) if scene not in self . db3 . indatabase : days . append ( 3 ) if scene not in self . db4 . indatabase : days . append ( 4 ) e . zonal_stats ( scene , scenes_path , temp_dir , 'gfs' , self . db0 . catchment_names , self . db_log , database = None , databases = [ self . db0 . database , self . db1 . database , self . db2 . database , self . db3 . database , self . db4 . database ], pcdatabase = None , pcdatabases = [ self . db0 . pcdatabase , self . db1 . pcdatabase , self . db2 . pcdatabase , self . db3 . pcdatabase , self . db4 . pcdatabase ], vector_path = self . vectorpath , layer = self . variable , aggregation = self . aggregation , days = days ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . temp . checkdatabase () self . pp . checkdatabase () self . et . checkdatabase () self . pet . checkdatabase () self . snw . checkdatabase () self . snwa . checkdatabase () self . snwdn . checkdatabase () self . snwdt . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"era5\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'era5' , log_file = log_file ) Gldas_noah A class to process GLDAS_NOAH025_3H to hidrocl variables Attributes: Name Type Description snow HidroCLVariable HidroCLVariable with the GLDAS snow data temp HidroCLVariable HidroCLVariable with the GLDAS temperature data et HidroCLVariable HidroCLVariable with the GLDAS evapotranspiration data soilm HidroCLVariable HidroCLVariable with the GLDAS soil moisture data snow_log str Path to the log file for the snow extraction temp_log str Path to the log file for the temperature extraction et_log str Path to the log file for the evapotranspiration extraction soilm_log str Path to the log file for the soil moisture extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list List of common elements between the snow, temp, et and soilm databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 8 scenes for gldas) complete_scenes list List of complete scenes (8 scenes for gldas) incomplete_scenes list List of incomplete scenes (less than 8 scenes for gldas) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 class Gldas_noah : \"\"\" A class to process GLDAS_NOAH025_3H to hidrocl variables Attributes: snow (HidroCLVariable): HidroCLVariable with the GLDAS snow data \\n temp (HidroCLVariable): HidroCLVariable with the GLDAS temperature data \\n et (HidroCLVariable): HidroCLVariable with the GLDAS evapotranspiration data \\n soilm (HidroCLVariable): HidroCLVariable with the GLDAS soil moisture data \\n snow_log (str): Path to the log file for the snow extraction \\n temp_log (str): Path to the log file for the temperature extraction \\n et_log (str): Path to the log file for the evapotranspiration extraction \\n soilm_log (str): Path to the log file for the soil moisture extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): List of common elements between the snow, temp, et and soilm databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 8 scenes for gldas) \\n complete_scenes (list): List of complete scenes (8 scenes for gldas) \\n incomplete_scenes (list): List of incomplete scenes (less than 8 scenes for gldas) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , snow , temp , et , soilm , product_path , vector_path , snow_log , temp_log , et_log , soilm_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gldas_noah >>> snow = HidroCLVariable('snow', 'snow.db', 'snow_pc.db') >>> temp = HidroCLVariable('temp', 'temp.db', 'temp_pc.db') >>> et = HidroCLVariable('et', 'et.db', 'et.db') >>> soilm = HidroCLVariable('soilm', 'soilm.db', 'soilm_pc.db') >>> product_path = '/home/user/data/GLDAS_NOAH025_3H' >>> vector_path = '/home/user/data/vector.shp' >>> snow_log = '/home/user/data/logs/snow.log' >>> temp_log = '/home/user/data/logs/temp.log' >>> et_log = '/home/user/data/logs/et.log' >>> soilm_log = '/home/user/data/logs/soilm.log' >>> gldas = Gldas_noah(snow, temp, et, soilm, product_path, ... vector_path, snow_log, temp_log, et_log, soilm_log) >>> gldas \"Class to extract GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1\" Args: snow (HidroCLVariable): HidroCLVariable with the GLDAS snow data \\n temp (HidroCLVariable): HidroCLVariable with the GLDAS temperature data \\n et (HidroCLVariable): HidroCLVariable with the GLDAS evapotranspiration data \\n soilm (HidroCLVariable): HidroCLVariable with the GLDAS soil moisture data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n temp_log (str): Path to the log file for the temperature extraction \\n et_log (str): Path to the log file for the evapotranspiration extraction \\n soilm_log (str): Path to the log file for the soil moisture extraction \\n Raises: TypeError: If snow, temp, et or soilm is not a HidroCLVariable \"\"\" if t . check_instance ( snow , temp , et , soilm ): self . snow = snow self . temp = temp self . et = et self . soilm = soilm self . snow_log = snow_log self . temp_log = temp_log self . et_log = et_log self . soilm_log = soilm_log self . productname = \"GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"gldas\" ) self . product_ids = t . get_product_ids ( self . product_files , \"gldas\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"gldas\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'gldas' ) else : raise TypeError ( 'snow, temp, et and soilm must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } Snow records: { len ( self . snow . indatabase ) } . Snow path: { self . snow . database } Temperature records: { len ( self . temp . indatabase ) } . Temperature path: { self . temp . database } Evapotranspiration records: { len ( self . et . indatabase ) } . Evapotranspiration path: { self . et . database } Soil moisture records: { len ( self . soilm . indatabase ) } . Soil moisture path: { self . soilm . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . snow . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snow_gldas' , self . snow . catchment_names , self . snow_log , database = self . snow . database , pcdatabase = self . snow . pcdatabase , vector_path = self . vectorpath , layer = \"SWE_inst\" ) if scene not in self . temp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'temp_gldas' , self . temp . catchment_names , self . temp_log , database = self . temp . database , pcdatabase = self . temp . pcdatabase , vector_path = self . vectorpath , layer = \"Tair_f_inst\" ) if scene not in self . et . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'et_gldas' , self . et . catchment_names , self . et_log , database = self . et . database , pcdatabase = self . et . pcdatabase , vector_path = self . vectorpath , layer = \"ECanop_tavg\" ) if scene not in self . soilm . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'soilm_gldas' , self . soilm . catchment_names , self . soilm_log , database = self . soilm . database , pcdatabase = self . soilm . pcdatabase , vector_path = self . vectorpath , layer = [ \"SoilMoi0_10cm_inst\" , \"SoilMoi10_40cm_inst\" , \"SoilMoi40_100cm_inst\" , \"SoilMoi100_200cm_inst\" ]) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'gldas' , log_file = log_file ) __init__ ( snow , temp , et , soilm , product_path , vector_path , snow_log , temp_log , et_log , soilm_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gldas_noah >>> snow = HidroCLVariable ( 'snow' , 'snow.db' , 'snow_pc.db' ) >>> temp = HidroCLVariable ( 'temp' , 'temp.db' , 'temp_pc.db' ) >>> et = HidroCLVariable ( 'et' , 'et.db' , 'et.db' ) >>> soilm = HidroCLVariable ( 'soilm' , 'soilm.db' , 'soilm_pc.db' ) >>> product_path = '/home/user/data/GLDAS_NOAH025_3H' >>> vector_path = '/home/user/data/vector.shp' >>> snow_log = '/home/user/data/logs/snow.log' >>> temp_log = '/home/user/data/logs/temp.log' >>> et_log = '/home/user/data/logs/et.log' >>> soilm_log = '/home/user/data/logs/soilm.log' >>> gldas = Gldas_noah ( snow , temp , et , soilm , product_path , ... vector_path , snow_log , temp_log , et_log , soilm_log ) >>> gldas \"Class to extract GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1\" Parameters: Name Type Description Default snow HidroCLVariable HidroCLVariable with the GLDAS snow data required temp HidroCLVariable HidroCLVariable with the GLDAS temperature data required et HidroCLVariable HidroCLVariable with the GLDAS evapotranspiration data required soilm HidroCLVariable HidroCLVariable with the GLDAS soil moisture data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required snow_log str Path to the log file for the snow extraction required temp_log str Path to the log file for the temperature extraction required et_log str Path to the log file for the evapotranspiration extraction required soilm_log str Path to the log file for the soil moisture extraction required Raises: Type Description TypeError If snow, temp, et or soilm is not a HidroCLVariable Source code in hidrocl/products/__init__.py 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 def __init__ ( self , snow , temp , et , soilm , product_path , vector_path , snow_log , temp_log , et_log , soilm_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gldas_noah >>> snow = HidroCLVariable('snow', 'snow.db', 'snow_pc.db') >>> temp = HidroCLVariable('temp', 'temp.db', 'temp_pc.db') >>> et = HidroCLVariable('et', 'et.db', 'et.db') >>> soilm = HidroCLVariable('soilm', 'soilm.db', 'soilm_pc.db') >>> product_path = '/home/user/data/GLDAS_NOAH025_3H' >>> vector_path = '/home/user/data/vector.shp' >>> snow_log = '/home/user/data/logs/snow.log' >>> temp_log = '/home/user/data/logs/temp.log' >>> et_log = '/home/user/data/logs/et.log' >>> soilm_log = '/home/user/data/logs/soilm.log' >>> gldas = Gldas_noah(snow, temp, et, soilm, product_path, ... vector_path, snow_log, temp_log, et_log, soilm_log) >>> gldas \"Class to extract GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1\" Args: snow (HidroCLVariable): HidroCLVariable with the GLDAS snow data \\n temp (HidroCLVariable): HidroCLVariable with the GLDAS temperature data \\n et (HidroCLVariable): HidroCLVariable with the GLDAS evapotranspiration data \\n soilm (HidroCLVariable): HidroCLVariable with the GLDAS soil moisture data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n temp_log (str): Path to the log file for the temperature extraction \\n et_log (str): Path to the log file for the evapotranspiration extraction \\n soilm_log (str): Path to the log file for the soil moisture extraction \\n Raises: TypeError: If snow, temp, et or soilm is not a HidroCLVariable \"\"\" if t . check_instance ( snow , temp , et , soilm ): self . snow = snow self . temp = temp self . et = et self . soilm = soilm self . snow_log = snow_log self . temp_log = temp_log self . et_log = et_log self . soilm_log = soilm_log self . productname = \"GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"gldas\" ) self . product_ids = t . get_product_ids ( self . product_files , \"gldas\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"gldas\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'gldas' ) else : raise TypeError ( 'snow, temp, et and soilm must be HidroCLVariable objects' ) __repr__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1170 1171 1172 1173 1174 1175 1176 1177 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } Snow records: { len ( self . snow . indatabase ) } . Snow path: { self . snow . database } Temperature records: { len ( self . temp . indatabase ) } . Temperature path: { self . temp . database } Evapotranspiration records: { len ( self . et . indatabase ) } . Evapotranspiration path: { self . et . database } Soil moisture records: { len ( self . soilm . indatabase ) } . Soil moisture path: { self . soilm . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . snow . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snow_gldas' , self . snow . catchment_names , self . snow_log , database = self . snow . database , pcdatabase = self . snow . pcdatabase , vector_path = self . vectorpath , layer = \"SWE_inst\" ) if scene not in self . temp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'temp_gldas' , self . temp . catchment_names , self . temp_log , database = self . temp . database , pcdatabase = self . temp . pcdatabase , vector_path = self . vectorpath , layer = \"Tair_f_inst\" ) if scene not in self . et . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'et_gldas' , self . et . catchment_names , self . et_log , database = self . et . database , pcdatabase = self . et . pcdatabase , vector_path = self . vectorpath , layer = \"ECanop_tavg\" ) if scene not in self . soilm . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'soilm_gldas' , self . soilm . catchment_names , self . soilm_log , database = self . soilm . database , pcdatabase = self . soilm . pcdatabase , vector_path = self . vectorpath , layer = [ \"SoilMoi0_10cm_inst\" , \"SoilMoi10_40cm_inst\" , \"SoilMoi40_100cm_inst\" , \"SoilMoi100_200cm_inst\" ]) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'gldas' , log_file = log_file ) Gpm_3imrghhl A class to process GPM_3IMRGHHL to hidrocl variables Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with IMERG precipitation data pp_log str Path to the log file for IMERG precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 48 scenes for imerg) complete_scenes list List of complete scenes (48 scenes for imerg) incomplete_scenes list List of incomplete scenes (less than 48 scenes for imerg) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Gpm_3imrghhl : \"\"\" A class to process GPM_3IMRGHHL to hidrocl variables Attributes: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n pp_log (str): Path to the log file for IMERG precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 48 scenes for imerg) \\n complete_scenes (list): List of complete scenes (48 scenes for imerg) \\n incomplete_scenes (list): List of incomplete scenes (less than 48 scenes for imerg) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gpm_3imrghhl >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> gpm = Gpm_3imrghhl(pp, product_path, vector_path, pp_log) >>> gpm \"Class to extract GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6\" Args: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for IMERG precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"imerg\" ) self . product_ids = t . get_product_ids ( self . product_files , \"imerg\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"imerg\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'imerg' ) else : raise TypeError ( 'pp must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } IMERG precipitation records: { len ( self . pp . indatabase ) } . IMERG precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'imerg' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath , layer = \"Grid_precipitationCal\" ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'imerg' , log_file = log_file ) __init__ ( pp , product_path , vector_path , pp_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gpm_3imrghhl >>> pp = HidroCLVariable ( 'pp' , 'pp.db' , 'pp_pc.db' ) >>> gpm = Gpm_3imrghhl ( pp , product_path , vector_path , pp_log ) >>> gpm \"Class to extract GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6\" Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with IMERG precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for IMERG precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gpm_3imrghhl >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> gpm = Gpm_3imrghhl(pp, product_path, vector_path, pp_log) >>> gpm \"Class to extract GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6\" Args: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for IMERG precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"imerg\" ) self . product_ids = t . get_product_ids ( self . product_files , \"imerg\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"imerg\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'imerg' ) else : raise TypeError ( 'pp must be HidroCLVariable objects' ) __repr__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 825 826 827 828 829 830 831 832 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 834 835 836 837 838 839 840 841 842 843 844 845 846 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } IMERG precipitation records: { len ( self . pp . indatabase ) } . IMERG precipitation database path: { self . pp . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'imerg' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath , layer = \"Grid_precipitationCal\" ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'imerg' , log_file = log_file ) ImergGIS A class to process GPM_3IMRGHHL GIS to hidrocl variables. The extracted variable is precipitatation [mm] with a scale factor of 10. Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with IMERG precipitation data pp_log str Path to the log file for IMERG precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 48 scenes for imerg) complete_scenes list List of complete scenes (48 scenes for imerg) incomplete_scenes list List of incomplete scenes (less than 48 scenes for imerg) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass ImergGIS : \"\"\" A class to process GPM_3IMRGHHL GIS to hidrocl variables. The extracted variable is precipitatation [mm] with a scale factor of 10. Attributes: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n pp_log (str): Path to the log file for IMERG precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 48 scenes for imerg) \\n complete_scenes (list): List of complete scenes (48 scenes for imerg) \\n incomplete_scenes (list): List of incomplete scenes (less than 48 scenes for imerg) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import ImergGIS >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> gpm = ImergGIS(pp, product_path, vector_path, pp_log) >>> gpm \"Class to extract GPM IMERG GIS Late Run Precipitation Half Hourly 0.1 degree Version 6\" Args: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for IMERG precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"GPM IMERG GIS Late Run Precipitation Half Hourly 0.1 degree Version 6\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"imgis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"imgis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"imgis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'imgis' ) else : raise TypeError ( 'pp must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } IMERG GIS precipitation records: { len ( self . pp . indatabase ) } . IMERG GIS precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imgis\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'imgis' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imgis\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'imgis' , log_file = log_file ) __init__ ( pp , product_path , vector_path , pp_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import ImergGIS >>> pp = HidroCLVariable ( 'pp' , 'pp.db' , 'pp_pc.db' ) >>> gpm = ImergGIS ( pp , product_path , vector_path , pp_log ) >>> gpm \"Class to extract GPM IMERG GIS Late Run Precipitation Half Hourly 0.1 degree Version 6\" Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with IMERG precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for IMERG precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import ImergGIS >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> gpm = ImergGIS(pp, product_path, vector_path, pp_log) >>> gpm \"Class to extract GPM IMERG GIS Late Run Precipitation Half Hourly 0.1 degree Version 6\" Args: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for IMERG precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"GPM IMERG GIS Late Run Precipitation Half Hourly 0.1 degree Version 6\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"imgis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"imgis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"imgis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'imgis' ) else : raise TypeError ( 'pp must be HidroCLVariable objects' ) __repr__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 983 984 985 986 987 988 989 990 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } IMERG GIS precipitation records: { len ( self . pp . indatabase ) } . IMERG GIS precipitation database path: { self . pp . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imgis\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'imgis' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imgis\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'imgis' , log_file = log_file ) Mcd15a2h A class to process MCD15A2H to hidrocl variables Attributes: Name Type Description lai HidroCLVariable HidroCLVariable object with the LAI data fpar HidroCLVariable HidroCLVariable object with the FPAR data lai_log str Path to the log file for the LAI extraction fpar_log str Path to the log file for the FPAR extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list List of common elements between the FPAR and LAI databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mcd15a2h : \"\"\" A class to process MCD15A2H to hidrocl variables Attributes: lai (HidroCLVariable): HidroCLVariable object with the LAI data \\n fpar (HidroCLVariable): HidroCLVariable object with the FPAR data \\n lai_log (str): Path to the log file for the LAI extraction \\n fpar_log (str): Path to the log file for the FPAR extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): List of common elements between the FPAR and LAI databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , lai , fpar , product_path , vector_path , lai_log , fpar_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mcd15a2h >>> lai = HidroCLVariable('lai', 'lai.db', 'lai_pc.db') >>> fpar = HidroCLVariable('fpar', 'fpar.db', 'fpar_pc.db') >>> product_path = '/home/user/mod15a2h' >>> vector_path = '/home/user/vector' >>> lai_log = '/home/user/lai.log' >>> fpar_log = '/home/user/fpar.log' >>> mcd15a2h = Mcd15a2h(lai, fpar, product_path, vector_path, ... lai_log, fpar_log) >>> mcd15a2h \"Class to extract MODIS MCD15A2H Version 6.0\" Args: lai (HidroCLVariable): HidroCLVariable object with the LAI data fpar (HidroCLVariable): HidroCLVariable object with the FPAR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder lai_log (str): Path to the log file for the LAI extraction fpar_log (str): Path to the log file for the FPAR extraction Raises: TypeError: If lai or fpar is not HidroCLVariable object \"\"\" if t . check_instance ( lai , fpar ): self . lai = lai self . fpar = fpar self . lai_log = lai_log self . fpar_log = fpar_log self . productname = \"MODIS MCD15A2H Version 6.0\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'lai and fpar must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } LAI records: { len ( self . lai . indatabase ) } . LAI database path: { self . lai . database } FPAR records: { len ( self . fpar . indatabase ) } . FPAR database path: { self . fpar . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . lai . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'lai' , self . lai . catchment_names , self . lai_log , database = self . lai . database , pcdatabase = self . lai . pcdatabase , vector_path = self . vectorpath , layer = \"Lai_500m\" , ) if scene not in self . fpar . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'fpar' , self . fpar . catchment_names , self . fpar_log , database = self . fpar . database , pcdatabase = self . fpar . pcdatabase , vector_path = self . vectorpath , layer = \"Fpar_500m\" ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) __init__ ( lai , fpar , product_path , vector_path , lai_log , fpar_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mcd15a2h >>> lai = HidroCLVariable ( 'lai' , 'lai.db' , 'lai_pc.db' ) >>> fpar = HidroCLVariable ( 'fpar' , 'fpar.db' , 'fpar_pc.db' ) >>> product_path = '/home/user/mod15a2h' >>> vector_path = '/home/user/vector' >>> lai_log = '/home/user/lai.log' >>> fpar_log = '/home/user/fpar.log' >>> mcd15a2h = Mcd15a2h ( lai , fpar , product_path , vector_path , ... lai_log , fpar_log ) >>> mcd15a2h \"Class to extract MODIS MCD15A2H Version 6.0\" Parameters: Name Type Description Default lai HidroCLVariable HidroCLVariable object with the LAI data required fpar HidroCLVariable HidroCLVariable object with the FPAR data required product_path str Path to the product folder required vector_path str Path to the vector folder required lai_log str Path to the log file for the LAI extraction required fpar_log str Path to the log file for the FPAR extraction required Raises: Type Description TypeError If lai or fpar is not HidroCLVariable object Source code in hidrocl/products/__init__.py 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 def __init__ ( self , lai , fpar , product_path , vector_path , lai_log , fpar_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mcd15a2h >>> lai = HidroCLVariable('lai', 'lai.db', 'lai_pc.db') >>> fpar = HidroCLVariable('fpar', 'fpar.db', 'fpar_pc.db') >>> product_path = '/home/user/mod15a2h' >>> vector_path = '/home/user/vector' >>> lai_log = '/home/user/lai.log' >>> fpar_log = '/home/user/fpar.log' >>> mcd15a2h = Mcd15a2h(lai, fpar, product_path, vector_path, ... lai_log, fpar_log) >>> mcd15a2h \"Class to extract MODIS MCD15A2H Version 6.0\" Args: lai (HidroCLVariable): HidroCLVariable object with the LAI data fpar (HidroCLVariable): HidroCLVariable object with the FPAR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder lai_log (str): Path to the log file for the LAI extraction fpar_log (str): Path to the log file for the FPAR extraction Raises: TypeError: If lai or fpar is not HidroCLVariable object \"\"\" if t . check_instance ( lai , fpar ): self . lai = lai self . fpar = fpar self . lai_log = lai_log self . fpar_log = fpar_log self . productname = \"MODIS MCD15A2H Version 6.0\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'lai and fpar must be HidroCLVariable objects' ) __repr__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 649 650 651 652 653 654 655 656 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } LAI records: { len ( self . lai . indatabase ) } . LAI database path: { self . lai . database } FPAR records: { len ( self . fpar . indatabase ) } . FPAR database path: { self . fpar . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . lai . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'lai' , self . lai . catchment_names , self . lai_log , database = self . lai . database , pcdatabase = self . lai . pcdatabase , vector_path = self . vectorpath , layer = \"Lai_500m\" , ) if scene not in self . fpar . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'fpar' , self . fpar . catchment_names , self . fpar_log , database = self . fpar . database , pcdatabase = self . fpar . pcdatabase , vector_path = self . vectorpath , layer = \"Fpar_500m\" ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) Mod10a2 A class to process MOD10A2 to hidrocl variables Attributes: Name Type Description nsnow HidroCLVariable HidroCLVariable object with north face snow data ssnow HidroCLVariable HidroCLVariable object with south face snow data snow_log str Path to the log file for the snow extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located northvectorpath str Path to the vector folder with the north Shapefile with areas to be processed southvectorpath str Path to the vector folder with the south Shapefile with areas to be processed common_elements list List of common elements between the nsnow and ssnow databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mod10a2 : \"\"\" A class to process MOD10A2 to hidrocl variables Attributes: nsnow (HidroCLVariable): HidroCLVariable object with north face snow data \\n ssnow (HidroCLVariable): HidroCLVariable object with south face snow data \\n snow_log (str): Path to the log file for the snow extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n northvectorpath (str): Path to the vector folder with the north Shapefile with areas to be processed \\n southvectorpath (str): Path to the vector folder with the south Shapefile with areas to be processed \\n common_elements (list): List of common elements between the nsnow and ssnow databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , nsnow , ssnow , product_path , north_vector_path , south_vector_path , snow_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod10a2 >>> nsnow = HidroCLVariable('nsnow', 'modis', 'mod10a2', 'north') >>> ssnow = HidroCLVariable('ssnow', 'modis', 'mod10a2', 'south') >>> product_path = '/home/user/mod10a2' >>> north_vector_path = '/home/user/north_vector.shp' >>> south_vector_path = '/home/user/south_vector.shp' >>> snow_log = '/home/user/snow.log' >>> mod10a2 = Mod10a2(nsnow, ssnow, product_path, ... north_vector_path, south_vector_path, snow_log) >>> mod10a2 \"Class to extract MODIS MOD10A2 Version 6.1\" Args: nsnow (HidroCLVariable): HidroCLVariable object with north face snow data \\n ssnow (HidroCLVariable): HidroCLVariable object with south face snow data \\n product_path (str): Path to the product folder where the product files are located \\n north_vector_path (str): Path to the vector folder with the north Shapefile with areas to be processed \\n south_vector_path (str): Path to the vector folder with the south Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n Raises: TypeError: If nsnow or ssnow is not a HidroCLVariable object \\n \"\"\" if t . check_instance ( nsnow , ssnow ): self . nsnow = nsnow self . ssnow = ssnow self . snow_log = snow_log self . productname = \"MODIS MOD10A2 Version 6.1\" self . productpath = product_path self . northvectorpath = north_vector_path self . southvectorpath = south_vector_path self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'nsnow and ssnow must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } North face snow records: { len ( self . nsnow . indatabase ) } . North face snow path: { self . nsnow . database } South face snow records: { len ( self . ssnow . indatabase ) } . South face snow database path: { self . ssnow . database } ''' def run_extraction ( self , limit = None ): \"\"\"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . nsnow . indatabase : # so what about the south one? e . zonal_stats ( scene , scenes_path , temp_dir , 'snow' , self . nsnow . catchment_names , self . snow_log , north_database = self . nsnow . database , north_pcdatabase = self . nsnow . pcdatabase , south_database = self . ssnow . database , south_pcdatabase = self . ssnow . pcdatabase , north_vector_path = self . northvectorpath , south_vector_path = self . southvectorpath , layer = \"Maximum_Snow_Extent\" ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) __init__ ( nsnow , ssnow , product_path , north_vector_path , south_vector_path , snow_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod10a2 >>> nsnow = HidroCLVariable ( 'nsnow' , 'modis' , 'mod10a2' , 'north' ) >>> ssnow = HidroCLVariable ( 'ssnow' , 'modis' , 'mod10a2' , 'south' ) >>> product_path = '/home/user/mod10a2' >>> north_vector_path = '/home/user/north_vector.shp' >>> south_vector_path = '/home/user/south_vector.shp' >>> snow_log = '/home/user/snow.log' >>> mod10a2 = Mod10a2 ( nsnow , ssnow , product_path , ... north_vector_path , south_vector_path , snow_log ) >>> mod10a2 \"Class to extract MODIS MOD10A2 Version 6.1\" Parameters: Name Type Description Default nsnow HidroCLVariable HidroCLVariable object with north face snow data required ssnow HidroCLVariable HidroCLVariable object with south face snow data required product_path str Path to the product folder where the product files are located required north_vector_path str Path to the vector folder with the north Shapefile with areas to be processed required south_vector_path str Path to the vector folder with the south Shapefile with areas to be processed required snow_log str Path to the log file for the snow extraction required Raises: Type Description TypeError If nsnow or ssnow is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 def __init__ ( self , nsnow , ssnow , product_path , north_vector_path , south_vector_path , snow_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod10a2 >>> nsnow = HidroCLVariable('nsnow', 'modis', 'mod10a2', 'north') >>> ssnow = HidroCLVariable('ssnow', 'modis', 'mod10a2', 'south') >>> product_path = '/home/user/mod10a2' >>> north_vector_path = '/home/user/north_vector.shp' >>> south_vector_path = '/home/user/south_vector.shp' >>> snow_log = '/home/user/snow.log' >>> mod10a2 = Mod10a2(nsnow, ssnow, product_path, ... north_vector_path, south_vector_path, snow_log) >>> mod10a2 \"Class to extract MODIS MOD10A2 Version 6.1\" Args: nsnow (HidroCLVariable): HidroCLVariable object with north face snow data \\n ssnow (HidroCLVariable): HidroCLVariable object with south face snow data \\n product_path (str): Path to the product folder where the product files are located \\n north_vector_path (str): Path to the vector folder with the north Shapefile with areas to be processed \\n south_vector_path (str): Path to the vector folder with the south Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n Raises: TypeError: If nsnow or ssnow is not a HidroCLVariable object \\n \"\"\" if t . check_instance ( nsnow , ssnow ): self . nsnow = nsnow self . ssnow = ssnow self . snow_log = snow_log self . productname = \"MODIS MOD10A2 Version 6.1\" self . productpath = product_path self . northvectorpath = north_vector_path self . southvectorpath = south_vector_path self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'nsnow and ssnow must be HidroCLVariable objects' ) __repr__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 306 307 308 309 310 311 312 313 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } North face snow records: { len ( self . nsnow . indatabase ) } . North face snow path: { self . nsnow . database } South face snow records: { len ( self . ssnow . indatabase ) } . South face snow database path: { self . ssnow . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 def run_extraction ( self , limit = None ): \"\"\"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . nsnow . indatabase : # so what about the south one? e . zonal_stats ( scene , scenes_path , temp_dir , 'snow' , self . nsnow . catchment_names , self . snow_log , north_database = self . nsnow . database , north_pcdatabase = self . nsnow . pcdatabase , south_database = self . ssnow . database , south_pcdatabase = self . ssnow . pcdatabase , north_vector_path = self . northvectorpath , south_vector_path = self . southvectorpath , layer = \"Maximum_Snow_Extent\" ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) Mod13q1 A class to process MOD13Q1 to hidrocl variables Attributes: Name Type Description ndvi HidroCLVariable HidroCLVariable object with the NDVI data evi HidroCLVariable HidroCLVariable object with the EVI data nbr HidroCLVariable HidroCLVariable object with the NBR data ndvi_log str Path to the log file for the NDVI extraction evi_log str Path to the log file for the EVI extraction nbr_log str Path to the log file for the NBR extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list List of common elements between the NDVI, EVI and NBR databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mod13q1 : \"\"\" A class to process MOD13Q1 to hidrocl variables Attributes: ndvi (HidroCLVariable): HidroCLVariable object with the NDVI data \\n evi (HidroCLVariable): HidroCLVariable object with the EVI data \\n nbr (HidroCLVariable): HidroCLVariable object with the NBR data \\n ndvi_log (str): Path to the log file for the NDVI extraction \\n evi_log (str): Path to the log file for the EVI extraction \\n nbr_log (str): Path to the log file for the NBR extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): List of common elements between the NDVI, EVI and NBR databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , ndvi , evi , nbr , product_path , vector_path , ndvi_log , evi_log , nbr_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl.products import Mod13q1 >>> ndvi = HidroCLVariable('ndvi', 'ndvi.db', 'ndvi_pc.db') >>> evi = HidroCLVariable('evi', 'evi.db', 'evi_pc.db') >>> nbr = HidroCLVariable('nbr', 'nbr.db', 'nbr_pc.db') >>> product_path = '/home/user/mod13q1' >>> vector_path = '/home/user/vector.shp' >>> ndvi_log = '/home/user/ndvi.log' >>> evi_log = '/home/user/evi.log' >>> nbr_log = '/home/user/nbr.log' >>> mod13q1 = Mod13q1(ndvi, evi, nbr, product_path, vector_path, ... ndvi_log, evi_log, nbr_log) >>> mod13q1 \"Class to extract MODIS MOD13Q1 Version 6.1\" Args: ndvi (HidroCLVariable): Object with the NDVI data evi (HidroCLVariable): Object with the EVI data nbr (HidroCLVariable): Object with the NBR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder ndvi_log (str): Path to the log file for the NDVI extraction evi_log (str): Path to the log file for the EVI extraction nbr_log (str): Path to the log file for the NBR extraction Raises: TypeError: If the input is not a HidroCLVariable object \"\"\" if t . check_instance ( ndvi , evi , nbr ): self . ndvi = ndvi self . evi = evi self . nbr = nbr self . ndvi_log = ndvi_log self . evi_log = evi_log self . nbr_log = nbr_log self . productname = \"MODIS MOD13Q1 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'ndvi, evi and nbr must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } NDVI records: { len ( self . ndvi . indatabase ) } . NDVI database path: { self . ndvi . database } EVI records: { len ( self . evi . indatabase ) } . EVI database path: { self . evi . database } NBR records: { len ( self . nbr . indatabase ) } . NBR database path: { self . nbr . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . ndvi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'ndvi' , self . ndvi . catchment_names , self . ndvi_log , database = self . ndvi . database , pcdatabase = self . ndvi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days NDVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'evi' , self . evi . catchment_names , self . evi_log , database = self . evi . database , pcdatabase = self . evi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days EVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'nbr' , self . nbr . catchment_names , self . nbr_log , database = self . nbr . database , pcdatabase = self . nbr . pcdatabase , vector_path = self . vectorpath , layer = [ \"250m 16 days NIR reflectance\" , \"250m 16 days MIR reflectance\" ]) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) __init__ ( ndvi , evi , nbr , product_path , vector_path , ndvi_log , evi_log , nbr_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl.products import Mod13q1 >>> ndvi = HidroCLVariable ( 'ndvi' , 'ndvi.db' , 'ndvi_pc.db' ) >>> evi = HidroCLVariable ( 'evi' , 'evi.db' , 'evi_pc.db' ) >>> nbr = HidroCLVariable ( 'nbr' , 'nbr.db' , 'nbr_pc.db' ) >>> product_path = '/home/user/mod13q1' >>> vector_path = '/home/user/vector.shp' >>> ndvi_log = '/home/user/ndvi.log' >>> evi_log = '/home/user/evi.log' >>> nbr_log = '/home/user/nbr.log' >>> mod13q1 = Mod13q1 ( ndvi , evi , nbr , product_path , vector_path , ... ndvi_log , evi_log , nbr_log ) >>> mod13q1 \"Class to extract MODIS MOD13Q1 Version 6.1\" Parameters: Name Type Description Default ndvi HidroCLVariable Object with the NDVI data required evi HidroCLVariable Object with the EVI data required nbr HidroCLVariable Object with the NBR data required product_path str Path to the product folder required vector_path str Path to the vector folder required ndvi_log str Path to the log file for the NDVI extraction required evi_log str Path to the log file for the EVI extraction required nbr_log str Path to the log file for the NBR extraction required Raises: Type Description TypeError If the input is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 def __init__ ( self , ndvi , evi , nbr , product_path , vector_path , ndvi_log , evi_log , nbr_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl.products import Mod13q1 >>> ndvi = HidroCLVariable('ndvi', 'ndvi.db', 'ndvi_pc.db') >>> evi = HidroCLVariable('evi', 'evi.db', 'evi_pc.db') >>> nbr = HidroCLVariable('nbr', 'nbr.db', 'nbr_pc.db') >>> product_path = '/home/user/mod13q1' >>> vector_path = '/home/user/vector.shp' >>> ndvi_log = '/home/user/ndvi.log' >>> evi_log = '/home/user/evi.log' >>> nbr_log = '/home/user/nbr.log' >>> mod13q1 = Mod13q1(ndvi, evi, nbr, product_path, vector_path, ... ndvi_log, evi_log, nbr_log) >>> mod13q1 \"Class to extract MODIS MOD13Q1 Version 6.1\" Args: ndvi (HidroCLVariable): Object with the NDVI data evi (HidroCLVariable): Object with the EVI data nbr (HidroCLVariable): Object with the NBR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder ndvi_log (str): Path to the log file for the NDVI extraction evi_log (str): Path to the log file for the EVI extraction nbr_log (str): Path to the log file for the NBR extraction Raises: TypeError: If the input is not a HidroCLVariable object \"\"\" if t . check_instance ( ndvi , evi , nbr ): self . ndvi = ndvi self . evi = evi self . nbr = nbr self . ndvi_log = ndvi_log self . evi_log = evi_log self . nbr_log = nbr_log self . productname = \"MODIS MOD13Q1 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'ndvi, evi and nbr must be HidroCLVariable objects' ) __repr__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 98 99 100 101 102 103 104 105 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } NDVI records: { len ( self . ndvi . indatabase ) } . NDVI database path: { self . ndvi . database } EVI records: { len ( self . evi . indatabase ) } . EVI database path: { self . evi . database } NBR records: { len ( self . nbr . indatabase ) } . NBR database path: { self . nbr . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . ndvi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'ndvi' , self . ndvi . catchment_names , self . ndvi_log , database = self . ndvi . database , pcdatabase = self . ndvi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days NDVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'evi' , self . evi . catchment_names , self . evi_log , database = self . evi . database , pcdatabase = self . evi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days EVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'nbr' , self . nbr . catchment_names , self . nbr_log , database = self . nbr . database , pcdatabase = self . nbr . pcdatabase , vector_path = self . vectorpath , layer = [ \"250m 16 days NIR reflectance\" , \"250m 16 days MIR reflectance\" ]) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) Mod16a2 A class to process MOD16A2 to hidrocl variables Attributes: Name Type Description pet HidroCLVariable HidroCLVariable object with the potential evapotranspiration pet_log str Path to the log file for the pet extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list Elements in pet database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mod16a2 : \"\"\" A class to process MOD16A2 to hidrocl variables Attributes: pet (HidroCLVariable): HidroCLVariable object with the potential evapotranspiration \\n pet_log (str): Path to the log file for the pet extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): Elements in pet database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pet , product_path , vector_path , pet_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod16a2 >>> pet = HidroCLVariable('pet', 'pet.db', 'pet_pc.db') >>> product_path = '/home/user/modis/mod16a2' >>> vector_path = '/home/user/vector.shp' >>> pet_log = '/home/user/log/pet.log' >>> mod16a2 = Mod16a2(pet, product_path, vector_path, pet_log) >>> mod16a2 \"Class to extract MODIS MOD16A2 Version 6.1\" Args: pet (HidroCLVariable): Object with the potential evapotranspiration data product_path (str): Path to the product folder vector_path (str): Path to the vector folder pet_log (str): Path to the log file for the pet extraction Raises: TypeError: If pet is not a HidroCLVariable object \"\"\" if t . check_instance ( pet ): self . pet = pet self . pet_log = pet_log self . productname = \"MODIS MOD16A2 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pet . indatabase self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'pet must be HidroCLVariable object' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PET records: { len ( self . pet . indatabase ) } . PET database path: { self . pet . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pet . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pet' , self . pet . catchment_names , self . pet_log , database = self . pet . database , pcdatabase = self . pet . pcdatabase , vector_path = self . vectorpath , layer = \"PET_500m\" , ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) __init__ ( pet , product_path , vector_path , pet_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod16a2 >>> pet = HidroCLVariable ( 'pet' , 'pet.db' , 'pet_pc.db' ) >>> product_path = '/home/user/modis/mod16a2' >>> vector_path = '/home/user/vector.shp' >>> pet_log = '/home/user/log/pet.log' >>> mod16a2 = Mod16a2 ( pet , product_path , vector_path , pet_log ) >>> mod16a2 \"Class to extract MODIS MOD16A2 Version 6.1\" Parameters: Name Type Description Default pet HidroCLVariable Object with the potential evapotranspiration data required product_path str Path to the product folder required vector_path str Path to the vector folder required pet_log str Path to the log file for the pet extraction required Raises: Type Description TypeError If pet is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 def __init__ ( self , pet , product_path , vector_path , pet_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod16a2 >>> pet = HidroCLVariable('pet', 'pet.db', 'pet_pc.db') >>> product_path = '/home/user/modis/mod16a2' >>> vector_path = '/home/user/vector.shp' >>> pet_log = '/home/user/log/pet.log' >>> mod16a2 = Mod16a2(pet, product_path, vector_path, pet_log) >>> mod16a2 \"Class to extract MODIS MOD16A2 Version 6.1\" Args: pet (HidroCLVariable): Object with the potential evapotranspiration data product_path (str): Path to the product folder vector_path (str): Path to the vector folder pet_log (str): Path to the log file for the pet extraction Raises: TypeError: If pet is not a HidroCLVariable object \"\"\" if t . check_instance ( pet ): self . pet = pet self . pet_log = pet_log self . productname = \"MODIS MOD16A2 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pet . indatabase self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'pet must be HidroCLVariable object' ) __repr__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 479 480 481 482 483 484 485 486 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 488 489 490 491 492 493 494 495 496 497 498 499 500 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PET records: { len ( self . pet . indatabase ) } . PET database path: { self . pet . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pet . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pet' , self . pet . catchment_names , self . pet_log , database = self . pet . database , pcdatabase = self . pet . pcdatabase , vector_path = self . vectorpath , layer = \"PET_500m\" , ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) Pdirnow A class to process PDIR-Now to hidrocl variables Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with PDIR-Now precipitation data pp_log str Path to the log file for PDIR-Now precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 1 scenes for modis) complete_scenes list List of complete scenes (1 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 1 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 class Pdirnow : \"\"\" A class to process PDIR-Now to hidrocl variables Attributes: pp (HidroCLVariable): HidroCLVariable object with PDIR-Now precipitation data \\n pp_log (str): Path to the log file for PDIR-Now precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 1 scenes for modis) \\n complete_scenes (list): List of complete scenes (1 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 1 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Pdirnow >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PDIR-Now' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> pdirnow = Pdirnow(pp, product_path, vector_path, pp_log) >>> pdirnow \"Class to extract PDIR-Now 0.04\u00ba\" Args: pp (HidroCLVariable): HidroCLVariable object with PDIR-Now precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PDIR-Now precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PDIR-Now 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , 'pdirnow' ) self . product_ids = t . get_product_ids ( self . product_files , 'pdirnow' ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , 'pdirnow' ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'pdirnow' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PDIR-Now precipitation records: { len ( self . pp . indatabase ) } . PDIR-Now precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'pdirnow' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"pdirnow\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'pdirnow' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file ) __init__ ( pp , product_path , vector_path , pp_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Pdirnow >>> pp = HidroCLVariable ( 'pp' , 'pp.db' , 'pp_pc.db' ) >>> product_path = '/home/user/data/PDIR-Now' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> pdirnow = Pdirnow ( pp , product_path , vector_path , pp_log ) >>> pdirnow \"Class to extract PDIR-Now 0.04\u00ba\" Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with PDIR-Now precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for PDIR-Now precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Pdirnow >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PDIR-Now' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> pdirnow = Pdirnow(pp, product_path, vector_path, pp_log) >>> pdirnow \"Class to extract PDIR-Now 0.04\u00ba\" Args: pp (HidroCLVariable): HidroCLVariable object with PDIR-Now precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PDIR-Now precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PDIR-Now 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , 'pdirnow' ) self . product_ids = t . get_product_ids ( self . product_files , 'pdirnow' ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , 'pdirnow' ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'pdirnow' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) __repr__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1699 1700 1701 1702 1703 1704 1705 1706 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PDIR-Now precipitation records: { len ( self . pp . indatabase ) } . PDIR-Now precipitation database path: { self . pp . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'pdirnow' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"pdirnow\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'pdirnow' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file ) Persiann_ccs A class to process PERSIANN-CCS to hidrocl variables Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS precipitation data pp_log str Path to the log file for PERSIANN-CCS precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 1 scenes for modis) complete_scenes list List of complete scenes (1 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 1 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 class Persiann_ccs : \"\"\" A class to process PERSIANN-CCS to hidrocl variables Attributes: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS precipitation data \\n pp_log (str): Path to the log file for PERSIANN-CCS precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 1 scenes for modis) \\n complete_scenes (list): List of complete scenes (1 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 1 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs = Persiann_ccs(pp, product_path, vector_path, pp_log) >>> persiann_ccs \"Class to extract PERSIANN-CCS 0.04\u00ba\" Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file ) __init__ ( pp , product_path , vector_path , pp_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs >>> pp = HidroCLVariable ( 'pp' , 'pp.db' , 'pp_pc.db' ) >>> product_path = '/home/user/data/PERSIANN-CCS' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs = Persiann_ccs ( pp , product_path , vector_path , pp_log ) >>> persiann_ccs \"Class to extract PERSIANN-CCS 0.04\u00ba\" Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for PERSIANN-CCS precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs = Persiann_ccs(pp, product_path, vector_path, pp_log) >>> persiann_ccs \"Class to extract PERSIANN-CCS 0.04\u00ba\" Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) __repr__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1384 1385 1386 1387 1388 1389 1390 1391 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS precipitation database path: { self . pp . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file ) Persiann_ccs_cdr A class to process PERSIANN-CCS-CDR to hidrocl variables Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS-CDR precipitation data pp_log str Path to the log file for PERSIANN-CCS-CDR precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 1 scenes for modis) complete_scenes list List of complete scenes (1 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 1 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 class Persiann_ccs_cdr : \"\"\" A class to process PERSIANN-CCS-CDR to hidrocl variables Attributes: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS-CDR precipitation data \\n pp_log (str): Path to the log file for PERSIANN-CCS-CDR precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 1 scenes for modis) \\n complete_scenes (list): List of complete scenes (1 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 1 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs_cdr >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS-CDR' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs_cdr = Persiann_ccs_cdr(pp, product_path, vector_path, pp_log) >>> persiann_ccs_cdr \"Class to extract PERSIANN-CCS-CDR 0.04\u00ba\" Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS-CDR precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS-CDR precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS-CDR 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs_cdr\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs_cdr\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs_cdr\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs_cdr' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS-CDR precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS-CDR precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs_cdr\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file ) __init__ ( pp , product_path , vector_path , pp_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs_cdr >>> pp = HidroCLVariable ( 'pp' , 'pp.db' , 'pp_pc.db' ) >>> product_path = '/home/user/data/PERSIANN-CCS-CDR' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs_cdr = Persiann_ccs_cdr ( pp , product_path , vector_path , pp_log ) >>> persiann_ccs_cdr \"Class to extract PERSIANN-CCS-CDR 0.04\u00ba\" Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS-CDR precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for PERSIANN-CCS-CDR precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs_cdr >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS-CDR' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs_cdr = Persiann_ccs_cdr(pp, product_path, vector_path, pp_log) >>> persiann_ccs_cdr \"Class to extract PERSIANN-CCS-CDR 0.04\u00ba\" Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS-CDR precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS-CDR precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS-CDR 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs_cdr\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs_cdr\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs_cdr\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs_cdr' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) __repr__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1542 1543 1544 1545 1546 1547 1548 1549 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS-CDR precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS-CDR precipitation database path: { self . pp . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs_cdr\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file )","title":"Product processors"},{"location":"products/#product-processors","text":"","title":"Product processors"},{"location":"products/#hidrocl.products.Era5_land","text":"A class to process ERA5-Land hourly to hidrocl variables. Where: temperature: t2m -> temp (10 * \u00baC) mean potential evapotranspiration: pev -> pet (10000 * m) sum snow albedo: asn -> snwa (10 * frac) mean snow cover: snowc -> snw (10 * frac) mean snow density: rsn -> snwdn (10 * kg/m3) mean snow depth: sd -> snwdt (10 * m) mean evapotranspiration: e -> et (10000 * m) sum total precipitation: tp -> pp (10000 * m) sum volumetric soil water: swvl1+swvl2+swvl3+swvl4 -> soilm (1000 * m3/m3) mean temp, pp, et, pet, snow, snowa, snowdn, snowdt, soilm Attributes: Name Type Description temp HidroCLVariable HidroCLVariable object with ERA5 temperature data pp HidroCLVariable HidroCLVariable object with ERA5 precipitation data et HidroCLVariable HidroCLVariable object with ERA5 evapotranspiration data pet HidroCLVariable HidroCLVariable object with ERA5 potential evapotranspiration data snw HidroCLVariable HidroCLVariable object with ERA5 snow cover data snwa HidroCLVariable HidroCLVariable object with ERA5 snow albedo data snwdn HidroCLVariable HidroCLVariable object with ERA5 snow density data snwdt HidroCLVariable HidroCLVariable object with ERA5 snow depth data soilm HidroCLVariable HidroCLVariable object with ERA5 volumetric soil water data temp_log str Log file path for temperature data pp_log str Log file path for precipitation data et_log str Log file path for evapotranspiration data pet_log str Log file path for potential evapotranspiration data snw_log str Log file path for snow cover data snwa_log str Log file path for snow albedo data snwdn_log str Log file path for snow density data snwdt_log str Log file path for snow depth data soilm_log str Log file path for volumetric soil water data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list List of common elements between the snow, temp, et and soilm databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 1 scenes for era5) complete_scenes list List of complete scenes (1 scenes for era5) incomplete_scenes list List of incomplete scenes (less than 1 scenes for era5) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 class Era5_land : \"\"\" A class to process ERA5-Land hourly to hidrocl variables. Where: temperature: t2m -> temp (10 * \u00baC) mean \\n potential evapotranspiration: pev -> pet (10000 * m) sum \\n snow albedo: asn -> snwa (10 * frac) mean \\n snow cover: snowc -> snw (10 * frac) mean \\n snow density: rsn -> snwdn (10 * kg/m3) mean \\n snow depth: sd -> snwdt (10 * m) mean \\n evapotranspiration: e -> et (10000 * m) sum \\n total precipitation: tp -> pp (10000 * m) sum \\n volumetric soil water: swvl1+swvl2+swvl3+swvl4 -> soilm (1000 * m3/m3) mean \\n temp, pp, et, pet, snow, snowa, snowdn, snowdt, soilm \\n Attributes: temp (HidroCLVariable): HidroCLVariable object with ERA5 temperature data \\n pp (HidroCLVariable): HidroCLVariable object with ERA5 precipitation data \\n et (HidroCLVariable): HidroCLVariable object with ERA5 evapotranspiration data \\n pet (HidroCLVariable): HidroCLVariable object with ERA5 potential evapotranspiration data \\n snw (HidroCLVariable): HidroCLVariable object with ERA5 snow cover data \\n snwa (HidroCLVariable): HidroCLVariable object with ERA5 snow albedo data \\n snwdn (HidroCLVariable): HidroCLVariable object with ERA5 snow density data \\n snwdt (HidroCLVariable): HidroCLVariable object with ERA5 snow depth data \\n soilm (HidroCLVariable): HidroCLVariable object with ERA5 volumetric soil water data \\n temp_log (str): Log file path for temperature data \\n pp_log (str): Log file path for precipitation data \\n et_log (str): Log file path for evapotranspiration data \\n pet_log (str): Log file path for potential evapotranspiration data \\n snw_log (str): Log file path for snow cover data \\n snwa_log (str): Log file path for snow albedo data \\n snwdn_log (str): Log file path for snow density data \\n snwdt_log (str): Log file path for snow depth data \\n soilm_log (str): Log file path for volumetric soil water data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): List of common elements between the snow, temp, et and soilm databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 1 scenes for era5) \\n complete_scenes (list): List of complete scenes (1 scenes for era5) \\n incomplete_scenes (list): List of incomplete scenes (less than 1 scenes for era5) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , temp , pp , et , pet , snw , snwa , snwdn , snwdt , soilm , product_path , vector_path , temp_log , pp_log , et_log , pet_log , snw_log , snwa_log , snwdn_log , snwdt_log , soilm_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Era5_land >>> temp = HidroCLVariable('temp',temp.db, temppc.db) >>> pp = HidroCLVariable('pp', pp.db, pppc.db) >>> et = HidroCLVariable('et', et.db, etpc.db) >>> pet = HidroCLVariable('pet', pet.db, petpc.db) >>> snw = HidroCLVariable('snw', snw.db, snwpc.db) >>> snwa = HidroCLVariable('snwa', snwa.db, snwapc.db) >>> snwdn = HidroCLVariable('snwdn', snwdn.db, snwdnpc.db) >>> snwdt = HidroCLVariable('snwdt', snwdt.db, snwdtpc.db) >>> soilm = HidroCLVariable('soilm', soilm.db, soilmdb.db) >>> product_path = '/home/user/era5-land' >>> vector_path = '/home/user/shapefiles' >>> temp_log = '/home/user/temp.log' >>> pp_log = '/home/user/pp.log' >>> et_log = '/home/user/et.log' >>> pet_log = '/home/user/pet.log' >>> snw_log = '/home/user/snw.log' >>> snwa_log = '/home/user/snwa.log' >>> snwdn_log = '/home/user/snwdn.log' >>> snwdt_log = '/home/user/snwdt.log' >>> soilm_log = '/home/user/soilm.log' >>> era5 = Era5_land(temp, pp, et, pet, snw, snwa, snwdn, snwdt, soilm, product_path, vector_path, temp_log, pp_log, et_log, pet_log, snw_log, snwa_log, snwdn_log, snwdt_log, soilm_log) >>> era5 \"Class to extract ERA5-Land Hourly 0.1 degree\" >>> era5.run_extraction() Args: temp (HidroCLVariable): HidroCLVariable object with ERA5 temperature data \\n pp (HidroCLVariable): HidroCLVariable object with ERA5 precipitation data \\n et (HidroCLVariable): HidroCLVariable object with ERA5 evapotranspiration data \\n pet (HidroCLVariable): HidroCLVariable object with ERA5 potential evapotranspiration data \\n snw (HidroCLVariable): HidroCLVariable object with ERA5 snow cover data \\n snwa (HidroCLVariable): HidroCLVariable object with ERA5 snow albedo data \\n snwdn (HidroCLVariable): HidroCLVariable object with ERA5 snow density data \\n snwdt (HidroCLVariable): HidroCLVariable object with ERA5 snow depth data \\n soilm (HidroCLVariable): HidroCLVariable object with ERA5 volumetric soil water data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n temp_log (str): Log file path for temperature data \\n pp_log (str): Log file path for precipitation data \\n et_log (str): Log file path for evapotranspiration data \\n pet_log (str): Log file path for potential evapotranspiration data \\n snw_log (str): Log file path for snow cover data \\n snwa_log (str): Log file path for snow albedo data \\n snwdn_log (str): Log file path for snow density data \\n snwdt_log (str): Log file path for snow depth data \\n soilm_log (str): Log file path for volumetric soil water data \\n Raises: TypeError: If temp, pp, et, pet, snow, snowa, snowdn, snowdt or soilm is not HidroCLVariable objects \\n \"\"\" if t . check_instance ( temp , pp , et , pet , snw , snwa , snwdn , snwdt , soilm ): self . temp = temp self . pp = pp self . et = et self . pet = pet self . snw = snw self . snwa = snwa self . snwdn = snwdn self . snwdt = snwdt self . soilm = soilm self . temp_log = temp_log self . pp_log = pp_log self . et_log = et_log self . pet_log = pet_log self . snw_log = snw_log self . snwa_log = snwa_log self . snwdn_log = snwdn_log self . snwdt_log = snwdt_log self . soilm_log = soilm_log self . productname = \"ERA5-Land Hourly 0.1 degree\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"era5\" ) self . product_ids = t . get_product_ids ( self . product_files , \"era5\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"era5\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = \"era5\" ) else : raise TypeError ( 'temp, pp, et, pet, snw, snwa, snwdn, snwdt and soilm must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } Temperature records: { len ( self . temp . indatabase ) } . Temperature path: { self . temp . database } Precipitation records: { len ( self . pp . indatabase ) } . Precipitation path: { self . pp . database } Evapotranspiration records: { len ( self . et . indatabase ) } . Evapotranspiration path: { self . et . database } Potential evapotranspiration records: { len ( self . pet . indatabase ) } . Potential evapotranspiration path: { self . pet . database } Snow cover records: { len ( self . snw . indatabase ) } . Snow cover path: { self . snw . database } Snow albedo records: { len ( self . snwa . indatabase ) } . Snow albedo path: { self . snwa . database } Snow density records: { len ( self . snwdn . indatabase ) } . Snow density path: { self . snwdn . database } Snow depth records: { len ( self . snwdt . indatabase ) } . Snow depth path: { self . snwdt . database } Volumetric soil water records: { len ( self . soilm . indatabase ) } . Volumetric soil water path: { self . soilm . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . temp . checkdatabase () self . pp . checkdatabase () self . et . checkdatabase () self . pet . checkdatabase () self . snw . checkdatabase () self . snwa . checkdatabase () self . snwdn . checkdatabase () self . snwdt . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"era5\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . temp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'temp_era5' , self . temp . catchment_names , self . temp_log , database = self . temp . database , pcdatabase = self . temp . pcdatabase , vector_path = self . vectorpath , layer = \"t2m\" ) if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pp_era5' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath , layer = \"tp\" ) if scene not in self . et . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'et_era5' , self . et . catchment_names , self . et_log , database = self . et . database , pcdatabase = self . et . pcdatabase , vector_path = self . vectorpath , layer = \"e\" ) if scene not in self . pet . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pet_era5' , self . pet . catchment_names , self . pet_log , database = self . pet . database , pcdatabase = self . pet . pcdatabase , vector_path = self . vectorpath , layer = \"pev\" ) if scene not in self . snw . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snw_era5' , self . snw . catchment_names , self . snw_log , database = self . snw . database , pcdatabase = self . snw . pcdatabase , vector_path = self . vectorpath , layer = \"snowc\" ) if scene not in self . snwa . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snwa_era5' , self . snwa . catchment_names , self . snwa_log , database = self . snwa . database , pcdatabase = self . snwa . pcdatabase , vector_path = self . vectorpath , layer = \"asn\" ) if scene not in self . snwdn . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snwdn_era5' , self . snwdn . catchment_names , self . snwdn_log , database = self . snwdn . database , pcdatabase = self . snwdn . pcdatabase , vector_path = self . vectorpath , layer = \"rsn\" ) if scene not in self . snwdt . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snwdt_era5' , self . snwdt . catchment_names , self . snwdt_log , database = self . snwdt . database , pcdatabase = self . snwdt . pcdatabase , vector_path = self . vectorpath , layer = \"sd\" ) if scene not in self . soilm . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'soilm_era5' , self . soilm . catchment_names , self . soilm_log , database = self . soilm . database , pcdatabase = self . soilm . pcdatabase , vector_path = self . vectorpath , layer = [ \"swvl1\" , \"swvl2\" , \"swvl3\" , \"swvl4\" ]) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . temp . checkdatabase () self . pp . checkdatabase () self . et . checkdatabase () self . pet . checkdatabase () self . snw . checkdatabase () self . snwa . checkdatabase () self . snwdn . checkdatabase () self . snwdt . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"era5\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'era5' , log_file = log_file )","title":"Era5_land"},{"location":"products/#hidrocl.products.Era5_land.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Era5_land >>> temp = HidroCLVariable ( 'temp' , temp . db , temppc . db ) >>> pp = HidroCLVariable ( 'pp' , pp . db , pppc . db ) >>> et = HidroCLVariable ( 'et' , et . db , etpc . db ) >>> pet = HidroCLVariable ( 'pet' , pet . db , petpc . db ) >>> snw = HidroCLVariable ( 'snw' , snw . db , snwpc . db ) >>> snwa = HidroCLVariable ( 'snwa' , snwa . db , snwapc . db ) >>> snwdn = HidroCLVariable ( 'snwdn' , snwdn . db , snwdnpc . db ) >>> snwdt = HidroCLVariable ( 'snwdt' , snwdt . db , snwdtpc . db ) >>> soilm = HidroCLVariable ( 'soilm' , soilm . db , soilmdb . db ) >>> product_path = '/home/user/era5-land' >>> vector_path = '/home/user/shapefiles' >>> temp_log = '/home/user/temp.log' >>> pp_log = '/home/user/pp.log' >>> et_log = '/home/user/et.log' >>> pet_log = '/home/user/pet.log' >>> snw_log = '/home/user/snw.log' >>> snwa_log = '/home/user/snwa.log' >>> snwdn_log = '/home/user/snwdn.log' >>> snwdt_log = '/home/user/snwdt.log' >>> soilm_log = '/home/user/soilm.log' >>> era5 = Era5_land ( temp , pp , et , pet , snw , snwa , snwdn , snwdt , soilm, product_path, vector_path, temp_log, pp_log, et_log, pet_log, snw_log, snwa_log, snwdn_log, snwdt_log, soilm_log) >>> era5 \"Class to extract ERA5-Land Hourly 0.1 degree\" >>> era5 . run_extraction () Parameters: Name Type Description Default temp HidroCLVariable HidroCLVariable object with ERA5 temperature data required pp HidroCLVariable HidroCLVariable object with ERA5 precipitation data required et HidroCLVariable HidroCLVariable object with ERA5 evapotranspiration data required pet HidroCLVariable HidroCLVariable object with ERA5 potential evapotranspiration data required snw HidroCLVariable HidroCLVariable object with ERA5 snow cover data required snwa HidroCLVariable HidroCLVariable object with ERA5 snow albedo data required snwdn HidroCLVariable HidroCLVariable object with ERA5 snow density data required snwdt HidroCLVariable HidroCLVariable object with ERA5 snow depth data required soilm HidroCLVariable HidroCLVariable object with ERA5 volumetric soil water data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required temp_log str Log file path for temperature data required pp_log str Log file path for precipitation data required et_log str Log file path for evapotranspiration data required pet_log str Log file path for potential evapotranspiration data required snw_log str Log file path for snow cover data required snwa_log str Log file path for snow albedo data required snwdn_log str Log file path for snow density data required snwdt_log str Log file path for snow depth data required soilm_log str Log file path for volumetric soil water data required Raises: Type Description TypeError If temp, pp, et, pet, snow, snowa, snowdn, snowdt or soilm is not HidroCLVariable objects Source code in hidrocl/products/__init__.py 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 def __init__ ( self , temp , pp , et , pet , snw , snwa , snwdn , snwdt , soilm , product_path , vector_path , temp_log , pp_log , et_log , pet_log , snw_log , snwa_log , snwdn_log , snwdt_log , soilm_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Era5_land >>> temp = HidroCLVariable('temp',temp.db, temppc.db) >>> pp = HidroCLVariable('pp', pp.db, pppc.db) >>> et = HidroCLVariable('et', et.db, etpc.db) >>> pet = HidroCLVariable('pet', pet.db, petpc.db) >>> snw = HidroCLVariable('snw', snw.db, snwpc.db) >>> snwa = HidroCLVariable('snwa', snwa.db, snwapc.db) >>> snwdn = HidroCLVariable('snwdn', snwdn.db, snwdnpc.db) >>> snwdt = HidroCLVariable('snwdt', snwdt.db, snwdtpc.db) >>> soilm = HidroCLVariable('soilm', soilm.db, soilmdb.db) >>> product_path = '/home/user/era5-land' >>> vector_path = '/home/user/shapefiles' >>> temp_log = '/home/user/temp.log' >>> pp_log = '/home/user/pp.log' >>> et_log = '/home/user/et.log' >>> pet_log = '/home/user/pet.log' >>> snw_log = '/home/user/snw.log' >>> snwa_log = '/home/user/snwa.log' >>> snwdn_log = '/home/user/snwdn.log' >>> snwdt_log = '/home/user/snwdt.log' >>> soilm_log = '/home/user/soilm.log' >>> era5 = Era5_land(temp, pp, et, pet, snw, snwa, snwdn, snwdt, soilm, product_path, vector_path, temp_log, pp_log, et_log, pet_log, snw_log, snwa_log, snwdn_log, snwdt_log, soilm_log) >>> era5 \"Class to extract ERA5-Land Hourly 0.1 degree\" >>> era5.run_extraction() Args: temp (HidroCLVariable): HidroCLVariable object with ERA5 temperature data \\n pp (HidroCLVariable): HidroCLVariable object with ERA5 precipitation data \\n et (HidroCLVariable): HidroCLVariable object with ERA5 evapotranspiration data \\n pet (HidroCLVariable): HidroCLVariable object with ERA5 potential evapotranspiration data \\n snw (HidroCLVariable): HidroCLVariable object with ERA5 snow cover data \\n snwa (HidroCLVariable): HidroCLVariable object with ERA5 snow albedo data \\n snwdn (HidroCLVariable): HidroCLVariable object with ERA5 snow density data \\n snwdt (HidroCLVariable): HidroCLVariable object with ERA5 snow depth data \\n soilm (HidroCLVariable): HidroCLVariable object with ERA5 volumetric soil water data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n temp_log (str): Log file path for temperature data \\n pp_log (str): Log file path for precipitation data \\n et_log (str): Log file path for evapotranspiration data \\n pet_log (str): Log file path for potential evapotranspiration data \\n snw_log (str): Log file path for snow cover data \\n snwa_log (str): Log file path for snow albedo data \\n snwdn_log (str): Log file path for snow density data \\n snwdt_log (str): Log file path for snow depth data \\n soilm_log (str): Log file path for volumetric soil water data \\n Raises: TypeError: If temp, pp, et, pet, snow, snowa, snowdn, snowdt or soilm is not HidroCLVariable objects \\n \"\"\" if t . check_instance ( temp , pp , et , pet , snw , snwa , snwdn , snwdt , soilm ): self . temp = temp self . pp = pp self . et = et self . pet = pet self . snw = snw self . snwa = snwa self . snwdn = snwdn self . snwdt = snwdt self . soilm = soilm self . temp_log = temp_log self . pp_log = pp_log self . et_log = et_log self . pet_log = pet_log self . snw_log = snw_log self . snwa_log = snwa_log self . snwdn_log = snwdn_log self . snwdt_log = snwdt_log self . soilm_log = soilm_log self . productname = \"ERA5-Land Hourly 0.1 degree\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"era5\" ) self . product_ids = t . get_product_ids ( self . product_files , \"era5\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"era5\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = \"era5\" ) else : raise TypeError ( 'temp, pp, et, pet, snw, snwa, snwdn, snwdt and soilm must be HidroCLVariable objects' )","title":"__init__()"},{"location":"products/#hidrocl.products.Era5_land.__repr__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1949 1950 1951 1952 1953 1954 1955 1956 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Era5_land.__str__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } Temperature records: { len ( self . temp . indatabase ) } . Temperature path: { self . temp . database } Precipitation records: { len ( self . pp . indatabase ) } . Precipitation path: { self . pp . database } Evapotranspiration records: { len ( self . et . indatabase ) } . Evapotranspiration path: { self . et . database } Potential evapotranspiration records: { len ( self . pet . indatabase ) } . Potential evapotranspiration path: { self . pet . database } Snow cover records: { len ( self . snw . indatabase ) } . Snow cover path: { self . snw . database } Snow albedo records: { len ( self . snwa . indatabase ) } . Snow albedo path: { self . snwa . database } Snow density records: { len ( self . snwdn . indatabase ) } . Snow density path: { self . snwdn . database } Snow depth records: { len ( self . snwdt . indatabase ) } . Snow depth path: { self . snwdt . database } Volumetric soil water records: { len ( self . soilm . indatabase ) } . Volumetric soil water path: { self . soilm . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Era5_land.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . temp . checkdatabase () self . pp . checkdatabase () self . et . checkdatabase () self . pet . checkdatabase () self . snw . checkdatabase () self . snwa . checkdatabase () self . snwdn . checkdatabase () self . snwdt . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"era5\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . temp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'temp_era5' , self . temp . catchment_names , self . temp_log , database = self . temp . database , pcdatabase = self . temp . pcdatabase , vector_path = self . vectorpath , layer = \"t2m\" ) if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pp_era5' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath , layer = \"tp\" ) if scene not in self . et . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'et_era5' , self . et . catchment_names , self . et_log , database = self . et . database , pcdatabase = self . et . pcdatabase , vector_path = self . vectorpath , layer = \"e\" ) if scene not in self . pet . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pet_era5' , self . pet . catchment_names , self . pet_log , database = self . pet . database , pcdatabase = self . pet . pcdatabase , vector_path = self . vectorpath , layer = \"pev\" ) if scene not in self . snw . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snw_era5' , self . snw . catchment_names , self . snw_log , database = self . snw . database , pcdatabase = self . snw . pcdatabase , vector_path = self . vectorpath , layer = \"snowc\" ) if scene not in self . snwa . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snwa_era5' , self . snwa . catchment_names , self . snwa_log , database = self . snwa . database , pcdatabase = self . snwa . pcdatabase , vector_path = self . vectorpath , layer = \"asn\" ) if scene not in self . snwdn . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snwdn_era5' , self . snwdn . catchment_names , self . snwdn_log , database = self . snwdn . database , pcdatabase = self . snwdn . pcdatabase , vector_path = self . vectorpath , layer = \"rsn\" ) if scene not in self . snwdt . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snwdt_era5' , self . snwdt . catchment_names , self . snwdt_log , database = self . snwdt . database , pcdatabase = self . snwdt . pcdatabase , vector_path = self . vectorpath , layer = \"sd\" ) if scene not in self . soilm . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'soilm_era5' , self . soilm . catchment_names , self . soilm_log , database = self . soilm . database , pcdatabase = self . soilm . pcdatabase , vector_path = self . vectorpath , layer = [ \"swvl1\" , \"swvl2\" , \"swvl3\" , \"swvl4\" ])","title":"run_extraction()"},{"location":"products/#hidrocl.products.Era5_land.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . temp . checkdatabase () self . pp . checkdatabase () self . et . checkdatabase () self . pet . checkdatabase () self . snw . checkdatabase () self . snwa . checkdatabase () self . snwdn . checkdatabase () self . snwdt . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"era5\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'era5' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Gfs","text":"A class to process GFS to hidrocl variables. The used variables are: - gh: Geopotential height - prate: Precipitation rate - r2: 2m relative humidity - t2m: 2m temperature - u10: 10m U wind component - v10: 10m V wind component Attributes: Name Type Description db0 HidroCLVariable HidroCLVariable object with GFS variable (see avobe) of day 0 db1 HidroCLVariable HidroCLVariable object with GFS variable (see avobe) of day 1 db2 HidroCLVariable HidroCLVariable object with GFS variable (see avobe) of day 2 db3 HidroCLVariable HidroCLVariable object with GFS variable (see avobe) of day 3 db4 HidroCLVariable HidroCLVariable object with GFS variable (see avobe) of day 4 db_log str Log file path for temperature data valid_time int Valid time for extracting the product variable str Variable name productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 1 scenes for era5) complete_scenes list List of complete scenes (1 scenes for era5) incomplete_scenes list List of incomplete scenes (less than 1 scenes for era5) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 class Gfs : \"\"\" A class to process GFS to hidrocl variables. The used variables are: - gh: Geopotential height - prate: Precipitation rate - r2: 2m relative humidity - t2m: 2m temperature - u10: 10m U wind component - v10: 10m V wind component Attributes: db0 (HidroCLVariable): HidroCLVariable object with GFS variable (see avobe) of day 0 \\n db1 (HidroCLVariable): HidroCLVariable object with GFS variable (see avobe) of day 1 \\n db2 (HidroCLVariable): HidroCLVariable object with GFS variable (see avobe) of day 2 \\n db3 (HidroCLVariable): HidroCLVariable object with GFS variable (see avobe) of day 3 \\n db4 (HidroCLVariable): HidroCLVariable object with GFS variable (see avobe) of day 4 \\n db_log (str): Log file path for temperature data \\n valid_time (int): Valid time for extracting the product \\n variable (str): Variable name \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 1 scenes for era5) \\n complete_scenes (list): List of complete scenes (1 scenes for era5) \\n incomplete_scenes (list): List of incomplete scenes (less than 1 scenes for era5) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , db0 , db1 , db2 , db3 , db4 , db_log , variable , aggregation , product_path , vectorpath ): \"\"\" Examples: Args: db (HidroCLVariable): HidroCLVariable object with GFS variable (see avobe) \\n db_log (str): Log file path for extracted data \\n valid_time (int): Valid time for extracting the product \\n variable (str): Variable name \\n product_path (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n Raises: TypeError: If db is not HidroCLVariable objects \\n \"\"\" if t . check_instance ( db0 , db1 , db2 , db3 , db4 ): self . db0 = db0 self . db1 = db1 self . db2 = db2 self . db3 = db3 self . db4 = db4 self . db_log = db_log self . variable = variable self . aggregation = aggregation self . productname = \"GFS 0.5\u00ba\" self . productpath = product_path self . vectorpath = vectorpath self . common_elements = t . compare_indatabase ( self . db0 . indatabase , self . db1 . indatabase , self . db2 . indatabase , self . db3 . indatabase , self . db4 . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"gfs\" , variable = self . variable ) self . product_ids = t . get_product_ids ( self . product_files , \"gfs\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"gfs\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = \"gfs\" ) else : raise TypeError ( 'db0, db1, db2, db3, db4 must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } Database records day0: { len ( self . db0 . indatabase ) } . Database path day 0: { self . db0 . database } Database records day1: { len ( self . db1 . indatabase ) } . Database path day 1: { self . db1 . database } Database records day2: { len ( self . db2 . indatabase ) } . Database path day 2: { self . db2 . database } Database records day3: { len ( self . db3 . indatabase ) } . Database path day 3: { self . db3 . database } Database records day4: { len ( self . db4 . indatabase ) } . Database path day 4: { self . db4 . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . db0 . checkdatabase () self . db1 . checkdatabase () self . db2 . checkdatabase () self . db3 . checkdatabase () self . db4 . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = \"gfs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : days = [] if scene not in self . db0 . indatabase : days . append ( 0 ) if scene not in self . db1 . indatabase : days . append ( 1 ) if scene not in self . db2 . indatabase : days . append ( 2 ) if scene not in self . db3 . indatabase : days . append ( 3 ) if scene not in self . db4 . indatabase : days . append ( 4 ) e . zonal_stats ( scene , scenes_path , temp_dir , 'gfs' , self . db0 . catchment_names , self . db_log , database = None , databases = [ self . db0 . database , self . db1 . database , self . db2 . database , self . db3 . database , self . db4 . database ], pcdatabase = None , pcdatabases = [ self . db0 . pcdatabase , self . db1 . pcdatabase , self . db2 . pcdatabase , self . db3 . pcdatabase , self . db4 . pcdatabase ], vector_path = self . vectorpath , layer = self . variable , aggregation = self . aggregation , days = days ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . temp . checkdatabase () self . pp . checkdatabase () self . et . checkdatabase () self . pet . checkdatabase () self . snw . checkdatabase () self . snwa . checkdatabase () self . snwdn . checkdatabase () self . snwdt . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"era5\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'era5' , log_file = log_file )","title":"Gfs"},{"location":"products/#hidrocl.products.Gfs.__init__","text":"Examples: Parameters: Name Type Description Default db HidroCLVariable HidroCLVariable object with GFS variable (see avobe) required db_log str Log file path for extracted data required valid_time int Valid time for extracting the product required variable str Variable name required product_path str Path to the product folder where the product files are located required vectorpath str Path to the vector folder with Shapefile with areas to be processed required Raises: Type Description TypeError If db is not HidroCLVariable objects Source code in hidrocl/products/__init__.py 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 def __init__ ( self , db0 , db1 , db2 , db3 , db4 , db_log , variable , aggregation , product_path , vectorpath ): \"\"\" Examples: Args: db (HidroCLVariable): HidroCLVariable object with GFS variable (see avobe) \\n db_log (str): Log file path for extracted data \\n valid_time (int): Valid time for extracting the product \\n variable (str): Variable name \\n product_path (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n Raises: TypeError: If db is not HidroCLVariable objects \\n \"\"\" if t . check_instance ( db0 , db1 , db2 , db3 , db4 ): self . db0 = db0 self . db1 = db1 self . db2 = db2 self . db3 = db3 self . db4 = db4 self . db_log = db_log self . variable = variable self . aggregation = aggregation self . productname = \"GFS 0.5\u00ba\" self . productpath = product_path self . vectorpath = vectorpath self . common_elements = t . compare_indatabase ( self . db0 . indatabase , self . db1 . indatabase , self . db2 . indatabase , self . db3 . indatabase , self . db4 . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"gfs\" , variable = self . variable ) self . product_ids = t . get_product_ids ( self . product_files , \"gfs\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"gfs\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = \"gfs\" ) else : raise TypeError ( 'db0, db1, db2, db3, db4 must be HidroCLVariable objects' )","title":"__init__()"},{"location":"products/#hidrocl.products.Gfs.__repr__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 2255 2256 2257 2258 2259 2260 2261 2262 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Gfs.__str__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } Database records day0: { len ( self . db0 . indatabase ) } . Database path day 0: { self . db0 . database } Database records day1: { len ( self . db1 . indatabase ) } . Database path day 1: { self . db1 . database } Database records day2: { len ( self . db2 . indatabase ) } . Database path day 2: { self . db2 . database } Database records day3: { len ( self . db3 . indatabase ) } . Database path day 3: { self . db3 . database } Database records day4: { len ( self . db4 . indatabase ) } . Database path day 4: { self . db4 . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Gfs.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . db0 . checkdatabase () self . db1 . checkdatabase () self . db2 . checkdatabase () self . db3 . checkdatabase () self . db4 . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = \"gfs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : days = [] if scene not in self . db0 . indatabase : days . append ( 0 ) if scene not in self . db1 . indatabase : days . append ( 1 ) if scene not in self . db2 . indatabase : days . append ( 2 ) if scene not in self . db3 . indatabase : days . append ( 3 ) if scene not in self . db4 . indatabase : days . append ( 4 ) e . zonal_stats ( scene , scenes_path , temp_dir , 'gfs' , self . db0 . catchment_names , self . db_log , database = None , databases = [ self . db0 . database , self . db1 . database , self . db2 . database , self . db3 . database , self . db4 . database ], pcdatabase = None , pcdatabases = [ self . db0 . pcdatabase , self . db1 . pcdatabase , self . db2 . pcdatabase , self . db3 . pcdatabase , self . db4 . pcdatabase ], vector_path = self . vectorpath , layer = self . variable , aggregation = self . aggregation , days = days )","title":"run_extraction()"},{"location":"products/#hidrocl.products.Gfs.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . temp . checkdatabase () self . pp . checkdatabase () self . et . checkdatabase () self . pet . checkdatabase () self . snw . checkdatabase () self . snwa . checkdatabase () self . snwdn . checkdatabase () self . snwdt . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . temp . indatabase , self . pp . indatabase , self . et . indatabase , self . pet . indatabase , self . snw . indatabase , self . snwa . indatabase , self . snwdn . indatabase , self . snwdt . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"era5\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'era5' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Gldas_noah","text":"A class to process GLDAS_NOAH025_3H to hidrocl variables Attributes: Name Type Description snow HidroCLVariable HidroCLVariable with the GLDAS snow data temp HidroCLVariable HidroCLVariable with the GLDAS temperature data et HidroCLVariable HidroCLVariable with the GLDAS evapotranspiration data soilm HidroCLVariable HidroCLVariable with the GLDAS soil moisture data snow_log str Path to the log file for the snow extraction temp_log str Path to the log file for the temperature extraction et_log str Path to the log file for the evapotranspiration extraction soilm_log str Path to the log file for the soil moisture extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list List of common elements between the snow, temp, et and soilm databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 8 scenes for gldas) complete_scenes list List of complete scenes (8 scenes for gldas) incomplete_scenes list List of incomplete scenes (less than 8 scenes for gldas) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 class Gldas_noah : \"\"\" A class to process GLDAS_NOAH025_3H to hidrocl variables Attributes: snow (HidroCLVariable): HidroCLVariable with the GLDAS snow data \\n temp (HidroCLVariable): HidroCLVariable with the GLDAS temperature data \\n et (HidroCLVariable): HidroCLVariable with the GLDAS evapotranspiration data \\n soilm (HidroCLVariable): HidroCLVariable with the GLDAS soil moisture data \\n snow_log (str): Path to the log file for the snow extraction \\n temp_log (str): Path to the log file for the temperature extraction \\n et_log (str): Path to the log file for the evapotranspiration extraction \\n soilm_log (str): Path to the log file for the soil moisture extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): List of common elements between the snow, temp, et and soilm databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 8 scenes for gldas) \\n complete_scenes (list): List of complete scenes (8 scenes for gldas) \\n incomplete_scenes (list): List of incomplete scenes (less than 8 scenes for gldas) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , snow , temp , et , soilm , product_path , vector_path , snow_log , temp_log , et_log , soilm_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gldas_noah >>> snow = HidroCLVariable('snow', 'snow.db', 'snow_pc.db') >>> temp = HidroCLVariable('temp', 'temp.db', 'temp_pc.db') >>> et = HidroCLVariable('et', 'et.db', 'et.db') >>> soilm = HidroCLVariable('soilm', 'soilm.db', 'soilm_pc.db') >>> product_path = '/home/user/data/GLDAS_NOAH025_3H' >>> vector_path = '/home/user/data/vector.shp' >>> snow_log = '/home/user/data/logs/snow.log' >>> temp_log = '/home/user/data/logs/temp.log' >>> et_log = '/home/user/data/logs/et.log' >>> soilm_log = '/home/user/data/logs/soilm.log' >>> gldas = Gldas_noah(snow, temp, et, soilm, product_path, ... vector_path, snow_log, temp_log, et_log, soilm_log) >>> gldas \"Class to extract GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1\" Args: snow (HidroCLVariable): HidroCLVariable with the GLDAS snow data \\n temp (HidroCLVariable): HidroCLVariable with the GLDAS temperature data \\n et (HidroCLVariable): HidroCLVariable with the GLDAS evapotranspiration data \\n soilm (HidroCLVariable): HidroCLVariable with the GLDAS soil moisture data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n temp_log (str): Path to the log file for the temperature extraction \\n et_log (str): Path to the log file for the evapotranspiration extraction \\n soilm_log (str): Path to the log file for the soil moisture extraction \\n Raises: TypeError: If snow, temp, et or soilm is not a HidroCLVariable \"\"\" if t . check_instance ( snow , temp , et , soilm ): self . snow = snow self . temp = temp self . et = et self . soilm = soilm self . snow_log = snow_log self . temp_log = temp_log self . et_log = et_log self . soilm_log = soilm_log self . productname = \"GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"gldas\" ) self . product_ids = t . get_product_ids ( self . product_files , \"gldas\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"gldas\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'gldas' ) else : raise TypeError ( 'snow, temp, et and soilm must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } Snow records: { len ( self . snow . indatabase ) } . Snow path: { self . snow . database } Temperature records: { len ( self . temp . indatabase ) } . Temperature path: { self . temp . database } Evapotranspiration records: { len ( self . et . indatabase ) } . Evapotranspiration path: { self . et . database } Soil moisture records: { len ( self . soilm . indatabase ) } . Soil moisture path: { self . soilm . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . snow . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snow_gldas' , self . snow . catchment_names , self . snow_log , database = self . snow . database , pcdatabase = self . snow . pcdatabase , vector_path = self . vectorpath , layer = \"SWE_inst\" ) if scene not in self . temp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'temp_gldas' , self . temp . catchment_names , self . temp_log , database = self . temp . database , pcdatabase = self . temp . pcdatabase , vector_path = self . vectorpath , layer = \"Tair_f_inst\" ) if scene not in self . et . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'et_gldas' , self . et . catchment_names , self . et_log , database = self . et . database , pcdatabase = self . et . pcdatabase , vector_path = self . vectorpath , layer = \"ECanop_tavg\" ) if scene not in self . soilm . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'soilm_gldas' , self . soilm . catchment_names , self . soilm_log , database = self . soilm . database , pcdatabase = self . soilm . pcdatabase , vector_path = self . vectorpath , layer = [ \"SoilMoi0_10cm_inst\" , \"SoilMoi10_40cm_inst\" , \"SoilMoi40_100cm_inst\" , \"SoilMoi100_200cm_inst\" ]) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'gldas' , log_file = log_file )","title":"Gldas_noah"},{"location":"products/#hidrocl.products.Gldas_noah.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gldas_noah >>> snow = HidroCLVariable ( 'snow' , 'snow.db' , 'snow_pc.db' ) >>> temp = HidroCLVariable ( 'temp' , 'temp.db' , 'temp_pc.db' ) >>> et = HidroCLVariable ( 'et' , 'et.db' , 'et.db' ) >>> soilm = HidroCLVariable ( 'soilm' , 'soilm.db' , 'soilm_pc.db' ) >>> product_path = '/home/user/data/GLDAS_NOAH025_3H' >>> vector_path = '/home/user/data/vector.shp' >>> snow_log = '/home/user/data/logs/snow.log' >>> temp_log = '/home/user/data/logs/temp.log' >>> et_log = '/home/user/data/logs/et.log' >>> soilm_log = '/home/user/data/logs/soilm.log' >>> gldas = Gldas_noah ( snow , temp , et , soilm , product_path , ... vector_path , snow_log , temp_log , et_log , soilm_log ) >>> gldas \"Class to extract GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1\" Parameters: Name Type Description Default snow HidroCLVariable HidroCLVariable with the GLDAS snow data required temp HidroCLVariable HidroCLVariable with the GLDAS temperature data required et HidroCLVariable HidroCLVariable with the GLDAS evapotranspiration data required soilm HidroCLVariable HidroCLVariable with the GLDAS soil moisture data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required snow_log str Path to the log file for the snow extraction required temp_log str Path to the log file for the temperature extraction required et_log str Path to the log file for the evapotranspiration extraction required soilm_log str Path to the log file for the soil moisture extraction required Raises: Type Description TypeError If snow, temp, et or soilm is not a HidroCLVariable Source code in hidrocl/products/__init__.py 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 def __init__ ( self , snow , temp , et , soilm , product_path , vector_path , snow_log , temp_log , et_log , soilm_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gldas_noah >>> snow = HidroCLVariable('snow', 'snow.db', 'snow_pc.db') >>> temp = HidroCLVariable('temp', 'temp.db', 'temp_pc.db') >>> et = HidroCLVariable('et', 'et.db', 'et.db') >>> soilm = HidroCLVariable('soilm', 'soilm.db', 'soilm_pc.db') >>> product_path = '/home/user/data/GLDAS_NOAH025_3H' >>> vector_path = '/home/user/data/vector.shp' >>> snow_log = '/home/user/data/logs/snow.log' >>> temp_log = '/home/user/data/logs/temp.log' >>> et_log = '/home/user/data/logs/et.log' >>> soilm_log = '/home/user/data/logs/soilm.log' >>> gldas = Gldas_noah(snow, temp, et, soilm, product_path, ... vector_path, snow_log, temp_log, et_log, soilm_log) >>> gldas \"Class to extract GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1\" Args: snow (HidroCLVariable): HidroCLVariable with the GLDAS snow data \\n temp (HidroCLVariable): HidroCLVariable with the GLDAS temperature data \\n et (HidroCLVariable): HidroCLVariable with the GLDAS evapotranspiration data \\n soilm (HidroCLVariable): HidroCLVariable with the GLDAS soil moisture data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n temp_log (str): Path to the log file for the temperature extraction \\n et_log (str): Path to the log file for the evapotranspiration extraction \\n soilm_log (str): Path to the log file for the soil moisture extraction \\n Raises: TypeError: If snow, temp, et or soilm is not a HidroCLVariable \"\"\" if t . check_instance ( snow , temp , et , soilm ): self . snow = snow self . temp = temp self . et = et self . soilm = soilm self . snow_log = snow_log self . temp_log = temp_log self . et_log = et_log self . soilm_log = soilm_log self . productname = \"GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"gldas\" ) self . product_ids = t . get_product_ids ( self . product_files , \"gldas\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"gldas\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'gldas' ) else : raise TypeError ( 'snow, temp, et and soilm must be HidroCLVariable objects' )","title":"__init__()"},{"location":"products/#hidrocl.products.Gldas_noah.__repr__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1170 1171 1172 1173 1174 1175 1176 1177 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Gldas_noah.__str__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } Snow records: { len ( self . snow . indatabase ) } . Snow path: { self . snow . database } Temperature records: { len ( self . temp . indatabase ) } . Temperature path: { self . temp . database } Evapotranspiration records: { len ( self . et . indatabase ) } . Evapotranspiration path: { self . et . database } Soil moisture records: { len ( self . soilm . indatabase ) } . Soil moisture path: { self . soilm . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Gldas_noah.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . snow . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snow_gldas' , self . snow . catchment_names , self . snow_log , database = self . snow . database , pcdatabase = self . snow . pcdatabase , vector_path = self . vectorpath , layer = \"SWE_inst\" ) if scene not in self . temp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'temp_gldas' , self . temp . catchment_names , self . temp_log , database = self . temp . database , pcdatabase = self . temp . pcdatabase , vector_path = self . vectorpath , layer = \"Tair_f_inst\" ) if scene not in self . et . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'et_gldas' , self . et . catchment_names , self . et_log , database = self . et . database , pcdatabase = self . et . pcdatabase , vector_path = self . vectorpath , layer = \"ECanop_tavg\" ) if scene not in self . soilm . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'soilm_gldas' , self . soilm . catchment_names , self . soilm_log , database = self . soilm . database , pcdatabase = self . soilm . pcdatabase , vector_path = self . vectorpath , layer = [ \"SoilMoi0_10cm_inst\" , \"SoilMoi10_40cm_inst\" , \"SoilMoi40_100cm_inst\" , \"SoilMoi100_200cm_inst\" ])","title":"run_extraction()"},{"location":"products/#hidrocl.products.Gldas_noah.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'gldas' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Gpm_3imrghhl","text":"A class to process GPM_3IMRGHHL to hidrocl variables Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with IMERG precipitation data pp_log str Path to the log file for IMERG precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 48 scenes for imerg) complete_scenes list List of complete scenes (48 scenes for imerg) incomplete_scenes list List of incomplete scenes (less than 48 scenes for imerg) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Gpm_3imrghhl : \"\"\" A class to process GPM_3IMRGHHL to hidrocl variables Attributes: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n pp_log (str): Path to the log file for IMERG precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 48 scenes for imerg) \\n complete_scenes (list): List of complete scenes (48 scenes for imerg) \\n incomplete_scenes (list): List of incomplete scenes (less than 48 scenes for imerg) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gpm_3imrghhl >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> gpm = Gpm_3imrghhl(pp, product_path, vector_path, pp_log) >>> gpm \"Class to extract GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6\" Args: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for IMERG precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"imerg\" ) self . product_ids = t . get_product_ids ( self . product_files , \"imerg\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"imerg\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'imerg' ) else : raise TypeError ( 'pp must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } IMERG precipitation records: { len ( self . pp . indatabase ) } . IMERG precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'imerg' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath , layer = \"Grid_precipitationCal\" ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'imerg' , log_file = log_file )","title":"Gpm_3imrghhl"},{"location":"products/#hidrocl.products.Gpm_3imrghhl.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gpm_3imrghhl >>> pp = HidroCLVariable ( 'pp' , 'pp.db' , 'pp_pc.db' ) >>> gpm = Gpm_3imrghhl ( pp , product_path , vector_path , pp_log ) >>> gpm \"Class to extract GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6\" Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with IMERG precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for IMERG precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gpm_3imrghhl >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> gpm = Gpm_3imrghhl(pp, product_path, vector_path, pp_log) >>> gpm \"Class to extract GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6\" Args: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for IMERG precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"imerg\" ) self . product_ids = t . get_product_ids ( self . product_files , \"imerg\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"imerg\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'imerg' ) else : raise TypeError ( 'pp must be HidroCLVariable objects' )","title":"__init__()"},{"location":"products/#hidrocl.products.Gpm_3imrghhl.__repr__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 825 826 827 828 829 830 831 832 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Gpm_3imrghhl.__str__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 834 835 836 837 838 839 840 841 842 843 844 845 846 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } IMERG precipitation records: { len ( self . pp . indatabase ) } . IMERG precipitation database path: { self . pp . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Gpm_3imrghhl.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'imerg' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath , layer = \"Grid_precipitationCal\" )","title":"run_extraction()"},{"location":"products/#hidrocl.products.Gpm_3imrghhl.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'imerg' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.ImergGIS","text":"A class to process GPM_3IMRGHHL GIS to hidrocl variables. The extracted variable is precipitatation [mm] with a scale factor of 10. Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with IMERG precipitation data pp_log str Path to the log file for IMERG precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 48 scenes for imerg) complete_scenes list List of complete scenes (48 scenes for imerg) incomplete_scenes list List of incomplete scenes (less than 48 scenes for imerg) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass ImergGIS : \"\"\" A class to process GPM_3IMRGHHL GIS to hidrocl variables. The extracted variable is precipitatation [mm] with a scale factor of 10. Attributes: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n pp_log (str): Path to the log file for IMERG precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 48 scenes for imerg) \\n complete_scenes (list): List of complete scenes (48 scenes for imerg) \\n incomplete_scenes (list): List of incomplete scenes (less than 48 scenes for imerg) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import ImergGIS >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> gpm = ImergGIS(pp, product_path, vector_path, pp_log) >>> gpm \"Class to extract GPM IMERG GIS Late Run Precipitation Half Hourly 0.1 degree Version 6\" Args: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for IMERG precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"GPM IMERG GIS Late Run Precipitation Half Hourly 0.1 degree Version 6\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"imgis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"imgis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"imgis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'imgis' ) else : raise TypeError ( 'pp must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } IMERG GIS precipitation records: { len ( self . pp . indatabase ) } . IMERG GIS precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imgis\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'imgis' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imgis\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'imgis' , log_file = log_file )","title":"ImergGIS"},{"location":"products/#hidrocl.products.ImergGIS.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import ImergGIS >>> pp = HidroCLVariable ( 'pp' , 'pp.db' , 'pp_pc.db' ) >>> gpm = ImergGIS ( pp , product_path , vector_path , pp_log ) >>> gpm \"Class to extract GPM IMERG GIS Late Run Precipitation Half Hourly 0.1 degree Version 6\" Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with IMERG precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for IMERG precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import ImergGIS >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> gpm = ImergGIS(pp, product_path, vector_path, pp_log) >>> gpm \"Class to extract GPM IMERG GIS Late Run Precipitation Half Hourly 0.1 degree Version 6\" Args: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for IMERG precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"GPM IMERG GIS Late Run Precipitation Half Hourly 0.1 degree Version 6\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"imgis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"imgis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"imgis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'imgis' ) else : raise TypeError ( 'pp must be HidroCLVariable objects' )","title":"__init__()"},{"location":"products/#hidrocl.products.ImergGIS.__repr__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 983 984 985 986 987 988 989 990 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.ImergGIS.__str__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } IMERG GIS precipitation records: { len ( self . pp . indatabase ) } . IMERG GIS precipitation database path: { self . pp . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.ImergGIS.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imgis\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'imgis' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath )","title":"run_extraction()"},{"location":"products/#hidrocl.products.ImergGIS.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imgis\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'imgis' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Mcd15a2h","text":"A class to process MCD15A2H to hidrocl variables Attributes: Name Type Description lai HidroCLVariable HidroCLVariable object with the LAI data fpar HidroCLVariable HidroCLVariable object with the FPAR data lai_log str Path to the log file for the LAI extraction fpar_log str Path to the log file for the FPAR extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list List of common elements between the FPAR and LAI databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mcd15a2h : \"\"\" A class to process MCD15A2H to hidrocl variables Attributes: lai (HidroCLVariable): HidroCLVariable object with the LAI data \\n fpar (HidroCLVariable): HidroCLVariable object with the FPAR data \\n lai_log (str): Path to the log file for the LAI extraction \\n fpar_log (str): Path to the log file for the FPAR extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): List of common elements between the FPAR and LAI databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , lai , fpar , product_path , vector_path , lai_log , fpar_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mcd15a2h >>> lai = HidroCLVariable('lai', 'lai.db', 'lai_pc.db') >>> fpar = HidroCLVariable('fpar', 'fpar.db', 'fpar_pc.db') >>> product_path = '/home/user/mod15a2h' >>> vector_path = '/home/user/vector' >>> lai_log = '/home/user/lai.log' >>> fpar_log = '/home/user/fpar.log' >>> mcd15a2h = Mcd15a2h(lai, fpar, product_path, vector_path, ... lai_log, fpar_log) >>> mcd15a2h \"Class to extract MODIS MCD15A2H Version 6.0\" Args: lai (HidroCLVariable): HidroCLVariable object with the LAI data fpar (HidroCLVariable): HidroCLVariable object with the FPAR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder lai_log (str): Path to the log file for the LAI extraction fpar_log (str): Path to the log file for the FPAR extraction Raises: TypeError: If lai or fpar is not HidroCLVariable object \"\"\" if t . check_instance ( lai , fpar ): self . lai = lai self . fpar = fpar self . lai_log = lai_log self . fpar_log = fpar_log self . productname = \"MODIS MCD15A2H Version 6.0\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'lai and fpar must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } LAI records: { len ( self . lai . indatabase ) } . LAI database path: { self . lai . database } FPAR records: { len ( self . fpar . indatabase ) } . FPAR database path: { self . fpar . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . lai . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'lai' , self . lai . catchment_names , self . lai_log , database = self . lai . database , pcdatabase = self . lai . pcdatabase , vector_path = self . vectorpath , layer = \"Lai_500m\" , ) if scene not in self . fpar . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'fpar' , self . fpar . catchment_names , self . fpar_log , database = self . fpar . database , pcdatabase = self . fpar . pcdatabase , vector_path = self . vectorpath , layer = \"Fpar_500m\" ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"Mcd15a2h"},{"location":"products/#hidrocl.products.Mcd15a2h.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mcd15a2h >>> lai = HidroCLVariable ( 'lai' , 'lai.db' , 'lai_pc.db' ) >>> fpar = HidroCLVariable ( 'fpar' , 'fpar.db' , 'fpar_pc.db' ) >>> product_path = '/home/user/mod15a2h' >>> vector_path = '/home/user/vector' >>> lai_log = '/home/user/lai.log' >>> fpar_log = '/home/user/fpar.log' >>> mcd15a2h = Mcd15a2h ( lai , fpar , product_path , vector_path , ... lai_log , fpar_log ) >>> mcd15a2h \"Class to extract MODIS MCD15A2H Version 6.0\" Parameters: Name Type Description Default lai HidroCLVariable HidroCLVariable object with the LAI data required fpar HidroCLVariable HidroCLVariable object with the FPAR data required product_path str Path to the product folder required vector_path str Path to the vector folder required lai_log str Path to the log file for the LAI extraction required fpar_log str Path to the log file for the FPAR extraction required Raises: Type Description TypeError If lai or fpar is not HidroCLVariable object Source code in hidrocl/products/__init__.py 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 def __init__ ( self , lai , fpar , product_path , vector_path , lai_log , fpar_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mcd15a2h >>> lai = HidroCLVariable('lai', 'lai.db', 'lai_pc.db') >>> fpar = HidroCLVariable('fpar', 'fpar.db', 'fpar_pc.db') >>> product_path = '/home/user/mod15a2h' >>> vector_path = '/home/user/vector' >>> lai_log = '/home/user/lai.log' >>> fpar_log = '/home/user/fpar.log' >>> mcd15a2h = Mcd15a2h(lai, fpar, product_path, vector_path, ... lai_log, fpar_log) >>> mcd15a2h \"Class to extract MODIS MCD15A2H Version 6.0\" Args: lai (HidroCLVariable): HidroCLVariable object with the LAI data fpar (HidroCLVariable): HidroCLVariable object with the FPAR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder lai_log (str): Path to the log file for the LAI extraction fpar_log (str): Path to the log file for the FPAR extraction Raises: TypeError: If lai or fpar is not HidroCLVariable object \"\"\" if t . check_instance ( lai , fpar ): self . lai = lai self . fpar = fpar self . lai_log = lai_log self . fpar_log = fpar_log self . productname = \"MODIS MCD15A2H Version 6.0\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'lai and fpar must be HidroCLVariable objects' )","title":"__init__()"},{"location":"products/#hidrocl.products.Mcd15a2h.__repr__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 649 650 651 652 653 654 655 656 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Mcd15a2h.__str__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } LAI records: { len ( self . lai . indatabase ) } . LAI database path: { self . lai . database } FPAR records: { len ( self . fpar . indatabase ) } . FPAR database path: { self . fpar . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Mcd15a2h.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . lai . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'lai' , self . lai . catchment_names , self . lai_log , database = self . lai . database , pcdatabase = self . lai . pcdatabase , vector_path = self . vectorpath , layer = \"Lai_500m\" , ) if scene not in self . fpar . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'fpar' , self . fpar . catchment_names , self . fpar_log , database = self . fpar . database , pcdatabase = self . fpar . pcdatabase , vector_path = self . vectorpath , layer = \"Fpar_500m\" )","title":"run_extraction()"},{"location":"products/#hidrocl.products.Mcd15a2h.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Mod10a2","text":"A class to process MOD10A2 to hidrocl variables Attributes: Name Type Description nsnow HidroCLVariable HidroCLVariable object with north face snow data ssnow HidroCLVariable HidroCLVariable object with south face snow data snow_log str Path to the log file for the snow extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located northvectorpath str Path to the vector folder with the north Shapefile with areas to be processed southvectorpath str Path to the vector folder with the south Shapefile with areas to be processed common_elements list List of common elements between the nsnow and ssnow databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mod10a2 : \"\"\" A class to process MOD10A2 to hidrocl variables Attributes: nsnow (HidroCLVariable): HidroCLVariable object with north face snow data \\n ssnow (HidroCLVariable): HidroCLVariable object with south face snow data \\n snow_log (str): Path to the log file for the snow extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n northvectorpath (str): Path to the vector folder with the north Shapefile with areas to be processed \\n southvectorpath (str): Path to the vector folder with the south Shapefile with areas to be processed \\n common_elements (list): List of common elements between the nsnow and ssnow databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , nsnow , ssnow , product_path , north_vector_path , south_vector_path , snow_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod10a2 >>> nsnow = HidroCLVariable('nsnow', 'modis', 'mod10a2', 'north') >>> ssnow = HidroCLVariable('ssnow', 'modis', 'mod10a2', 'south') >>> product_path = '/home/user/mod10a2' >>> north_vector_path = '/home/user/north_vector.shp' >>> south_vector_path = '/home/user/south_vector.shp' >>> snow_log = '/home/user/snow.log' >>> mod10a2 = Mod10a2(nsnow, ssnow, product_path, ... north_vector_path, south_vector_path, snow_log) >>> mod10a2 \"Class to extract MODIS MOD10A2 Version 6.1\" Args: nsnow (HidroCLVariable): HidroCLVariable object with north face snow data \\n ssnow (HidroCLVariable): HidroCLVariable object with south face snow data \\n product_path (str): Path to the product folder where the product files are located \\n north_vector_path (str): Path to the vector folder with the north Shapefile with areas to be processed \\n south_vector_path (str): Path to the vector folder with the south Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n Raises: TypeError: If nsnow or ssnow is not a HidroCLVariable object \\n \"\"\" if t . check_instance ( nsnow , ssnow ): self . nsnow = nsnow self . ssnow = ssnow self . snow_log = snow_log self . productname = \"MODIS MOD10A2 Version 6.1\" self . productpath = product_path self . northvectorpath = north_vector_path self . southvectorpath = south_vector_path self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'nsnow and ssnow must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } North face snow records: { len ( self . nsnow . indatabase ) } . North face snow path: { self . nsnow . database } South face snow records: { len ( self . ssnow . indatabase ) } . South face snow database path: { self . ssnow . database } ''' def run_extraction ( self , limit = None ): \"\"\"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . nsnow . indatabase : # so what about the south one? e . zonal_stats ( scene , scenes_path , temp_dir , 'snow' , self . nsnow . catchment_names , self . snow_log , north_database = self . nsnow . database , north_pcdatabase = self . nsnow . pcdatabase , south_database = self . ssnow . database , south_pcdatabase = self . ssnow . pcdatabase , north_vector_path = self . northvectorpath , south_vector_path = self . southvectorpath , layer = \"Maximum_Snow_Extent\" ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"Mod10a2"},{"location":"products/#hidrocl.products.Mod10a2.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod10a2 >>> nsnow = HidroCLVariable ( 'nsnow' , 'modis' , 'mod10a2' , 'north' ) >>> ssnow = HidroCLVariable ( 'ssnow' , 'modis' , 'mod10a2' , 'south' ) >>> product_path = '/home/user/mod10a2' >>> north_vector_path = '/home/user/north_vector.shp' >>> south_vector_path = '/home/user/south_vector.shp' >>> snow_log = '/home/user/snow.log' >>> mod10a2 = Mod10a2 ( nsnow , ssnow , product_path , ... north_vector_path , south_vector_path , snow_log ) >>> mod10a2 \"Class to extract MODIS MOD10A2 Version 6.1\" Parameters: Name Type Description Default nsnow HidroCLVariable HidroCLVariable object with north face snow data required ssnow HidroCLVariable HidroCLVariable object with south face snow data required product_path str Path to the product folder where the product files are located required north_vector_path str Path to the vector folder with the north Shapefile with areas to be processed required south_vector_path str Path to the vector folder with the south Shapefile with areas to be processed required snow_log str Path to the log file for the snow extraction required Raises: Type Description TypeError If nsnow or ssnow is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 def __init__ ( self , nsnow , ssnow , product_path , north_vector_path , south_vector_path , snow_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod10a2 >>> nsnow = HidroCLVariable('nsnow', 'modis', 'mod10a2', 'north') >>> ssnow = HidroCLVariable('ssnow', 'modis', 'mod10a2', 'south') >>> product_path = '/home/user/mod10a2' >>> north_vector_path = '/home/user/north_vector.shp' >>> south_vector_path = '/home/user/south_vector.shp' >>> snow_log = '/home/user/snow.log' >>> mod10a2 = Mod10a2(nsnow, ssnow, product_path, ... north_vector_path, south_vector_path, snow_log) >>> mod10a2 \"Class to extract MODIS MOD10A2 Version 6.1\" Args: nsnow (HidroCLVariable): HidroCLVariable object with north face snow data \\n ssnow (HidroCLVariable): HidroCLVariable object with south face snow data \\n product_path (str): Path to the product folder where the product files are located \\n north_vector_path (str): Path to the vector folder with the north Shapefile with areas to be processed \\n south_vector_path (str): Path to the vector folder with the south Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n Raises: TypeError: If nsnow or ssnow is not a HidroCLVariable object \\n \"\"\" if t . check_instance ( nsnow , ssnow ): self . nsnow = nsnow self . ssnow = ssnow self . snow_log = snow_log self . productname = \"MODIS MOD10A2 Version 6.1\" self . productpath = product_path self . northvectorpath = north_vector_path self . southvectorpath = south_vector_path self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'nsnow and ssnow must be HidroCLVariable objects' )","title":"__init__()"},{"location":"products/#hidrocl.products.Mod10a2.__repr__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 306 307 308 309 310 311 312 313 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Mod10a2.__str__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } North face snow records: { len ( self . nsnow . indatabase ) } . North face snow path: { self . nsnow . database } South face snow records: { len ( self . ssnow . indatabase ) } . South face snow database path: { self . ssnow . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Mod10a2.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 def run_extraction ( self , limit = None ): \"\"\"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . nsnow . indatabase : # so what about the south one? e . zonal_stats ( scene , scenes_path , temp_dir , 'snow' , self . nsnow . catchment_names , self . snow_log , north_database = self . nsnow . database , north_pcdatabase = self . nsnow . pcdatabase , south_database = self . ssnow . database , south_pcdatabase = self . ssnow . pcdatabase , north_vector_path = self . northvectorpath , south_vector_path = self . southvectorpath , layer = \"Maximum_Snow_Extent\" )","title":"run_extraction()"},{"location":"products/#hidrocl.products.Mod10a2.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Mod13q1","text":"A class to process MOD13Q1 to hidrocl variables Attributes: Name Type Description ndvi HidroCLVariable HidroCLVariable object with the NDVI data evi HidroCLVariable HidroCLVariable object with the EVI data nbr HidroCLVariable HidroCLVariable object with the NBR data ndvi_log str Path to the log file for the NDVI extraction evi_log str Path to the log file for the EVI extraction nbr_log str Path to the log file for the NBR extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list List of common elements between the NDVI, EVI and NBR databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mod13q1 : \"\"\" A class to process MOD13Q1 to hidrocl variables Attributes: ndvi (HidroCLVariable): HidroCLVariable object with the NDVI data \\n evi (HidroCLVariable): HidroCLVariable object with the EVI data \\n nbr (HidroCLVariable): HidroCLVariable object with the NBR data \\n ndvi_log (str): Path to the log file for the NDVI extraction \\n evi_log (str): Path to the log file for the EVI extraction \\n nbr_log (str): Path to the log file for the NBR extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): List of common elements between the NDVI, EVI and NBR databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , ndvi , evi , nbr , product_path , vector_path , ndvi_log , evi_log , nbr_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl.products import Mod13q1 >>> ndvi = HidroCLVariable('ndvi', 'ndvi.db', 'ndvi_pc.db') >>> evi = HidroCLVariable('evi', 'evi.db', 'evi_pc.db') >>> nbr = HidroCLVariable('nbr', 'nbr.db', 'nbr_pc.db') >>> product_path = '/home/user/mod13q1' >>> vector_path = '/home/user/vector.shp' >>> ndvi_log = '/home/user/ndvi.log' >>> evi_log = '/home/user/evi.log' >>> nbr_log = '/home/user/nbr.log' >>> mod13q1 = Mod13q1(ndvi, evi, nbr, product_path, vector_path, ... ndvi_log, evi_log, nbr_log) >>> mod13q1 \"Class to extract MODIS MOD13Q1 Version 6.1\" Args: ndvi (HidroCLVariable): Object with the NDVI data evi (HidroCLVariable): Object with the EVI data nbr (HidroCLVariable): Object with the NBR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder ndvi_log (str): Path to the log file for the NDVI extraction evi_log (str): Path to the log file for the EVI extraction nbr_log (str): Path to the log file for the NBR extraction Raises: TypeError: If the input is not a HidroCLVariable object \"\"\" if t . check_instance ( ndvi , evi , nbr ): self . ndvi = ndvi self . evi = evi self . nbr = nbr self . ndvi_log = ndvi_log self . evi_log = evi_log self . nbr_log = nbr_log self . productname = \"MODIS MOD13Q1 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'ndvi, evi and nbr must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } NDVI records: { len ( self . ndvi . indatabase ) } . NDVI database path: { self . ndvi . database } EVI records: { len ( self . evi . indatabase ) } . EVI database path: { self . evi . database } NBR records: { len ( self . nbr . indatabase ) } . NBR database path: { self . nbr . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . ndvi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'ndvi' , self . ndvi . catchment_names , self . ndvi_log , database = self . ndvi . database , pcdatabase = self . ndvi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days NDVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'evi' , self . evi . catchment_names , self . evi_log , database = self . evi . database , pcdatabase = self . evi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days EVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'nbr' , self . nbr . catchment_names , self . nbr_log , database = self . nbr . database , pcdatabase = self . nbr . pcdatabase , vector_path = self . vectorpath , layer = [ \"250m 16 days NIR reflectance\" , \"250m 16 days MIR reflectance\" ]) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"Mod13q1"},{"location":"products/#hidrocl.products.Mod13q1.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl.products import Mod13q1 >>> ndvi = HidroCLVariable ( 'ndvi' , 'ndvi.db' , 'ndvi_pc.db' ) >>> evi = HidroCLVariable ( 'evi' , 'evi.db' , 'evi_pc.db' ) >>> nbr = HidroCLVariable ( 'nbr' , 'nbr.db' , 'nbr_pc.db' ) >>> product_path = '/home/user/mod13q1' >>> vector_path = '/home/user/vector.shp' >>> ndvi_log = '/home/user/ndvi.log' >>> evi_log = '/home/user/evi.log' >>> nbr_log = '/home/user/nbr.log' >>> mod13q1 = Mod13q1 ( ndvi , evi , nbr , product_path , vector_path , ... ndvi_log , evi_log , nbr_log ) >>> mod13q1 \"Class to extract MODIS MOD13Q1 Version 6.1\" Parameters: Name Type Description Default ndvi HidroCLVariable Object with the NDVI data required evi HidroCLVariable Object with the EVI data required nbr HidroCLVariable Object with the NBR data required product_path str Path to the product folder required vector_path str Path to the vector folder required ndvi_log str Path to the log file for the NDVI extraction required evi_log str Path to the log file for the EVI extraction required nbr_log str Path to the log file for the NBR extraction required Raises: Type Description TypeError If the input is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 def __init__ ( self , ndvi , evi , nbr , product_path , vector_path , ndvi_log , evi_log , nbr_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl.products import Mod13q1 >>> ndvi = HidroCLVariable('ndvi', 'ndvi.db', 'ndvi_pc.db') >>> evi = HidroCLVariable('evi', 'evi.db', 'evi_pc.db') >>> nbr = HidroCLVariable('nbr', 'nbr.db', 'nbr_pc.db') >>> product_path = '/home/user/mod13q1' >>> vector_path = '/home/user/vector.shp' >>> ndvi_log = '/home/user/ndvi.log' >>> evi_log = '/home/user/evi.log' >>> nbr_log = '/home/user/nbr.log' >>> mod13q1 = Mod13q1(ndvi, evi, nbr, product_path, vector_path, ... ndvi_log, evi_log, nbr_log) >>> mod13q1 \"Class to extract MODIS MOD13Q1 Version 6.1\" Args: ndvi (HidroCLVariable): Object with the NDVI data evi (HidroCLVariable): Object with the EVI data nbr (HidroCLVariable): Object with the NBR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder ndvi_log (str): Path to the log file for the NDVI extraction evi_log (str): Path to the log file for the EVI extraction nbr_log (str): Path to the log file for the NBR extraction Raises: TypeError: If the input is not a HidroCLVariable object \"\"\" if t . check_instance ( ndvi , evi , nbr ): self . ndvi = ndvi self . evi = evi self . nbr = nbr self . ndvi_log = ndvi_log self . evi_log = evi_log self . nbr_log = nbr_log self . productname = \"MODIS MOD13Q1 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'ndvi, evi and nbr must be HidroCLVariable objects' )","title":"__init__()"},{"location":"products/#hidrocl.products.Mod13q1.__repr__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 98 99 100 101 102 103 104 105 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Mod13q1.__str__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } NDVI records: { len ( self . ndvi . indatabase ) } . NDVI database path: { self . ndvi . database } EVI records: { len ( self . evi . indatabase ) } . EVI database path: { self . evi . database } NBR records: { len ( self . nbr . indatabase ) } . NBR database path: { self . nbr . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Mod13q1.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . ndvi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'ndvi' , self . ndvi . catchment_names , self . ndvi_log , database = self . ndvi . database , pcdatabase = self . ndvi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days NDVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'evi' , self . evi . catchment_names , self . evi_log , database = self . evi . database , pcdatabase = self . evi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days EVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'nbr' , self . nbr . catchment_names , self . nbr_log , database = self . nbr . database , pcdatabase = self . nbr . pcdatabase , vector_path = self . vectorpath , layer = [ \"250m 16 days NIR reflectance\" , \"250m 16 days MIR reflectance\" ])","title":"run_extraction()"},{"location":"products/#hidrocl.products.Mod13q1.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Mod16a2","text":"A class to process MOD16A2 to hidrocl variables Attributes: Name Type Description pet HidroCLVariable HidroCLVariable object with the potential evapotranspiration pet_log str Path to the log file for the pet extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list Elements in pet database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mod16a2 : \"\"\" A class to process MOD16A2 to hidrocl variables Attributes: pet (HidroCLVariable): HidroCLVariable object with the potential evapotranspiration \\n pet_log (str): Path to the log file for the pet extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): Elements in pet database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pet , product_path , vector_path , pet_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod16a2 >>> pet = HidroCLVariable('pet', 'pet.db', 'pet_pc.db') >>> product_path = '/home/user/modis/mod16a2' >>> vector_path = '/home/user/vector.shp' >>> pet_log = '/home/user/log/pet.log' >>> mod16a2 = Mod16a2(pet, product_path, vector_path, pet_log) >>> mod16a2 \"Class to extract MODIS MOD16A2 Version 6.1\" Args: pet (HidroCLVariable): Object with the potential evapotranspiration data product_path (str): Path to the product folder vector_path (str): Path to the vector folder pet_log (str): Path to the log file for the pet extraction Raises: TypeError: If pet is not a HidroCLVariable object \"\"\" if t . check_instance ( pet ): self . pet = pet self . pet_log = pet_log self . productname = \"MODIS MOD16A2 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pet . indatabase self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'pet must be HidroCLVariable object' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PET records: { len ( self . pet . indatabase ) } . PET database path: { self . pet . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pet . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pet' , self . pet . catchment_names , self . pet_log , database = self . pet . database , pcdatabase = self . pet . pcdatabase , vector_path = self . vectorpath , layer = \"PET_500m\" , ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"Mod16a2"},{"location":"products/#hidrocl.products.Mod16a2.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod16a2 >>> pet = HidroCLVariable ( 'pet' , 'pet.db' , 'pet_pc.db' ) >>> product_path = '/home/user/modis/mod16a2' >>> vector_path = '/home/user/vector.shp' >>> pet_log = '/home/user/log/pet.log' >>> mod16a2 = Mod16a2 ( pet , product_path , vector_path , pet_log ) >>> mod16a2 \"Class to extract MODIS MOD16A2 Version 6.1\" Parameters: Name Type Description Default pet HidroCLVariable Object with the potential evapotranspiration data required product_path str Path to the product folder required vector_path str Path to the vector folder required pet_log str Path to the log file for the pet extraction required Raises: Type Description TypeError If pet is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 def __init__ ( self , pet , product_path , vector_path , pet_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod16a2 >>> pet = HidroCLVariable('pet', 'pet.db', 'pet_pc.db') >>> product_path = '/home/user/modis/mod16a2' >>> vector_path = '/home/user/vector.shp' >>> pet_log = '/home/user/log/pet.log' >>> mod16a2 = Mod16a2(pet, product_path, vector_path, pet_log) >>> mod16a2 \"Class to extract MODIS MOD16A2 Version 6.1\" Args: pet (HidroCLVariable): Object with the potential evapotranspiration data product_path (str): Path to the product folder vector_path (str): Path to the vector folder pet_log (str): Path to the log file for the pet extraction Raises: TypeError: If pet is not a HidroCLVariable object \"\"\" if t . check_instance ( pet ): self . pet = pet self . pet_log = pet_log self . productname = \"MODIS MOD16A2 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pet . indatabase self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'pet must be HidroCLVariable object' )","title":"__init__()"},{"location":"products/#hidrocl.products.Mod16a2.__repr__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 479 480 481 482 483 484 485 486 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Mod16a2.__str__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 488 489 490 491 492 493 494 495 496 497 498 499 500 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PET records: { len ( self . pet . indatabase ) } . PET database path: { self . pet . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Mod16a2.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pet . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pet' , self . pet . catchment_names , self . pet_log , database = self . pet . database , pcdatabase = self . pet . pcdatabase , vector_path = self . vectorpath , layer = \"PET_500m\" , )","title":"run_extraction()"},{"location":"products/#hidrocl.products.Mod16a2.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Pdirnow","text":"A class to process PDIR-Now to hidrocl variables Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with PDIR-Now precipitation data pp_log str Path to the log file for PDIR-Now precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 1 scenes for modis) complete_scenes list List of complete scenes (1 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 1 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 class Pdirnow : \"\"\" A class to process PDIR-Now to hidrocl variables Attributes: pp (HidroCLVariable): HidroCLVariable object with PDIR-Now precipitation data \\n pp_log (str): Path to the log file for PDIR-Now precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 1 scenes for modis) \\n complete_scenes (list): List of complete scenes (1 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 1 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Pdirnow >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PDIR-Now' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> pdirnow = Pdirnow(pp, product_path, vector_path, pp_log) >>> pdirnow \"Class to extract PDIR-Now 0.04\u00ba\" Args: pp (HidroCLVariable): HidroCLVariable object with PDIR-Now precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PDIR-Now precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PDIR-Now 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , 'pdirnow' ) self . product_ids = t . get_product_ids ( self . product_files , 'pdirnow' ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , 'pdirnow' ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'pdirnow' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PDIR-Now precipitation records: { len ( self . pp . indatabase ) } . PDIR-Now precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'pdirnow' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"pdirnow\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'pdirnow' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file )","title":"Pdirnow"},{"location":"products/#hidrocl.products.Pdirnow.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Pdirnow >>> pp = HidroCLVariable ( 'pp' , 'pp.db' , 'pp_pc.db' ) >>> product_path = '/home/user/data/PDIR-Now' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> pdirnow = Pdirnow ( pp , product_path , vector_path , pp_log ) >>> pdirnow \"Class to extract PDIR-Now 0.04\u00ba\" Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with PDIR-Now precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for PDIR-Now precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Pdirnow >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PDIR-Now' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> pdirnow = Pdirnow(pp, product_path, vector_path, pp_log) >>> pdirnow \"Class to extract PDIR-Now 0.04\u00ba\" Args: pp (HidroCLVariable): HidroCLVariable object with PDIR-Now precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PDIR-Now precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PDIR-Now 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , 'pdirnow' ) self . product_ids = t . get_product_ids ( self . product_files , 'pdirnow' ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , 'pdirnow' ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'pdirnow' ) else : raise TypeError ( 'pp must be HidroCLVariable object' )","title":"__init__()"},{"location":"products/#hidrocl.products.Pdirnow.__repr__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1699 1700 1701 1702 1703 1704 1705 1706 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Pdirnow.__str__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PDIR-Now precipitation records: { len ( self . pp . indatabase ) } . PDIR-Now precipitation database path: { self . pp . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Pdirnow.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'pdirnow' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"pdirnow\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath )","title":"run_extraction()"},{"location":"products/#hidrocl.products.Pdirnow.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'pdirnow' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Persiann_ccs","text":"A class to process PERSIANN-CCS to hidrocl variables Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS precipitation data pp_log str Path to the log file for PERSIANN-CCS precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 1 scenes for modis) complete_scenes list List of complete scenes (1 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 1 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 class Persiann_ccs : \"\"\" A class to process PERSIANN-CCS to hidrocl variables Attributes: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS precipitation data \\n pp_log (str): Path to the log file for PERSIANN-CCS precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 1 scenes for modis) \\n complete_scenes (list): List of complete scenes (1 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 1 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs = Persiann_ccs(pp, product_path, vector_path, pp_log) >>> persiann_ccs \"Class to extract PERSIANN-CCS 0.04\u00ba\" Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file )","title":"Persiann_ccs"},{"location":"products/#hidrocl.products.Persiann_ccs.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs >>> pp = HidroCLVariable ( 'pp' , 'pp.db' , 'pp_pc.db' ) >>> product_path = '/home/user/data/PERSIANN-CCS' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs = Persiann_ccs ( pp , product_path , vector_path , pp_log ) >>> persiann_ccs \"Class to extract PERSIANN-CCS 0.04\u00ba\" Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for PERSIANN-CCS precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs = Persiann_ccs(pp, product_path, vector_path, pp_log) >>> persiann_ccs \"Class to extract PERSIANN-CCS 0.04\u00ba\" Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs' ) else : raise TypeError ( 'pp must be HidroCLVariable object' )","title":"__init__()"},{"location":"products/#hidrocl.products.Persiann_ccs.__repr__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1384 1385 1386 1387 1388 1389 1390 1391 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Persiann_ccs.__str__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS precipitation database path: { self . pp . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Persiann_ccs.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath )","title":"run_extraction()"},{"location":"products/#hidrocl.products.Persiann_ccs.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Persiann_ccs_cdr","text":"A class to process PERSIANN-CCS-CDR to hidrocl variables Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS-CDR precipitation data pp_log str Path to the log file for PERSIANN-CCS-CDR precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 1 scenes for modis) complete_scenes list List of complete scenes (1 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 1 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 class Persiann_ccs_cdr : \"\"\" A class to process PERSIANN-CCS-CDR to hidrocl variables Attributes: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS-CDR precipitation data \\n pp_log (str): Path to the log file for PERSIANN-CCS-CDR precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 1 scenes for modis) \\n complete_scenes (list): List of complete scenes (1 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 1 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs_cdr >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS-CDR' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs_cdr = Persiann_ccs_cdr(pp, product_path, vector_path, pp_log) >>> persiann_ccs_cdr \"Class to extract PERSIANN-CCS-CDR 0.04\u00ba\" Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS-CDR precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS-CDR precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS-CDR 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs_cdr\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs_cdr\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs_cdr\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs_cdr' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS-CDR precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS-CDR precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs_cdr\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file )","title":"Persiann_ccs_cdr"},{"location":"products/#hidrocl.products.Persiann_ccs_cdr.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs_cdr >>> pp = HidroCLVariable ( 'pp' , 'pp.db' , 'pp_pc.db' ) >>> product_path = '/home/user/data/PERSIANN-CCS-CDR' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs_cdr = Persiann_ccs_cdr ( pp , product_path , vector_path , pp_log ) >>> persiann_ccs_cdr \"Class to extract PERSIANN-CCS-CDR 0.04\u00ba\" Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS-CDR precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for PERSIANN-CCS-CDR precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs_cdr >>> pp = HidroCLVariable('pp', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS-CDR' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs_cdr = Persiann_ccs_cdr(pp, product_path, vector_path, pp_log) >>> persiann_ccs_cdr \"Class to extract PERSIANN-CCS-CDR 0.04\u00ba\" Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS-CDR precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS-CDR precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS-CDR 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs_cdr\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs_cdr\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs_cdr\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs_cdr' ) else : raise TypeError ( 'pp must be HidroCLVariable object' )","title":"__init__()"},{"location":"products/#hidrocl.products.Persiann_ccs_cdr.__repr__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1542 1543 1544 1545 1546 1547 1548 1549 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Persiann_ccs_cdr.__str__","text":"Return a string representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/products/__init__.py 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str: String representation of the object \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS-CDR precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS-CDR precipitation database path: { self . pp . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Persiann_ccs_cdr.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs_cdr\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath )","title":"run_extraction()"},{"location":"products/#hidrocl.products.Persiann_ccs_cdr.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Name Type Description str Print Source code in hidrocl/products/__init__.py 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: str: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file )","title":"run_maintainer()"},{"location":"reference/","text":"Reference Page structure: Base variable Product processors Download functions","title":"Reference index"},{"location":"reference/#reference","text":"Page structure: Base variable Product processors Download functions","title":"Reference"},{"location":"variable/","text":"Base variable HidroCLVariable A class to hold information about a hidrocl variable Examples: >>> from hidrocl import HidroCLVariable >>> variable = HidroCLVariable ( 'precipitation' , 'precipitation.csv' , 'precipitation_pc.csv' ) >>> variable Variable: precipitation. Records: 0 Attributes: Name Type Description name str Name of the variable database str Path to the database pcdatabase str Path to the database with pixel count indatabase list List of IDs in the database observations pandas . DataFrame Dataframe with the observations pcobservations pandas . DataFrame Dataframe with the pixel count catchment_names list List of catchment names Source code in hidrocl/variables/__init__.pyclass HidroCLVariable : \"\"\"A class to hold information about a hidrocl variable Examples: >>> from hidrocl import HidroCLVariable >>> variable = HidroCLVariable('precipitation', 'precipitation.csv', 'precipitation_pc.csv') >>> variable Variable: precipitation. Records: 0 Attributes: name (str): Name of the variable database (str): Path to the database pcdatabase (str): Path to the database with pixel count indatabase (list): List of IDs in the database observations (pandas.DataFrame): Dataframe with the observations pcobservations (pandas.DataFrame): Dataframe with the pixel count catchment_names (list): List of catchment names \"\"\" def __init__ ( self , name , database , pcdatabase ): \"\"\" Args: name (str): Name of the variable database (str): Path to the database pcdatabase (str): Path to the database with pixel count \"\"\" self . name = name self . database = database self . pcdatabase = pcdatabase self . indatabase = '' self . observations = None self . pcobservations = None self . catchment_names = None self . checkdatabase () self . checkpcdatabase () def __repr__ ( self ): \"\"\" Representation of the object Returns: str: Representation of the object \"\"\" return f 'Variable: { self . name } . Records: { len ( self . indatabase ) } ' def __str__ ( self ): \"\"\" String representation of the object Returns: str: String representation of the object \"\"\" return f ''' Variable { self . name } . Records: { len ( self . indatabase ) } . Database path: { self . database } . Pixel count database path: { self . pcdatabase } . ''' def checkindatabase ( self ): \"\"\" Check IDs in database Returns: list: List of IDs in the database \"\"\" if self . observations is None : print ( 'Please, check the database for getting the IDs processed' ) return '' else : return [ str ( i ) for i in self . observations [ self . observations . columns [ 0 ]] . values . tolist ()] def checkdatabase ( self ): \"\"\" Check database Returns: pandas.DataFrame: Dataframe with the observations \"\"\" self . observations = methods . checkdatabase ( self . database , self . catchment_names ) self . indatabase = self . checkindatabase () try : self . catchment_names = self . observations . columns [ 1 :] . tolist () except AttributeError : print ( 'Could not load dataframe, perhaps the database has not been created yet' ) def checkpcdatabase ( self ): \"\"\" Check database with pixel count Returns: pandas.DataFrame: Dataframe with the pixel count \"\"\" self . pcobservations = methods . checkdatabase ( self . pcdatabase , self . catchment_names ) def add_catchment_names ( self , catchment_names_list ): \"\"\" Add catchment names to the variable using cathment_names from database Args: catchment_names_list (list): list of catchment names Returns: None \"\"\" if self . catchment_names is None : if catchment_names_list is not None : self . catchment_names = catchment_names_list print ( 'Catchment names added. I recommend you to check the database' ) else : print ( \"Catchments names can't be None type\" ) else : print ( 'Catchment names already added!' ) def valid_data ( self ): \"\"\" Return valid data for all catchments Returns: list: list with valid data with date index \"\"\" return self . observations . notnull () . sum ()[ 1 :] def plot_valid_data_all ( self ): \"\"\" Plot valid data for all catchments Returns: plot: plot with valid data for all catchments with date index \"\"\" df = self . observations . drop ( self . observations . columns [ 0 ], axis = 1 ) . notnull () . sum () . divide ( len ( self . observations . index )) . multiply ( 100 ) ax = df . plot ( title = 'Valid observations by catchment' , ylim = ( 0 , 105 ), color = 'lightseagreen' ) ax . yaxis . set_major_formatter ( mtick . PercentFormatter ()) plt . show () def plot_grid_data_all ( self ): \"\"\" Plot valid data for all catchments in grid format Returns: plot: plot with valid data for all catchments with date index \"\"\" methods . plot_variable_all ( self . observations , self . catchment_names , self . database , what = 'obs' ) def plot_grid_pcdata_all ( self ): \"\"\" Plot valid data for all catchments in grid format Returns: plot: plot with valid data for all catchments with date index \"\"\" methods . plot_variable_all ( self . pcobservations , self . catchment_names , self . database , what = 'pc' ) def plot_valid_data_individual ( self , catchment ): \"\"\" Plot valid data for individual catchments Args: catchment (str): catchment (catchment name) or int (catchment index) Returns: plot: plot with valid data for individual catchments with date index \"\"\" catchment = methods . get_catchment_name ( catchment , self . catchment_names ) methods . plot_variable ( catchment , self . observations , what = 'valid' ) def plot_pixel_count ( self , catchment ): \"\"\" Plot pixel count for individual catchments Args: catchment (str): catchment (catchment name) or int (catchment index) Returns: plot: plot with pixel count for individual catchments with date index \"\"\" catchment = methods . get_catchment_name ( catchment , self . catchment_names ) methods . plot_variable ( catchment , self . pcobservations , what = 'count' ) __init__ ( name , database , pcdatabase ) Parameters: Name Type Description Default name str Name of the variable required database str Path to the database required pcdatabase str Path to the database with pixel count required Source code in hidrocl/variables/__init__.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def __init__ ( self , name , database , pcdatabase ): \"\"\" Args: name (str): Name of the variable database (str): Path to the database pcdatabase (str): Path to the database with pixel count \"\"\" self . name = name self . database = database self . pcdatabase = pcdatabase self . indatabase = '' self . observations = None self . pcobservations = None self . catchment_names = None self . checkdatabase () self . checkpcdatabase () __repr__ () Representation of the object Returns: Name Type Description str Representation of the object Source code in hidrocl/variables/__init__.py 44 45 46 47 48 49 50 51 def __repr__ ( self ): \"\"\" Representation of the object Returns: str: Representation of the object \"\"\" return f 'Variable: { self . name } . Records: { len ( self . indatabase ) } ' __str__ () String representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/variables/__init__.py 53 54 55 56 57 58 59 60 61 62 63 64 65 def __str__ ( self ): \"\"\" String representation of the object Returns: str: String representation of the object \"\"\" return f ''' Variable { self . name } . Records: { len ( self . indatabase ) } . Database path: { self . database } . Pixel count database path: { self . pcdatabase } . ''' add_catchment_names ( catchment_names_list ) Add catchment names to the variable using cathment_names from database Parameters: Name Type Description Default catchment_names_list list list of catchment names required Returns: Type Description None Source code in hidrocl/variables/__init__.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 def add_catchment_names ( self , catchment_names_list ): \"\"\" Add catchment names to the variable using cathment_names from database Args: catchment_names_list (list): list of catchment names Returns: None \"\"\" if self . catchment_names is None : if catchment_names_list is not None : self . catchment_names = catchment_names_list print ( 'Catchment names added. I recommend you to check the database' ) else : print ( \"Catchments names can't be None type\" ) else : print ( 'Catchment names already added!' ) checkdatabase () Check database Returns: Type Description pandas.DataFrame: Dataframe with the observations Source code in hidrocl/variables/__init__.py 80 81 82 83 84 85 86 87 88 89 90 91 92 def checkdatabase ( self ): \"\"\" Check database Returns: pandas.DataFrame: Dataframe with the observations \"\"\" self . observations = methods . checkdatabase ( self . database , self . catchment_names ) self . indatabase = self . checkindatabase () try : self . catchment_names = self . observations . columns [ 1 :] . tolist () except AttributeError : print ( 'Could not load dataframe, perhaps the database has not been created yet' ) checkindatabase () Check IDs in database Returns: Name Type Description list List of IDs in the database Source code in hidrocl/variables/__init__.py 67 68 69 70 71 72 73 74 75 76 77 78 def checkindatabase ( self ): \"\"\" Check IDs in database Returns: list: List of IDs in the database \"\"\" if self . observations is None : print ( 'Please, check the database for getting the IDs processed' ) return '' else : return [ str ( i ) for i in self . observations [ self . observations . columns [ 0 ]] . values . tolist ()] checkpcdatabase () Check database with pixel count Returns: Type Description pandas.DataFrame: Dataframe with the pixel count Source code in hidrocl/variables/__init__.py 94 95 96 97 98 99 100 101 def checkpcdatabase ( self ): \"\"\" Check database with pixel count Returns: pandas.DataFrame: Dataframe with the pixel count \"\"\" self . pcobservations = methods . checkdatabase ( self . pcdatabase , self . catchment_names ) plot_grid_data_all () Plot valid data for all catchments in grid format Returns: Name Type Description plot plot with valid data for all catchments with date index Source code in hidrocl/variables/__init__.py 144 145 146 147 148 149 150 151 def plot_grid_data_all ( self ): \"\"\" Plot valid data for all catchments in grid format Returns: plot: plot with valid data for all catchments with date index \"\"\" methods . plot_variable_all ( self . observations , self . catchment_names , self . database , what = 'obs' ) plot_grid_pcdata_all () Plot valid data for all catchments in grid format Returns: Name Type Description plot plot with valid data for all catchments with date index Source code in hidrocl/variables/__init__.py 153 154 155 156 157 158 159 160 def plot_grid_pcdata_all ( self ): \"\"\" Plot valid data for all catchments in grid format Returns: plot: plot with valid data for all catchments with date index \"\"\" methods . plot_variable_all ( self . pcobservations , self . catchment_names , self . database , what = 'pc' ) plot_pixel_count ( catchment ) Plot pixel count for individual catchments Parameters: Name Type Description Default catchment str catchment (catchment name) or int (catchment index) required Returns: Name Type Description plot plot with pixel count for individual catchments with date index Source code in hidrocl/variables/__init__.py 176 177 178 179 180 181 182 183 184 185 186 187 188 def plot_pixel_count ( self , catchment ): \"\"\" Plot pixel count for individual catchments Args: catchment (str): catchment (catchment name) or int (catchment index) Returns: plot: plot with pixel count for individual catchments with date index \"\"\" catchment = methods . get_catchment_name ( catchment , self . catchment_names ) methods . plot_variable ( catchment , self . pcobservations , what = 'count' ) plot_valid_data_all () Plot valid data for all catchments Returns: Name Type Description plot plot with valid data for all catchments with date index Source code in hidrocl/variables/__init__.py 131 132 133 134 135 136 137 138 139 140 141 142 def plot_valid_data_all ( self ): \"\"\" Plot valid data for all catchments Returns: plot: plot with valid data for all catchments with date index \"\"\" df = self . observations . drop ( self . observations . columns [ 0 ], axis = 1 ) . notnull () . sum () . divide ( len ( self . observations . index )) . multiply ( 100 ) ax = df . plot ( title = 'Valid observations by catchment' , ylim = ( 0 , 105 ), color = 'lightseagreen' ) ax . yaxis . set_major_formatter ( mtick . PercentFormatter ()) plt . show () plot_valid_data_individual ( catchment ) Plot valid data for individual catchments Parameters: Name Type Description Default catchment str catchment (catchment name) or int (catchment index) required Returns: Name Type Description plot plot with valid data for individual catchments with date index Source code in hidrocl/variables/__init__.py 162 163 164 165 166 167 168 169 170 171 172 173 174 def plot_valid_data_individual ( self , catchment ): \"\"\" Plot valid data for individual catchments Args: catchment (str): catchment (catchment name) or int (catchment index) Returns: plot: plot with valid data for individual catchments with date index \"\"\" catchment = methods . get_catchment_name ( catchment , self . catchment_names ) methods . plot_variable ( catchment , self . observations , what = 'valid' ) valid_data () Return valid data for all catchments Returns: Name Type Description list list with valid data with date index Source code in hidrocl/variables/__init__.py 122 123 124 125 126 127 128 129 def valid_data ( self ): \"\"\" Return valid data for all catchments Returns: list: list with valid data with date index \"\"\" return self . observations . notnull () . sum ()[ 1 :]","title":"Base variable"},{"location":"variable/#base-variable","text":"","title":"Base variable"},{"location":"variable/#hidrocl.variables.HidroCLVariable","text":"A class to hold information about a hidrocl variable Examples: >>> from hidrocl import HidroCLVariable >>> variable = HidroCLVariable ( 'precipitation' , 'precipitation.csv' , 'precipitation_pc.csv' ) >>> variable Variable: precipitation. Records: 0 Attributes: Name Type Description name str Name of the variable database str Path to the database pcdatabase str Path to the database with pixel count indatabase list List of IDs in the database observations pandas . DataFrame Dataframe with the observations pcobservations pandas . DataFrame Dataframe with the pixel count catchment_names list List of catchment names Source code in hidrocl/variables/__init__.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 class HidroCLVariable : \"\"\"A class to hold information about a hidrocl variable Examples: >>> from hidrocl import HidroCLVariable >>> variable = HidroCLVariable('precipitation', 'precipitation.csv', 'precipitation_pc.csv') >>> variable Variable: precipitation. Records: 0 Attributes: name (str): Name of the variable database (str): Path to the database pcdatabase (str): Path to the database with pixel count indatabase (list): List of IDs in the database observations (pandas.DataFrame): Dataframe with the observations pcobservations (pandas.DataFrame): Dataframe with the pixel count catchment_names (list): List of catchment names \"\"\" def __init__ ( self , name , database , pcdatabase ): \"\"\" Args: name (str): Name of the variable database (str): Path to the database pcdatabase (str): Path to the database with pixel count \"\"\" self . name = name self . database = database self . pcdatabase = pcdatabase self . indatabase = '' self . observations = None self . pcobservations = None self . catchment_names = None self . checkdatabase () self . checkpcdatabase () def __repr__ ( self ): \"\"\" Representation of the object Returns: str: Representation of the object \"\"\" return f 'Variable: { self . name } . Records: { len ( self . indatabase ) } ' def __str__ ( self ): \"\"\" String representation of the object Returns: str: String representation of the object \"\"\" return f ''' Variable { self . name } . Records: { len ( self . indatabase ) } . Database path: { self . database } . Pixel count database path: { self . pcdatabase } . ''' def checkindatabase ( self ): \"\"\" Check IDs in database Returns: list: List of IDs in the database \"\"\" if self . observations is None : print ( 'Please, check the database for getting the IDs processed' ) return '' else : return [ str ( i ) for i in self . observations [ self . observations . columns [ 0 ]] . values . tolist ()] def checkdatabase ( self ): \"\"\" Check database Returns: pandas.DataFrame: Dataframe with the observations \"\"\" self . observations = methods . checkdatabase ( self . database , self . catchment_names ) self . indatabase = self . checkindatabase () try : self . catchment_names = self . observations . columns [ 1 :] . tolist () except AttributeError : print ( 'Could not load dataframe, perhaps the database has not been created yet' ) def checkpcdatabase ( self ): \"\"\" Check database with pixel count Returns: pandas.DataFrame: Dataframe with the pixel count \"\"\" self . pcobservations = methods . checkdatabase ( self . pcdatabase , self . catchment_names ) def add_catchment_names ( self , catchment_names_list ): \"\"\" Add catchment names to the variable using cathment_names from database Args: catchment_names_list (list): list of catchment names Returns: None \"\"\" if self . catchment_names is None : if catchment_names_list is not None : self . catchment_names = catchment_names_list print ( 'Catchment names added. I recommend you to check the database' ) else : print ( \"Catchments names can't be None type\" ) else : print ( 'Catchment names already added!' ) def valid_data ( self ): \"\"\" Return valid data for all catchments Returns: list: list with valid data with date index \"\"\" return self . observations . notnull () . sum ()[ 1 :] def plot_valid_data_all ( self ): \"\"\" Plot valid data for all catchments Returns: plot: plot with valid data for all catchments with date index \"\"\" df = self . observations . drop ( self . observations . columns [ 0 ], axis = 1 ) . notnull () . sum () . divide ( len ( self . observations . index )) . multiply ( 100 ) ax = df . plot ( title = 'Valid observations by catchment' , ylim = ( 0 , 105 ), color = 'lightseagreen' ) ax . yaxis . set_major_formatter ( mtick . PercentFormatter ()) plt . show () def plot_grid_data_all ( self ): \"\"\" Plot valid data for all catchments in grid format Returns: plot: plot with valid data for all catchments with date index \"\"\" methods . plot_variable_all ( self . observations , self . catchment_names , self . database , what = 'obs' ) def plot_grid_pcdata_all ( self ): \"\"\" Plot valid data for all catchments in grid format Returns: plot: plot with valid data for all catchments with date index \"\"\" methods . plot_variable_all ( self . pcobservations , self . catchment_names , self . database , what = 'pc' ) def plot_valid_data_individual ( self , catchment ): \"\"\" Plot valid data for individual catchments Args: catchment (str): catchment (catchment name) or int (catchment index) Returns: plot: plot with valid data for individual catchments with date index \"\"\" catchment = methods . get_catchment_name ( catchment , self . catchment_names ) methods . plot_variable ( catchment , self . observations , what = 'valid' ) def plot_pixel_count ( self , catchment ): \"\"\" Plot pixel count for individual catchments Args: catchment (str): catchment (catchment name) or int (catchment index) Returns: plot: plot with pixel count for individual catchments with date index \"\"\" catchment = methods . get_catchment_name ( catchment , self . catchment_names ) methods . plot_variable ( catchment , self . pcobservations , what = 'count' )","title":"HidroCLVariable"},{"location":"variable/#hidrocl.variables.HidroCLVariable.__init__","text":"Parameters: Name Type Description Default name str Name of the variable required database str Path to the database required pcdatabase str Path to the database with pixel count required Source code in hidrocl/variables/__init__.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def __init__ ( self , name , database , pcdatabase ): \"\"\" Args: name (str): Name of the variable database (str): Path to the database pcdatabase (str): Path to the database with pixel count \"\"\" self . name = name self . database = database self . pcdatabase = pcdatabase self . indatabase = '' self . observations = None self . pcobservations = None self . catchment_names = None self . checkdatabase () self . checkpcdatabase ()","title":"__init__()"},{"location":"variable/#hidrocl.variables.HidroCLVariable.__repr__","text":"Representation of the object Returns: Name Type Description str Representation of the object Source code in hidrocl/variables/__init__.py 44 45 46 47 48 49 50 51 def __repr__ ( self ): \"\"\" Representation of the object Returns: str: Representation of the object \"\"\" return f 'Variable: { self . name } . Records: { len ( self . indatabase ) } '","title":"__repr__()"},{"location":"variable/#hidrocl.variables.HidroCLVariable.__str__","text":"String representation of the object Returns: Name Type Description str String representation of the object Source code in hidrocl/variables/__init__.py 53 54 55 56 57 58 59 60 61 62 63 64 65 def __str__ ( self ): \"\"\" String representation of the object Returns: str: String representation of the object \"\"\" return f ''' Variable { self . name } . Records: { len ( self . indatabase ) } . Database path: { self . database } . Pixel count database path: { self . pcdatabase } . '''","title":"__str__()"},{"location":"variable/#hidrocl.variables.HidroCLVariable.add_catchment_names","text":"Add catchment names to the variable using cathment_names from database Parameters: Name Type Description Default catchment_names_list list list of catchment names required Returns: Type Description None Source code in hidrocl/variables/__init__.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 def add_catchment_names ( self , catchment_names_list ): \"\"\" Add catchment names to the variable using cathment_names from database Args: catchment_names_list (list): list of catchment names Returns: None \"\"\" if self . catchment_names is None : if catchment_names_list is not None : self . catchment_names = catchment_names_list print ( 'Catchment names added. I recommend you to check the database' ) else : print ( \"Catchments names can't be None type\" ) else : print ( 'Catchment names already added!' )","title":"add_catchment_names()"},{"location":"variable/#hidrocl.variables.HidroCLVariable.checkdatabase","text":"Check database Returns: Type Description pandas.DataFrame: Dataframe with the observations Source code in hidrocl/variables/__init__.py 80 81 82 83 84 85 86 87 88 89 90 91 92 def checkdatabase ( self ): \"\"\" Check database Returns: pandas.DataFrame: Dataframe with the observations \"\"\" self . observations = methods . checkdatabase ( self . database , self . catchment_names ) self . indatabase = self . checkindatabase () try : self . catchment_names = self . observations . columns [ 1 :] . tolist () except AttributeError : print ( 'Could not load dataframe, perhaps the database has not been created yet' )","title":"checkdatabase()"},{"location":"variable/#hidrocl.variables.HidroCLVariable.checkindatabase","text":"Check IDs in database Returns: Name Type Description list List of IDs in the database Source code in hidrocl/variables/__init__.py 67 68 69 70 71 72 73 74 75 76 77 78 def checkindatabase ( self ): \"\"\" Check IDs in database Returns: list: List of IDs in the database \"\"\" if self . observations is None : print ( 'Please, check the database for getting the IDs processed' ) return '' else : return [ str ( i ) for i in self . observations [ self . observations . columns [ 0 ]] . values . tolist ()]","title":"checkindatabase()"},{"location":"variable/#hidrocl.variables.HidroCLVariable.checkpcdatabase","text":"Check database with pixel count Returns: Type Description pandas.DataFrame: Dataframe with the pixel count Source code in hidrocl/variables/__init__.py 94 95 96 97 98 99 100 101 def checkpcdatabase ( self ): \"\"\" Check database with pixel count Returns: pandas.DataFrame: Dataframe with the pixel count \"\"\" self . pcobservations = methods . checkdatabase ( self . pcdatabase , self . catchment_names )","title":"checkpcdatabase()"},{"location":"variable/#hidrocl.variables.HidroCLVariable.plot_grid_data_all","text":"Plot valid data for all catchments in grid format Returns: Name Type Description plot plot with valid data for all catchments with date index Source code in hidrocl/variables/__init__.py 144 145 146 147 148 149 150 151 def plot_grid_data_all ( self ): \"\"\" Plot valid data for all catchments in grid format Returns: plot: plot with valid data for all catchments with date index \"\"\" methods . plot_variable_all ( self . observations , self . catchment_names , self . database , what = 'obs' )","title":"plot_grid_data_all()"},{"location":"variable/#hidrocl.variables.HidroCLVariable.plot_grid_pcdata_all","text":"Plot valid data for all catchments in grid format Returns: Name Type Description plot plot with valid data for all catchments with date index Source code in hidrocl/variables/__init__.py 153 154 155 156 157 158 159 160 def plot_grid_pcdata_all ( self ): \"\"\" Plot valid data for all catchments in grid format Returns: plot: plot with valid data for all catchments with date index \"\"\" methods . plot_variable_all ( self . pcobservations , self . catchment_names , self . database , what = 'pc' )","title":"plot_grid_pcdata_all()"},{"location":"variable/#hidrocl.variables.HidroCLVariable.plot_pixel_count","text":"Plot pixel count for individual catchments Parameters: Name Type Description Default catchment str catchment (catchment name) or int (catchment index) required Returns: Name Type Description plot plot with pixel count for individual catchments with date index Source code in hidrocl/variables/__init__.py 176 177 178 179 180 181 182 183 184 185 186 187 188 def plot_pixel_count ( self , catchment ): \"\"\" Plot pixel count for individual catchments Args: catchment (str): catchment (catchment name) or int (catchment index) Returns: plot: plot with pixel count for individual catchments with date index \"\"\" catchment = methods . get_catchment_name ( catchment , self . catchment_names ) methods . plot_variable ( catchment , self . pcobservations , what = 'count' )","title":"plot_pixel_count()"},{"location":"variable/#hidrocl.variables.HidroCLVariable.plot_valid_data_all","text":"Plot valid data for all catchments Returns: Name Type Description plot plot with valid data for all catchments with date index Source code in hidrocl/variables/__init__.py 131 132 133 134 135 136 137 138 139 140 141 142 def plot_valid_data_all ( self ): \"\"\" Plot valid data for all catchments Returns: plot: plot with valid data for all catchments with date index \"\"\" df = self . observations . drop ( self . observations . columns [ 0 ], axis = 1 ) . notnull () . sum () . divide ( len ( self . observations . index )) . multiply ( 100 ) ax = df . plot ( title = 'Valid observations by catchment' , ylim = ( 0 , 105 ), color = 'lightseagreen' ) ax . yaxis . set_major_formatter ( mtick . PercentFormatter ()) plt . show ()","title":"plot_valid_data_all()"},{"location":"variable/#hidrocl.variables.HidroCLVariable.plot_valid_data_individual","text":"Plot valid data for individual catchments Parameters: Name Type Description Default catchment str catchment (catchment name) or int (catchment index) required Returns: Name Type Description plot plot with valid data for individual catchments with date index Source code in hidrocl/variables/__init__.py 162 163 164 165 166 167 168 169 170 171 172 173 174 def plot_valid_data_individual ( self , catchment ): \"\"\" Plot valid data for individual catchments Args: catchment (str): catchment (catchment name) or int (catchment index) Returns: plot: plot with valid data for individual catchments with date index \"\"\" catchment = methods . get_catchment_name ( catchment , self . catchment_names ) methods . plot_variable ( catchment , self . observations , what = 'valid' )","title":"plot_valid_data_individual()"},{"location":"variable/#hidrocl.variables.HidroCLVariable.valid_data","text":"Return valid data for all catchments Returns: Name Type Description list list with valid data with date index Source code in hidrocl/variables/__init__.py 122 123 124 125 126 127 128 129 def valid_data ( self ): \"\"\" Return valid data for all catchments Returns: list: list with valid data with date index \"\"\" return self . observations . notnull () . sum ()[ 1 :]","title":"valid_data()"}]}
{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to HidroCL","title":"Home"},{"location":"#welcome-to-hidrocl","text":"","title":"Welcome to HidroCL"},{"location":"download/","text":"Download functions download_era5land ( year , month , day , path ) function to download era5-land reanalysis data from CDS This functions needs a .cdsapirc file in the home directory with the following content: url: https://cds.climate.copernicus.eu/api/v2 key: Examples: >>> download_era5land ( 2000 , 6 , 1 , '/path/to/data' ) Parameters: Name Type Description Default year int year of the data to be downloaded required month int month of the data to be downloaded required day int day of the data to be downloaded required path str path to save the data required Returns: Type Description None Source code in hidrocl/download/__init__.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def download_era5land ( year , month , day , path ): \"\"\"function to download era5-land reanalysis data from CDS This functions needs a .cdsapirc file in the home directory with the following content: url: https://cds.climate.copernicus.eu/api/v2 key: <your key> Examples: >>> download_era5land(2000, 6, 1, '/path/to/data') Args: year (int): year of the data to be downloaded month (int): month of the data to be downloaded day (int): day of the data to be downloaded path (str):path to save the data Returns: None \"\"\" fname = os . path . join ( path , f 'era5-land_ { year : 04d }{ month : 02d }{ day : 02d } .nc' ) c = cdsapi . Client () c . retrieve ( 'reanalysis-era5-land' , { 'format' : 'netcdf' , 'variable' : [ '2m_temperature' , 'potential_evaporation' , 'snow_albedo' , 'snow_cover' , 'snow_density' , 'snow_depth' , 'snow_depth_water_equivalent' , 'total_evaporation' , 'total_precipitation' , 'volumetric_soil_water_layer_1' , 'volumetric_soil_water_layer_2' , 'volumetric_soil_water_layer_3' , 'volumetric_soil_water_layer_4' , ], 'month' : [ str ( month ) . zfill ( 2 ), ], 'day' : [ str ( day ) . zfill ( 2 ), ], 'time' : [ '00:00' , '01:00' , '02:00' , '03:00' , '04:00' , '05:00' , '06:00' , '07:00' , '08:00' , '09:00' , '10:00' , '11:00' , '12:00' , '13:00' , '14:00' , '15:00' , '16:00' , '17:00' , '18:00' , '19:00' , '20:00' , '21:00' , '22:00' , '23:00' , ], 'year' : [ str ( year ) . zfill ( 4 ), ], 'area' : [ - 15 , - 75 , - 55 , - 65 , ], }, fname ) download_imerg ( url_extract , folder , user , password , timeout = 60 ) download IMERG data from jsimpsonhttps.pps.eosdis.nasa.gov. It is recommended to use the function get_imerg to get the filenames of the data to be downloaded Examples: >>> download_imerg ( '/imerg/gis/2000/06/xyz.tif' , '/path/to/data' , 'user@doma.in' , 'password' ) xyz.tif downloaded >>> # for multiple files (natural process) >>> files = get_imerg ( '2000-06' , '2000-07' , 'user@doma.in' , 'password' ) >>> for file in files : >>> download_imerg ( file , '/path/to/data' , 'user@doma.in' , 'password' ) xyz1.tif downloaded xyz2.tif downloaded ... Parameters: Name Type Description Default url_extract str extract of url in format '/imerg/gis/2000/06/xyz.tif' required folder str folder to save the data required user str username to access jsimpsonhttps.pps.eosdis.nasa.gov required password str password to access jsimpsonhttps.pps.eosdis.nasa.gov required timeout int timeout in seconds 60 Returns: Type Description None Source code in hidrocl/download/__init__.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 def download_imerg ( url_extract , folder , user , password , timeout = 60 ): \"\"\"download IMERG data from jsimpsonhttps.pps.eosdis.nasa.gov. It is recommended to use the function get_imerg to get the filenames of the data to be downloaded Examples: >>> download_imerg('/imerg/gis/2000/06/xyz.tif', '/path/to/data', 'user@doma.in', 'password') xyz.tif downloaded >>> # for multiple files (natural process) >>> files = get_imerg('2000-06', '2000-07', 'user@doma.in', 'password') >>> for file in files: >>> download_imerg(file, '/path/to/data', 'user@doma.in', 'password') xyz1.tif downloaded xyz2.tif downloaded ... Args: url_extract (str): extract of url in format '/imerg/gis/2000/06/xyz.tif' folder (str): folder to save the data user (str): username to access jsimpsonhttps.pps.eosdis.nasa.gov password (str): password to access jsimpsonhttps.pps.eosdis.nasa.gov timeout (int): timeout in seconds Returns: None \"\"\" url = 'https://jsimpsonhttps.pps.eosdis.nasa.gov' + url_extract fname = url . split ( '/' )[ - 1 ] response = requests . get ( url , auth = HTTPBasicAuth ( user , password ), timeout = timeout ) response . raise_for_status () with open ( os . path . join ( folder , fname ), 'wb' ) as f : f . write ( response . content ) print ( f ' { fname } downloaded' ) download_satsoilmoist ( year , month , day , path ) function to download Soil moisture gridded data from CDS Examples: >>> download_satsoilmoist ( 2000 , 6 , 1 , '/path/to/data' ) Parameters: Name Type Description Default year int year of the data to be downloaded required month int month of the data to be downloaded required day int day of the data to be downloaded required path str path to save the data required Returns: Type Description None Source code in hidrocl/download/__init__.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def download_satsoilmoist ( year , month , day , path ): \"\"\"function to download Soil moisture gridded data from CDS Examples: >>> download_satsoilmoist(2000, 6, 1, '/path/to/data') Args: year (int): year of the data to be downloaded month (int): month of the data to be downloaded day (int): day of the data to be downloaded path (str): path to save the data Returns: None \"\"\" c = cdsapi . Client () c . retrieve ( 'satellite-soil-moisture' , { 'format' : 'tgz' , 'variable' : 'volumetric_surface_soil_moisture' , 'type_of_sensor' : [ 'combined_passive_and_active' , 'passive' , ], 'time_aggregation' : 'day_average' , 'month' : str ( month ) . zfill ( 2 ), 'year' : str ( year ) . zfill ( 4 ), 'day' : str ( day ) . zfill ( 2 ), 'type_of_record' : 'cdr' , 'version' : 'v202012.0.0' , }, 'download.tar.gz' ) with tarfile . open ( 'download.tar.gz' ) as tar : tar . extractall ( path = path ) os . remove ( 'download.tar.gz' ) get_imerg ( start , end , user , password , timeout = 60 ) function to get IMERG data filenames from jsimpsonhttps.pps.eosdis.nasa.gov Examples: >>> get_imerg ( '2000-06' , '2000-07' , 'user@doma.in' , 'password' ) ['/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S000000-E002959.0000.V06B.30min.tif', '/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S003000-E005959.0030.V06B.30min.tif', ...] Parameters: Name Type Description Default start str start date in the format YYYY-MM required end str start date in the format YYYY-MM required user str username to access jsimpsonhttps.pps.eosdis.nasa.gov required password str password to access jsimpsonhttps.pps.eosdis.nasa.gov required timeout int timeout in seconds 60 Returns: Name Type Description list a list representing the filename of IMERG data available for the requested period Raises: Type Description ValueError if: - start or end are not in the format YYYY-MM - start is after end - start is less than 2000-06 Source code in hidrocl/download/__init__.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 def get_imerg ( start , end , user , password , timeout = 60 ): \"\"\"function to get IMERG data filenames from jsimpsonhttps.pps.eosdis.nasa.gov Examples: >>> get_imerg('2000-06', '2000-07', 'user@doma.in', 'password') ['/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S000000-E002959.0000.V06B.30min.tif', '/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S003000-E005959.0030.V06B.30min.tif', ...] Args: start (str): start date in the format YYYY-MM end (str): start date in the format YYYY-MM user (str): username to access jsimpsonhttps.pps.eosdis.nasa.gov password (str): password to access jsimpsonhttps.pps.eosdis.nasa.gov timeout (int): timeout in seconds Returns: list: a list representing the filename of IMERG data available for the requested period Raises: ValueError: if: - start or end are not in the format YYYY-MM - start is after end - start is less than 2000-06 \"\"\" start = pd . to_datetime ( start + '-01' , format = \"%Y-%m- %d \" ) end = pd . to_datetime ( end + '-01' , format = \"%Y-%m- %d \" ) if start > end : raise ValueError ( \"start date should be less than end date\" ) if start . year < 2000 : raise ValueError ( \"start date should be greater than 2000\" ) if end . year > datetime . now () . year : raise ValueError ( \"end date should be less than current year\" ) if start . year == 200 and start . month < 6 : raise ValueError ( \"start date should be greater than 2000-06-01\" ) p = pd . period_range ( start , end , freq = 'M' ) final_response = [] for yyyymm in p : year = int ( yyyymm . strftime ( '%Y' )) month = int ( yyyymm . strftime ( '%m' )) url = f 'https://jsimpsonhttps.pps.eosdis.nasa.gov/text/imerg/gis/ { year : 04d } / { month : 02d } /' response = requests . get ( url , auth = HTTPBasicAuth ( user , password ), timeout = timeout ) vals = str ( response . content ) . split ( ' \\\\ n' ) vals_filtered = [ val for val in vals if '3B-HHR-L' in val and '30min.tif' in val ] final_response . extend ( vals_filtered ) return final_response","title":"Download functions"},{"location":"download/#download-functions","text":"","title":"Download functions"},{"location":"download/#hidrocl.download.download_era5land","text":"function to download era5-land reanalysis data from CDS This functions needs a .cdsapirc file in the home directory with the following content: url: https://cds.climate.copernicus.eu/api/v2 key: Examples: >>> download_era5land ( 2000 , 6 , 1 , '/path/to/data' ) Parameters: Name Type Description Default year int year of the data to be downloaded required month int month of the data to be downloaded required day int day of the data to be downloaded required path str path to save the data required Returns: Type Description None Source code in hidrocl/download/__init__.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def download_era5land ( year , month , day , path ): \"\"\"function to download era5-land reanalysis data from CDS This functions needs a .cdsapirc file in the home directory with the following content: url: https://cds.climate.copernicus.eu/api/v2 key: <your key> Examples: >>> download_era5land(2000, 6, 1, '/path/to/data') Args: year (int): year of the data to be downloaded month (int): month of the data to be downloaded day (int): day of the data to be downloaded path (str):path to save the data Returns: None \"\"\" fname = os . path . join ( path , f 'era5-land_ { year : 04d }{ month : 02d }{ day : 02d } .nc' ) c = cdsapi . Client () c . retrieve ( 'reanalysis-era5-land' , { 'format' : 'netcdf' , 'variable' : [ '2m_temperature' , 'potential_evaporation' , 'snow_albedo' , 'snow_cover' , 'snow_density' , 'snow_depth' , 'snow_depth_water_equivalent' , 'total_evaporation' , 'total_precipitation' , 'volumetric_soil_water_layer_1' , 'volumetric_soil_water_layer_2' , 'volumetric_soil_water_layer_3' , 'volumetric_soil_water_layer_4' , ], 'month' : [ str ( month ) . zfill ( 2 ), ], 'day' : [ str ( day ) . zfill ( 2 ), ], 'time' : [ '00:00' , '01:00' , '02:00' , '03:00' , '04:00' , '05:00' , '06:00' , '07:00' , '08:00' , '09:00' , '10:00' , '11:00' , '12:00' , '13:00' , '14:00' , '15:00' , '16:00' , '17:00' , '18:00' , '19:00' , '20:00' , '21:00' , '22:00' , '23:00' , ], 'year' : [ str ( year ) . zfill ( 4 ), ], 'area' : [ - 15 , - 75 , - 55 , - 65 , ], }, fname )","title":"download_era5land()"},{"location":"download/#hidrocl.download.download_imerg","text":"download IMERG data from jsimpsonhttps.pps.eosdis.nasa.gov. It is recommended to use the function get_imerg to get the filenames of the data to be downloaded Examples: >>> download_imerg ( '/imerg/gis/2000/06/xyz.tif' , '/path/to/data' , 'user@doma.in' , 'password' ) xyz.tif downloaded >>> # for multiple files (natural process) >>> files = get_imerg ( '2000-06' , '2000-07' , 'user@doma.in' , 'password' ) >>> for file in files : >>> download_imerg ( file , '/path/to/data' , 'user@doma.in' , 'password' ) xyz1.tif downloaded xyz2.tif downloaded ... Parameters: Name Type Description Default url_extract str extract of url in format '/imerg/gis/2000/06/xyz.tif' required folder str folder to save the data required user str username to access jsimpsonhttps.pps.eosdis.nasa.gov required password str password to access jsimpsonhttps.pps.eosdis.nasa.gov required timeout int timeout in seconds 60 Returns: Type Description None Source code in hidrocl/download/__init__.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 def download_imerg ( url_extract , folder , user , password , timeout = 60 ): \"\"\"download IMERG data from jsimpsonhttps.pps.eosdis.nasa.gov. It is recommended to use the function get_imerg to get the filenames of the data to be downloaded Examples: >>> download_imerg('/imerg/gis/2000/06/xyz.tif', '/path/to/data', 'user@doma.in', 'password') xyz.tif downloaded >>> # for multiple files (natural process) >>> files = get_imerg('2000-06', '2000-07', 'user@doma.in', 'password') >>> for file in files: >>> download_imerg(file, '/path/to/data', 'user@doma.in', 'password') xyz1.tif downloaded xyz2.tif downloaded ... Args: url_extract (str): extract of url in format '/imerg/gis/2000/06/xyz.tif' folder (str): folder to save the data user (str): username to access jsimpsonhttps.pps.eosdis.nasa.gov password (str): password to access jsimpsonhttps.pps.eosdis.nasa.gov timeout (int): timeout in seconds Returns: None \"\"\" url = 'https://jsimpsonhttps.pps.eosdis.nasa.gov' + url_extract fname = url . split ( '/' )[ - 1 ] response = requests . get ( url , auth = HTTPBasicAuth ( user , password ), timeout = timeout ) response . raise_for_status () with open ( os . path . join ( folder , fname ), 'wb' ) as f : f . write ( response . content ) print ( f ' { fname } downloaded' )","title":"download_imerg()"},{"location":"download/#hidrocl.download.download_satsoilmoist","text":"function to download Soil moisture gridded data from CDS Examples: >>> download_satsoilmoist ( 2000 , 6 , 1 , '/path/to/data' ) Parameters: Name Type Description Default year int year of the data to be downloaded required month int month of the data to be downloaded required day int day of the data to be downloaded required path str path to save the data required Returns: Type Description None Source code in hidrocl/download/__init__.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def download_satsoilmoist ( year , month , day , path ): \"\"\"function to download Soil moisture gridded data from CDS Examples: >>> download_satsoilmoist(2000, 6, 1, '/path/to/data') Args: year (int): year of the data to be downloaded month (int): month of the data to be downloaded day (int): day of the data to be downloaded path (str): path to save the data Returns: None \"\"\" c = cdsapi . Client () c . retrieve ( 'satellite-soil-moisture' , { 'format' : 'tgz' , 'variable' : 'volumetric_surface_soil_moisture' , 'type_of_sensor' : [ 'combined_passive_and_active' , 'passive' , ], 'time_aggregation' : 'day_average' , 'month' : str ( month ) . zfill ( 2 ), 'year' : str ( year ) . zfill ( 4 ), 'day' : str ( day ) . zfill ( 2 ), 'type_of_record' : 'cdr' , 'version' : 'v202012.0.0' , }, 'download.tar.gz' ) with tarfile . open ( 'download.tar.gz' ) as tar : tar . extractall ( path = path ) os . remove ( 'download.tar.gz' )","title":"download_satsoilmoist()"},{"location":"download/#hidrocl.download.get_imerg","text":"function to get IMERG data filenames from jsimpsonhttps.pps.eosdis.nasa.gov Examples: >>> get_imerg ( '2000-06' , '2000-07' , 'user@doma.in' , 'password' ) ['/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S000000-E002959.0000.V06B.30min.tif', '/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S003000-E005959.0030.V06B.30min.tif', ...] Parameters: Name Type Description Default start str start date in the format YYYY-MM required end str start date in the format YYYY-MM required user str username to access jsimpsonhttps.pps.eosdis.nasa.gov required password str password to access jsimpsonhttps.pps.eosdis.nasa.gov required timeout int timeout in seconds 60 Returns: Name Type Description list a list representing the filename of IMERG data available for the requested period Raises: Type Description ValueError if: - start or end are not in the format YYYY-MM - start is after end - start is less than 2000-06 Source code in hidrocl/download/__init__.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 def get_imerg ( start , end , user , password , timeout = 60 ): \"\"\"function to get IMERG data filenames from jsimpsonhttps.pps.eosdis.nasa.gov Examples: >>> get_imerg('2000-06', '2000-07', 'user@doma.in', 'password') ['/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S000000-E002959.0000.V06B.30min.tif', '/imerg/gis/2000/06/3B-HHR-L.MS.MRG.3IMERG.20000608-S003000-E005959.0030.V06B.30min.tif', ...] Args: start (str): start date in the format YYYY-MM end (str): start date in the format YYYY-MM user (str): username to access jsimpsonhttps.pps.eosdis.nasa.gov password (str): password to access jsimpsonhttps.pps.eosdis.nasa.gov timeout (int): timeout in seconds Returns: list: a list representing the filename of IMERG data available for the requested period Raises: ValueError: if: - start or end are not in the format YYYY-MM - start is after end - start is less than 2000-06 \"\"\" start = pd . to_datetime ( start + '-01' , format = \"%Y-%m- %d \" ) end = pd . to_datetime ( end + '-01' , format = \"%Y-%m- %d \" ) if start > end : raise ValueError ( \"start date should be less than end date\" ) if start . year < 2000 : raise ValueError ( \"start date should be greater than 2000\" ) if end . year > datetime . now () . year : raise ValueError ( \"end date should be less than current year\" ) if start . year == 200 and start . month < 6 : raise ValueError ( \"start date should be greater than 2000-06-01\" ) p = pd . period_range ( start , end , freq = 'M' ) final_response = [] for yyyymm in p : year = int ( yyyymm . strftime ( '%Y' )) month = int ( yyyymm . strftime ( '%m' )) url = f 'https://jsimpsonhttps.pps.eosdis.nasa.gov/text/imerg/gis/ { year : 04d } / { month : 02d } /' response = requests . get ( url , auth = HTTPBasicAuth ( user , password ), timeout = timeout ) vals = str ( response . content ) . split ( ' \\\\ n' ) vals_filtered = [ val for val in vals if '3B-HHR-L' in val and '30min.tif' in val ] final_response . extend ( vals_filtered ) return final_response","title":"get_imerg()"},{"location":"how-to/","text":"How to","title":"How to"},{"location":"how-to/#how-to","text":"","title":"How to"},{"location":"products/","text":"Product processors Gldas_noah A class to process GLDAS_NOAH025_3H to hidrocl variables Attributes: Name Type Description snow HidroCLVariable HidroCLVariable with the GLDAS snow data temp HidroCLVariable HidroCLVariable with the GLDAS temperature data et HidroCLVariable HidroCLVariable with the GLDAS evapotranspiration data soilm HidroCLVariable HidroCLVariable with the GLDAS soil moisture data snow_log str Path to the log file for the snow extraction temp_log str Path to the log file for the temperature extraction et_log str Path to the log file for the evapotranspiration extraction soilm_log str Path to the log file for the soil moisture extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list List of common elements between the snow, temp, et and soilm databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 8 scenes for modis) complete_scenes list List of complete scenes (8 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 8 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 class Gldas_noah : \"\"\" A class to process GLDAS_NOAH025_3H to hidrocl variables Attributes: snow (HidroCLVariable): HidroCLVariable with the GLDAS snow data \\n temp (HidroCLVariable): HidroCLVariable with the GLDAS temperature data \\n et (HidroCLVariable): HidroCLVariable with the GLDAS evapotranspiration data \\n soilm (HidroCLVariable): HidroCLVariable with the GLDAS soil moisture data \\n snow_log (str): Path to the log file for the snow extraction \\n temp_log (str): Path to the log file for the temperature extraction \\n et_log (str): Path to the log file for the evapotranspiration extraction \\n soilm_log (str): Path to the log file for the soil moisture extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): List of common elements between the snow, temp, et and soilm databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 8 scenes for modis) \\n complete_scenes (list): List of complete scenes (8 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 8 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , snow , temp , et , soilm , product_path , vector_path , snow_log , temp_log , et_log , soilm_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gldas_noah >>> snow = HidroCLVariable('snow', 'snow.db', 'snow_pc.db') >>> temp = HidroCLVariable('temp', 'temp.db', 'temp_pc.db') >>> et = HidroCLVariable('et', 'et.db', 'et.db') >>> soilm = HidroCLVariable('soilm', 'soilm.db', 'soilm_pc.db') >>> product_path = '/home/user/data/GLDAS_NOAH025_3H' >>> vector_path = '/home/user/data/vector.shp' >>> snow_log = '/home/user/data/logs/snow.log' >>> temp_log = '/home/user/data/logs/temp.log' >>> et_log = '/home/user/data/logs/et.log' >>> soilm_log = '/home/user/data/logs/soilm.log' >>> gldas = Gldas_noah(snow, temp, et, soilm, product_path, ... vector_path, snow_log, temp_log, et_log, soilm_log) >>> gldas Class to extract GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1 Args: snow (HidroCLVariable): HidroCLVariable with the GLDAS snow data \\n temp (HidroCLVariable): HidroCLVariable with the GLDAS temperature data \\n et (HidroCLVariable): HidroCLVariable with the GLDAS evapotranspiration data \\n soilm (HidroCLVariable): HidroCLVariable with the GLDAS soil moisture data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n temp_log (str): Path to the log file for the temperature extraction \\n et_log (str): Path to the log file for the evapotranspiration extraction \\n soilm_log (str): Path to the log file for the soil moisture extraction \\n Raises: TypeError: If snow, temp, et or soilm is not a HidroCLVariable \"\"\" if t . check_instance ( snow , temp , et , soilm ): self . snow = snow self . temp = temp self . et = et self . soilm = soilm self . snow_log = snow_log self . temp_log = temp_log self . et_log = et_log self . soilm_log = soilm_log self . productname = \"GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"gldas\" ) self . product_ids = t . get_product_ids ( self . product_files , \"gldas\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"gldas\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'gldas' ) else : raise TypeError ( 'snow, temp, et and soilm must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } Snow records: { len ( self . snow . indatabase ) } . Snow path: { self . snow . database } Temperature records: { len ( self . temp . indatabase ) } . Temperature path: { self . temp . database } Evapotranspiration records: { len ( self . et . indatabase ) } . Evapotranspiration path: { self . et . database } Soil moisture records: { len ( self . soilm . indatabase ) } . Soil moisture path: { self . soilm . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . snow . indatabase : if scene not in self . snow . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snow_gldas' , self . snow . catchment_names , self . snow_log , database = self . snow . database , pcdatabase = self . snow . pcdatabase , vector_path = self . vectorpath , layer = \"SWE_inst\" ) if scene not in self . temp . indatabase : if scene not in self . temp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'temp_gldas' , self . temp . catchment_names , self . temp_log , database = self . temp . database , pcdatabase = self . temp . pcdatabase , vector_path = self . vectorpath , layer = \"Tair_f_inst\" ) if scene not in self . et . indatabase : if scene not in self . et . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'et_gldas' , self . et . catchment_names , self . et_log , database = self . et . database , pcdatabase = self . et . pcdatabase , vector_path = self . vectorpath , layer = \"ECanop_tavg\" ) if scene not in self . soilm . indatabase : if scene not in self . soilm . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'soilm_gldas' , self . soilm . catchment_names , self . soilm_log , database = self . soilm . database , pcdatabase = self . soilm . pcdatabase , vector_path = self . vectorpath , layer = [ \"SoilMoi0_10cm_inst\" , \"SoilMoi10_40cm_inst\" , \"SoilMoi40_100cm_inst\" , \"SoilMoi100_200cm_inst\" ]) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'gldas' , log_file = log_file ) __init__ ( snow , temp , et , soilm , product_path , vector_path , snow_log , temp_log , et_log , soilm_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gldas_noah >>> snow = HidroCLVariable ( 'snow' , 'snow.db' , 'snow_pc.db' ) >>> temp = HidroCLVariable ( 'temp' , 'temp.db' , 'temp_pc.db' ) >>> et = HidroCLVariable ( 'et' , 'et.db' , 'et.db' ) >>> soilm = HidroCLVariable ( 'soilm' , 'soilm.db' , 'soilm_pc.db' ) >>> product_path = '/home/user/data/GLDAS_NOAH025_3H' >>> vector_path = '/home/user/data/vector.shp' >>> snow_log = '/home/user/data/logs/snow.log' >>> temp_log = '/home/user/data/logs/temp.log' >>> et_log = '/home/user/data/logs/et.log' >>> soilm_log = '/home/user/data/logs/soilm.log' >>> gldas = Gldas_noah ( snow , temp , et , soilm , product_path , ... vector_path , snow_log , temp_log , et_log , soilm_log ) >>> gldas Class to extract GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1 Parameters: Name Type Description Default snow HidroCLVariable HidroCLVariable with the GLDAS snow data required temp HidroCLVariable HidroCLVariable with the GLDAS temperature data required et HidroCLVariable HidroCLVariable with the GLDAS evapotranspiration data required soilm HidroCLVariable HidroCLVariable with the GLDAS soil moisture data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required snow_log str Path to the log file for the snow extraction required temp_log str Path to the log file for the temperature extraction required et_log str Path to the log file for the evapotranspiration extraction required soilm_log str Path to the log file for the soil moisture extraction required Raises: Type Description TypeError If snow, temp, et or soilm is not a HidroCLVariable Source code in hidrocl/products/__init__.py 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 def __init__ ( self , snow , temp , et , soilm , product_path , vector_path , snow_log , temp_log , et_log , soilm_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gldas_noah >>> snow = HidroCLVariable('snow', 'snow.db', 'snow_pc.db') >>> temp = HidroCLVariable('temp', 'temp.db', 'temp_pc.db') >>> et = HidroCLVariable('et', 'et.db', 'et.db') >>> soilm = HidroCLVariable('soilm', 'soilm.db', 'soilm_pc.db') >>> product_path = '/home/user/data/GLDAS_NOAH025_3H' >>> vector_path = '/home/user/data/vector.shp' >>> snow_log = '/home/user/data/logs/snow.log' >>> temp_log = '/home/user/data/logs/temp.log' >>> et_log = '/home/user/data/logs/et.log' >>> soilm_log = '/home/user/data/logs/soilm.log' >>> gldas = Gldas_noah(snow, temp, et, soilm, product_path, ... vector_path, snow_log, temp_log, et_log, soilm_log) >>> gldas Class to extract GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1 Args: snow (HidroCLVariable): HidroCLVariable with the GLDAS snow data \\n temp (HidroCLVariable): HidroCLVariable with the GLDAS temperature data \\n et (HidroCLVariable): HidroCLVariable with the GLDAS evapotranspiration data \\n soilm (HidroCLVariable): HidroCLVariable with the GLDAS soil moisture data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n temp_log (str): Path to the log file for the temperature extraction \\n et_log (str): Path to the log file for the evapotranspiration extraction \\n soilm_log (str): Path to the log file for the soil moisture extraction \\n Raises: TypeError: If snow, temp, et or soilm is not a HidroCLVariable \"\"\" if t . check_instance ( snow , temp , et , soilm ): self . snow = snow self . temp = temp self . et = et self . soilm = soilm self . snow_log = snow_log self . temp_log = temp_log self . et_log = et_log self . soilm_log = soilm_log self . productname = \"GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"gldas\" ) self . product_ids = t . get_product_ids ( self . product_files , \"gldas\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"gldas\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'gldas' ) else : raise TypeError ( 'snow, temp, et and soilm must be HidroCLVariable objects' ) __repr__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 1012 1013 1014 1015 1016 1017 1018 1019 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } Snow records: { len ( self . snow . indatabase ) } . Snow path: { self . snow . database } Temperature records: { len ( self . temp . indatabase ) } . Temperature path: { self . temp . database } Evapotranspiration records: { len ( self . et . indatabase ) } . Evapotranspiration path: { self . et . database } Soil moisture records: { len ( self . soilm . indatabase ) } . Soil moisture path: { self . soilm . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . snow . indatabase : if scene not in self . snow . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snow_gldas' , self . snow . catchment_names , self . snow_log , database = self . snow . database , pcdatabase = self . snow . pcdatabase , vector_path = self . vectorpath , layer = \"SWE_inst\" ) if scene not in self . temp . indatabase : if scene not in self . temp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'temp_gldas' , self . temp . catchment_names , self . temp_log , database = self . temp . database , pcdatabase = self . temp . pcdatabase , vector_path = self . vectorpath , layer = \"Tair_f_inst\" ) if scene not in self . et . indatabase : if scene not in self . et . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'et_gldas' , self . et . catchment_names , self . et_log , database = self . et . database , pcdatabase = self . et . pcdatabase , vector_path = self . vectorpath , layer = \"ECanop_tavg\" ) if scene not in self . soilm . indatabase : if scene not in self . soilm . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'soilm_gldas' , self . soilm . catchment_names , self . soilm_log , database = self . soilm . database , pcdatabase = self . soilm . pcdatabase , vector_path = self . vectorpath , layer = [ \"SoilMoi0_10cm_inst\" , \"SoilMoi10_40cm_inst\" , \"SoilMoi40_100cm_inst\" , \"SoilMoi100_200cm_inst\" ]) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'gldas' , log_file = log_file ) Gpm_3imrghhl A class to process GPM_3IMRGHHL to hidrocl variables Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with IMERG precipitation data pp_log str Path to the log file for IMERG precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 48 scenes for modis) complete_scenes list List of complete scenes (48 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 48 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Gpm_3imrghhl : \"\"\" A class to process GPM_3IMRGHHL to hidrocl variables Attributes: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n pp_log (str): Path to the log file for IMERG precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 48 scenes for modis) \\n complete_scenes (list): List of complete scenes (48 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 48 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gpm_3imrghhl >>> pp = HidroCLVariable('pp', 'imerg', 'pp.db', 'pp_pc.db') >>> gpm = Gpm_3imrghhl(pp, product_path, vector_path, pp_log) >>> gpm Class to extract GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6 Args: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for IMERG precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"imerg\" ) self . product_ids = t . get_product_ids ( self . product_files , \"imerg\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"imerg\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'imerg' ) else : raise TypeError ( 'pp must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } IMERG precipitation records: { len ( self . pp . indatabase ) } . IMERG precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'imerg' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath , layer = \"Grid_precipitationCal\" ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'imerg' , log_file = log_file ) __init__ ( pp , product_path , vector_path , pp_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gpm_3imrghhl >>> pp = HidroCLVariable ( 'pp' , 'imerg' , 'pp.db' , 'pp_pc.db' ) >>> gpm = Gpm_3imrghhl ( pp , product_path , vector_path , pp_log ) >>> gpm Class to extract GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6 Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with IMERG precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for IMERG precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gpm_3imrghhl >>> pp = HidroCLVariable('pp', 'imerg', 'pp.db', 'pp_pc.db') >>> gpm = Gpm_3imrghhl(pp, product_path, vector_path, pp_log) >>> gpm Class to extract GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6 Args: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for IMERG precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"imerg\" ) self . product_ids = t . get_product_ids ( self . product_files , \"imerg\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"imerg\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'imerg' ) else : raise TypeError ( 'pp must be HidroCLVariable objects' ) __repr__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 824 825 826 827 828 829 830 831 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 833 834 835 836 837 838 839 840 841 842 843 844 845 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } IMERG precipitation records: { len ( self . pp . indatabase ) } . IMERG precipitation database path: { self . pp . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'imerg' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath , layer = \"Grid_precipitationCal\" ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'imerg' , log_file = log_file ) Mcd15a2h A class to process MCD15A2H to hidrocl variables Attributes: Name Type Description lai HidroCLVariable HidroCLVariable object with the LAI data fpar HidroCLVariable HidroCLVariable object with the FPAR data lai_log str Path to the log file for the LAI extraction fpar_log str Path to the log file for the FPAR extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list List of common elements between the FPAR and LAI databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mcd15a2h : \"\"\" A class to process MCD15A2H to hidrocl variables Attributes: lai (HidroCLVariable): HidroCLVariable object with the LAI data \\n fpar (HidroCLVariable): HidroCLVariable object with the FPAR data \\n lai_log (str): Path to the log file for the LAI extraction \\n fpar_log (str): Path to the log file for the FPAR extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): List of common elements between the FPAR and LAI databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , lai , fpar , product_path , vector_path , lai_log , fpar_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mcd15a2h >>> lai = HidroCLVariable('lai', 'lai.db', 'lai_pc.db') >>> fpar = HidroCLVariable('fpar', 'fpar.db', 'fpar_pc.db') >>> product_path = '/home/user/mod15a2h' >>> vector_path = '/home/user/vector' >>> lai_log = '/home/user/lai.log' >>> fpar_log = '/home/user/fpar.log' >>> mcd15a2h = Mcd15a2h(lai, fpar, product_path, vector_path, ... lai_log, fpar_log) >>> mcd15a2h Class to extract MODIS MCD15A2H Version 6.0 Args: lai (HidroCLVariable): HidroCLVariable object with the LAI data fpar (HidroCLVariable): HidroCLVariable object with the FPAR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder lai_log (str): Path to the log file for the LAI extraction fpar_log (str): Path to the log file for the FPAR extraction Raises: TypeError: If lai or fpar is not HidroCLVariable object \"\"\" if t . check_instance ( lai , fpar ): self . lai = lai self . fpar = fpar self . lai_log = lai_log self . fpar_log = fpar_log self . productname = \"MODIS MCD15A2H Version 6.0\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'lai and fpar must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } LAI records: { len ( self . lai . indatabase ) } . LAI database path: { self . lai . database } FPAR records: { len ( self . fpar . indatabase ) } . FPAR database path: { self . fpar . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . lai . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'lai' , self . lai . catchment_names , self . lai_log , database = self . lai . database , pcdatabase = self . lai . pcdatabase , vector_path = self . vectorpath , layer = \"Lai_500m\" , ) if scene not in self . fpar . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'fpar' , self . fpar . catchment_names , self . fpar_log , database = self . fpar . database , pcdatabase = self . fpar . pcdatabase , vector_path = self . vectorpath , layer = \"Fpar_500m\" ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) __init__ ( lai , fpar , product_path , vector_path , lai_log , fpar_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mcd15a2h >>> lai = HidroCLVariable ( 'lai' , 'lai.db' , 'lai_pc.db' ) >>> fpar = HidroCLVariable ( 'fpar' , 'fpar.db' , 'fpar_pc.db' ) >>> product_path = '/home/user/mod15a2h' >>> vector_path = '/home/user/vector' >>> lai_log = '/home/user/lai.log' >>> fpar_log = '/home/user/fpar.log' >>> mcd15a2h = Mcd15a2h ( lai , fpar , product_path , vector_path , ... lai_log , fpar_log ) >>> mcd15a2h Class to extract MODIS MCD15A2H Version 6.0 Parameters: Name Type Description Default lai HidroCLVariable HidroCLVariable object with the LAI data required fpar HidroCLVariable HidroCLVariable object with the FPAR data required product_path str Path to the product folder required vector_path str Path to the vector folder required lai_log str Path to the log file for the LAI extraction required fpar_log str Path to the log file for the FPAR extraction required Raises: Type Description TypeError If lai or fpar is not HidroCLVariable object Source code in hidrocl/products/__init__.py 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 def __init__ ( self , lai , fpar , product_path , vector_path , lai_log , fpar_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mcd15a2h >>> lai = HidroCLVariable('lai', 'lai.db', 'lai_pc.db') >>> fpar = HidroCLVariable('fpar', 'fpar.db', 'fpar_pc.db') >>> product_path = '/home/user/mod15a2h' >>> vector_path = '/home/user/vector' >>> lai_log = '/home/user/lai.log' >>> fpar_log = '/home/user/fpar.log' >>> mcd15a2h = Mcd15a2h(lai, fpar, product_path, vector_path, ... lai_log, fpar_log) >>> mcd15a2h Class to extract MODIS MCD15A2H Version 6.0 Args: lai (HidroCLVariable): HidroCLVariable object with the LAI data fpar (HidroCLVariable): HidroCLVariable object with the FPAR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder lai_log (str): Path to the log file for the LAI extraction fpar_log (str): Path to the log file for the FPAR extraction Raises: TypeError: If lai or fpar is not HidroCLVariable object \"\"\" if t . check_instance ( lai , fpar ): self . lai = lai self . fpar = fpar self . lai_log = lai_log self . fpar_log = fpar_log self . productname = \"MODIS MCD15A2H Version 6.0\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'lai and fpar must be HidroCLVariable objects' ) __repr__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 648 649 650 651 652 653 654 655 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } LAI records: { len ( self . lai . indatabase ) } . LAI database path: { self . lai . database } FPAR records: { len ( self . fpar . indatabase ) } . FPAR database path: { self . fpar . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . lai . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'lai' , self . lai . catchment_names , self . lai_log , database = self . lai . database , pcdatabase = self . lai . pcdatabase , vector_path = self . vectorpath , layer = \"Lai_500m\" , ) if scene not in self . fpar . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'fpar' , self . fpar . catchment_names , self . fpar_log , database = self . fpar . database , pcdatabase = self . fpar . pcdatabase , vector_path = self . vectorpath , layer = \"Fpar_500m\" ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) Mod10a2 A class to process MOD10A2 to hidrocl variables Attributes: Name Type Description nsnow HidroCLVariable HidroCLVariable object with north face snow data ssnow HidroCLVariable HidroCLVariable object with south face snow data snow_log str Path to the log file for the snow extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located northvectorpath str Path to the vector folder with the north Shapefile with areas to be processed southvectorpath str Path to the vector folder with the south Shapefile with areas to be processed common_elements list List of common elements between the nsnow and ssnow databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mod10a2 : \"\"\" A class to process MOD10A2 to hidrocl variables Attributes: nsnow (HidroCLVariable): HidroCLVariable object with north face snow data \\n ssnow (HidroCLVariable): HidroCLVariable object with south face snow data \\n snow_log (str): Path to the log file for the snow extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n northvectorpath (str): Path to the vector folder with the north Shapefile with areas to be processed \\n southvectorpath (str): Path to the vector folder with the south Shapefile with areas to be processed \\n common_elements (list): List of common elements between the nsnow and ssnow databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , nsnow , ssnow , product_path , north_vector_path , south_vector_path , snow_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod10a2 >>> nsnow = HidroCLVariable('nsnow', 'modis', 'mod10a2', 'north') >>> ssnow = HidroCLVariable('ssnow', 'modis', 'mod10a2', 'south') >>> product_path = '/home/user/mod10a2' >>> north_vector_path = '/home/user/north_vector.shp' >>> south_vector_path = '/home/user/south_vector.shp' >>> snow_log = '/home/user/snow.log' >>> mod10a2 = Mod10a2(nsnow, ssnow, product_path, ... north_vector_path, south_vector_path, snow_log) >>> mod10a2 Class to extract MODIS MOD10A2 Version 6.1 Args: nsnow (HidroCLVariable): HidroCLVariable object with north face snow data \\n ssnow (HidroCLVariable): HidroCLVariable object with south face snow data \\n product_path (str): Path to the product folder where the product files are located \\n north_vector_path (str): Path to the vector folder with the north Shapefile with areas to be processed \\n south_vector_path (str): Path to the vector folder with the south Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n Raises: TypeError: If nsnow or ssnow is not a HidroCLVariable object \\n \"\"\" if t . check_instance ( nsnow , ssnow ): self . nsnow = nsnow self . ssnow = ssnow self . snow_log = snow_log self . productname = \"MODIS MOD10A2 Version 6.1\" self . productpath = product_path self . northvectorpath = north_vector_path self . southvectorpath = south_vector_path self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'nsnow and ssnow must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } North face snow records: { len ( self . nsnow . indatabase ) } . North face snow path: { self . nsnow . database } South face snow records: { len ( self . ssnow . indatabase ) } . South face snow database path: { self . ssnow . database } ''' def run_extraction ( self , limit = None ): \"\"\"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . nsnow . indatabase : # so what about the south one? e . zonal_stats ( scene , scenes_path , temp_dir , 'snow' , self . nsnow . catchment_names , self . snow_log , north_database = self . nsnow . database , north_pcdatabase = self . nsnow . pcdatabase , south_database = self . ssnow . database , south_pcdatabase = self . ssnow . pcdatabase , north_vector_path = self . northvectorpath , south_vector_path = self . southvectorpath , layer = \"Maximum_Snow_Extent\" ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) __init__ ( nsnow , ssnow , product_path , north_vector_path , south_vector_path , snow_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod10a2 >>> nsnow = HidroCLVariable ( 'nsnow' , 'modis' , 'mod10a2' , 'north' ) >>> ssnow = HidroCLVariable ( 'ssnow' , 'modis' , 'mod10a2' , 'south' ) >>> product_path = '/home/user/mod10a2' >>> north_vector_path = '/home/user/north_vector.shp' >>> south_vector_path = '/home/user/south_vector.shp' >>> snow_log = '/home/user/snow.log' >>> mod10a2 = Mod10a2 ( nsnow , ssnow , product_path , ... north_vector_path , south_vector_path , snow_log ) >>> mod10a2 Class to extract MODIS MOD10A2 Version 6.1 Parameters: Name Type Description Default nsnow HidroCLVariable HidroCLVariable object with north face snow data required ssnow HidroCLVariable HidroCLVariable object with south face snow data required product_path str Path to the product folder where the product files are located required north_vector_path str Path to the vector folder with the north Shapefile with areas to be processed required south_vector_path str Path to the vector folder with the south Shapefile with areas to be processed required snow_log str Path to the log file for the snow extraction required Raises: Type Description TypeError If nsnow or ssnow is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 def __init__ ( self , nsnow , ssnow , product_path , north_vector_path , south_vector_path , snow_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod10a2 >>> nsnow = HidroCLVariable('nsnow', 'modis', 'mod10a2', 'north') >>> ssnow = HidroCLVariable('ssnow', 'modis', 'mod10a2', 'south') >>> product_path = '/home/user/mod10a2' >>> north_vector_path = '/home/user/north_vector.shp' >>> south_vector_path = '/home/user/south_vector.shp' >>> snow_log = '/home/user/snow.log' >>> mod10a2 = Mod10a2(nsnow, ssnow, product_path, ... north_vector_path, south_vector_path, snow_log) >>> mod10a2 Class to extract MODIS MOD10A2 Version 6.1 Args: nsnow (HidroCLVariable): HidroCLVariable object with north face snow data \\n ssnow (HidroCLVariable): HidroCLVariable object with south face snow data \\n product_path (str): Path to the product folder where the product files are located \\n north_vector_path (str): Path to the vector folder with the north Shapefile with areas to be processed \\n south_vector_path (str): Path to the vector folder with the south Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n Raises: TypeError: If nsnow or ssnow is not a HidroCLVariable object \\n \"\"\" if t . check_instance ( nsnow , ssnow ): self . nsnow = nsnow self . ssnow = ssnow self . snow_log = snow_log self . productname = \"MODIS MOD10A2 Version 6.1\" self . productpath = product_path self . northvectorpath = north_vector_path self . southvectorpath = south_vector_path self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'nsnow and ssnow must be HidroCLVariable objects' ) __repr__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 305 306 307 308 309 310 311 312 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } North face snow records: { len ( self . nsnow . indatabase ) } . North face snow path: { self . nsnow . database } South face snow records: { len ( self . ssnow . indatabase ) } . South face snow database path: { self . ssnow . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 def run_extraction ( self , limit = None ): \"\"\"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . nsnow . indatabase : # so what about the south one? e . zonal_stats ( scene , scenes_path , temp_dir , 'snow' , self . nsnow . catchment_names , self . snow_log , north_database = self . nsnow . database , north_pcdatabase = self . nsnow . pcdatabase , south_database = self . ssnow . database , south_pcdatabase = self . ssnow . pcdatabase , north_vector_path = self . northvectorpath , south_vector_path = self . southvectorpath , layer = \"Maximum_Snow_Extent\" ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) Mod13q1 A class to process MOD13Q1 to hidrocl variables Attributes: Name Type Description ndvi HidroCLVariable HidroCLVariable object with the NDVI data evi HidroCLVariable HidroCLVariable object with the EVI data nbr HidroCLVariable HidroCLVariable object with the NBR data ndvi_log str Path to the log file for the NDVI extraction evi_log str Path to the log file for the EVI extraction nbr_log str Path to the log file for the NBR extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list List of common elements between the NDVI, EVI and NBR databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mod13q1 : \"\"\" A class to process MOD13Q1 to hidrocl variables Attributes: ndvi (HidroCLVariable): HidroCLVariable object with the NDVI data \\n evi (HidroCLVariable): HidroCLVariable object with the EVI data \\n nbr (HidroCLVariable): HidroCLVariable object with the NBR data \\n ndvi_log (str): Path to the log file for the NDVI extraction \\n evi_log (str): Path to the log file for the EVI extraction \\n nbr_log (str): Path to the log file for the NBR extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): List of common elements between the NDVI, EVI and NBR databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , ndvi , evi , nbr , product_path , vector_path , ndvi_log , evi_log , nbr_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl.products import Mod13q1 >>> ndvi = HidroCLVariable('ndvi', 'ndvi.db', 'ndvi_pc.db') >>> evi = HidroCLVariable('evi', 'evi.db', 'evi_pc.db') >>> nbr = HidroCLVariable('nbr', 'nbr.db', 'nbr_pc.db') >>> product_path = '/home/user/mod13q1' >>> vector_path = '/home/user/vector.shp' >>> ndvi_log = '/home/user/ndvi.log' >>> evi_log = '/home/user/evi.log' >>> nbr_log = '/home/user/nbr.log' >>> mod13q1 = Mod13q1(ndvi, evi, nbr, product_path, vector_path, ... ndvi_log, evi_log, nbr_log) >>> mod13q1 Class to extract MODIS MOD13Q1 Version 6.1 Args: ndvi (HidroCLVariable): Object with the NDVI data evi (HidroCLVariable): Object with the EVI data nbr (HidroCLVariable): Object with the NBR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder ndvi_log (str): Path to the log file for the NDVI extraction evi_log (str): Path to the log file for the EVI extraction nbr_log (str): Path to the log file for the NBR extraction Raises: TypeError: If the input is not a HidroCLVariable object \"\"\" if t . check_instance ( ndvi , evi , nbr ): self . ndvi = ndvi self . evi = evi self . nbr = nbr self . ndvi_log = ndvi_log self . evi_log = evi_log self . nbr_log = nbr_log self . productname = \"MODIS MOD13Q1 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'ndvi, evi and nbr must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } NDVI records: { len ( self . ndvi . indatabase ) } . NDVI database path: { self . ndvi . database } EVI records: { len ( self . evi . indatabase ) } . EVI database path: { self . evi . database } NBR records: { len ( self . nbr . indatabase ) } . NBR database path: { self . nbr . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . ndvi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'ndvi' , self . ndvi . catchment_names , self . ndvi_log , database = self . ndvi . database , pcdatabase = self . ndvi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days NDVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'evi' , self . evi . catchment_names , self . evi_log , database = self . evi . database , pcdatabase = self . evi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days EVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'nbr' , self . nbr . catchment_names , self . nbr_log , database = self . nbr . database , pcdatabase = self . nbr . pcdatabase , vector_path = self . vectorpath , layer = [ \"250m 16 days NIR reflectance\" , \"250m 16 days MIR reflectance\" ]) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) __init__ ( ndvi , evi , nbr , product_path , vector_path , ndvi_log , evi_log , nbr_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl.products import Mod13q1 >>> ndvi = HidroCLVariable ( 'ndvi' , 'ndvi.db' , 'ndvi_pc.db' ) >>> evi = HidroCLVariable ( 'evi' , 'evi.db' , 'evi_pc.db' ) >>> nbr = HidroCLVariable ( 'nbr' , 'nbr.db' , 'nbr_pc.db' ) >>> product_path = '/home/user/mod13q1' >>> vector_path = '/home/user/vector.shp' >>> ndvi_log = '/home/user/ndvi.log' >>> evi_log = '/home/user/evi.log' >>> nbr_log = '/home/user/nbr.log' >>> mod13q1 = Mod13q1 ( ndvi , evi , nbr , product_path , vector_path , ... ndvi_log , evi_log , nbr_log ) >>> mod13q1 Class to extract MODIS MOD13Q1 Version 6.1 Parameters: Name Type Description Default ndvi HidroCLVariable Object with the NDVI data required evi HidroCLVariable Object with the EVI data required nbr HidroCLVariable Object with the NBR data required product_path str Path to the product folder required vector_path str Path to the vector folder required ndvi_log str Path to the log file for the NDVI extraction required evi_log str Path to the log file for the EVI extraction required nbr_log str Path to the log file for the NBR extraction required Raises: Type Description TypeError If the input is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 def __init__ ( self , ndvi , evi , nbr , product_path , vector_path , ndvi_log , evi_log , nbr_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl.products import Mod13q1 >>> ndvi = HidroCLVariable('ndvi', 'ndvi.db', 'ndvi_pc.db') >>> evi = HidroCLVariable('evi', 'evi.db', 'evi_pc.db') >>> nbr = HidroCLVariable('nbr', 'nbr.db', 'nbr_pc.db') >>> product_path = '/home/user/mod13q1' >>> vector_path = '/home/user/vector.shp' >>> ndvi_log = '/home/user/ndvi.log' >>> evi_log = '/home/user/evi.log' >>> nbr_log = '/home/user/nbr.log' >>> mod13q1 = Mod13q1(ndvi, evi, nbr, product_path, vector_path, ... ndvi_log, evi_log, nbr_log) >>> mod13q1 Class to extract MODIS MOD13Q1 Version 6.1 Args: ndvi (HidroCLVariable): Object with the NDVI data evi (HidroCLVariable): Object with the EVI data nbr (HidroCLVariable): Object with the NBR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder ndvi_log (str): Path to the log file for the NDVI extraction evi_log (str): Path to the log file for the EVI extraction nbr_log (str): Path to the log file for the NBR extraction Raises: TypeError: If the input is not a HidroCLVariable object \"\"\" if t . check_instance ( ndvi , evi , nbr ): self . ndvi = ndvi self . evi = evi self . nbr = nbr self . ndvi_log = ndvi_log self . evi_log = evi_log self . nbr_log = nbr_log self . productname = \"MODIS MOD13Q1 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'ndvi, evi and nbr must be HidroCLVariable objects' ) __repr__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 98 99 100 101 102 103 104 105 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } NDVI records: { len ( self . ndvi . indatabase ) } . NDVI database path: { self . ndvi . database } EVI records: { len ( self . evi . indatabase ) } . EVI database path: { self . evi . database } NBR records: { len ( self . nbr . indatabase ) } . NBR database path: { self . nbr . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . ndvi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'ndvi' , self . ndvi . catchment_names , self . ndvi_log , database = self . ndvi . database , pcdatabase = self . ndvi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days NDVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'evi' , self . evi . catchment_names , self . evi_log , database = self . evi . database , pcdatabase = self . evi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days EVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'nbr' , self . nbr . catchment_names , self . nbr_log , database = self . nbr . database , pcdatabase = self . nbr . pcdatabase , vector_path = self . vectorpath , layer = [ \"250m 16 days NIR reflectance\" , \"250m 16 days MIR reflectance\" ]) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) Mod16a2 A class to process MOD16A2 to hidrocl variables Attributes: Name Type Description pet HidroCLVariable HidroCLVariable object with the potential evapotranspiration pet_log str Path to the log file for the pet extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list Elements in pet database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 class Mod16a2 : \"\"\" A class to process MOD16A2 to hidrocl variables Attributes: pet (HidroCLVariable): HidroCLVariable object with the potential evapotranspiration \\n pet_log (str): Path to the log file for the pet extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): Elements in pet database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pet , product_path , vector_path , pet_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod16a2 >>> pet = HidroCLVariable('pet', 'pet.db', 'pet_pc.db') >>> product_path = '/home/user/modis/mod16a2' >>> vector_path = '/home/user/vector.shp' >>> pet_log = '/home/user/log/pet.log' >>> mod16a2 = Mod16a2(pet, product_path, vector_path, pet_log) >>> mod16a2 Class to extract MODIS MOD16A2 Version 6.1 Args: pet (HidroCLVariable): Object with the potential evapotranspiration data product_path (str): Path to the product folder vector_path (str): Path to the vector folder pet_log (str): Path to the log file for the pet extraction Raises: TypeError: If pet is not a HidroCLVariable object \"\"\" if t . check_instance ( pet ): self . pet = pet self . pet_log = pet_log self . productname = \"MODIS MOD16A2 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pet . indatabase self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'pet must be HidroCLVariable object' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } PET records: { len ( self . pet . indatabase ) } . PET database path: { self . pet . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pet . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pet' , self . pet . catchment_names , self . pet_log , database = self . pet . database , pcdatabase = self . pet . pcdatabase , vector_path = self . vectorpath , layer = \"PET_500m\" , ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) __init__ ( pet , product_path , vector_path , pet_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod16a2 >>> pet = HidroCLVariable ( 'pet' , 'pet.db' , 'pet_pc.db' ) >>> product_path = '/home/user/modis/mod16a2' >>> vector_path = '/home/user/vector.shp' >>> pet_log = '/home/user/log/pet.log' >>> mod16a2 = Mod16a2 ( pet , product_path , vector_path , pet_log ) >>> mod16a2 Class to extract MODIS MOD16A2 Version 6.1 Parameters: Name Type Description Default pet HidroCLVariable Object with the potential evapotranspiration data required product_path str Path to the product folder required vector_path str Path to the vector folder required pet_log str Path to the log file for the pet extraction required Raises: Type Description TypeError If pet is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 def __init__ ( self , pet , product_path , vector_path , pet_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod16a2 >>> pet = HidroCLVariable('pet', 'pet.db', 'pet_pc.db') >>> product_path = '/home/user/modis/mod16a2' >>> vector_path = '/home/user/vector.shp' >>> pet_log = '/home/user/log/pet.log' >>> mod16a2 = Mod16a2(pet, product_path, vector_path, pet_log) >>> mod16a2 Class to extract MODIS MOD16A2 Version 6.1 Args: pet (HidroCLVariable): Object with the potential evapotranspiration data product_path (str): Path to the product folder vector_path (str): Path to the vector folder pet_log (str): Path to the log file for the pet extraction Raises: TypeError: If pet is not a HidroCLVariable object \"\"\" if t . check_instance ( pet ): self . pet = pet self . pet_log = pet_log self . productname = \"MODIS MOD16A2 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pet . indatabase self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'pet must be HidroCLVariable object' ) __repr__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 478 479 480 481 482 483 484 485 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 487 488 489 490 491 492 493 494 495 496 497 498 499 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } PET records: { len ( self . pet . indatabase ) } . PET database path: { self . pet . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pet . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pet' , self . pet . catchment_names , self . pet_log , database = self . pet . database , pcdatabase = self . pet . pcdatabase , vector_path = self . vectorpath , layer = \"PET_500m\" , ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file ) Persiann_ccs A class to process PERSIANN-CCS to hidrocl variables Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS precipitation data pp_log str Path to the log file for PERSIANN-CCS precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 1 scenes for modis) complete_scenes list List of complete scenes (1 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 1 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 class Persiann_ccs : \"\"\" A class to process PERSIANN-CCS to hidrocl variables Attributes: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS precipitation data \\n pp_log (str): Path to the log file for PERSIANN-CCS precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 1 scenes for modis) \\n complete_scenes (list): List of complete scenes (1 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 1 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs >>> pp = HidroCLVariable('pp', 'PERSIANN-CCS', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs = Persiann_ccs(pp, product_path, vector_path, pp_log) >>> persiann_ccs Class to extract PERSIANN-CCS 0.04\u00ba Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file ) __init__ ( pp , product_path , vector_path , pp_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs >>> pp = HidroCLVariable ( 'pp' , 'PERSIANN-CCS' , 'pp.db' , 'pp_pc.db' ) >>> product_path = '/home/user/data/PERSIANN-CCS' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs = Persiann_ccs ( pp , product_path , vector_path , pp_log ) >>> persiann_ccs Class to extract PERSIANN-CCS 0.04\u00ba Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for PERSIANN-CCS precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs >>> pp = HidroCLVariable('pp', 'PERSIANN-CCS', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs = Persiann_ccs(pp, product_path, vector_path, pp_log) >>> persiann_ccs Class to extract PERSIANN-CCS 0.04\u00ba Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) __repr__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 1230 1231 1232 1233 1234 1235 1236 1237 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS precipitation database path: { self . pp . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file ) Persiann_ccs_cdr A class to process PERSIANN-CCS-CDR to hidrocl variables Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS-CDR precipitation data pp_log str Path to the log file for PERSIANN-CCS-CDR precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 1 scenes for modis) complete_scenes list List of complete scenes (1 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 1 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 class Persiann_ccs_cdr : \"\"\" A class to process PERSIANN-CCS-CDR to hidrocl variables Attributes: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS-CDR precipitation data \\n pp_log (str): Path to the log file for PERSIANN-CCS-CDR precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 1 scenes for modis) \\n complete_scenes (list): List of complete scenes (1 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 1 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs_cdr >>> pp = HidroCLVariable('pp', 'PERSIANN-CCS-CDR', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS-CDR' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs_cdr = Persiann_ccs_cdr(pp, product_path, vector_path, pp_log) >>> persiann_ccs_cdr Class to extract PERSIANN-CCS-CDR 0.04\u00ba Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS-CDR precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS-CDR precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS-CDR 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs_cdr\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs_cdr\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs_cdr\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs_cdr' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS-CDR precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS-CDR precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs_cdr\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file ) __init__ ( pp , product_path , vector_path , pp_log ) Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs_cdr >>> pp = HidroCLVariable ( 'pp' , 'PERSIANN-CCS-CDR' , 'pp.db' , 'pp_pc.db' ) >>> product_path = '/home/user/data/PERSIANN-CCS-CDR' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs_cdr = Persiann_ccs_cdr ( pp , product_path , vector_path , pp_log ) >>> persiann_ccs_cdr Class to extract PERSIANN-CCS-CDR 0.04\u00ba Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS-CDR precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for PERSIANN-CCS-CDR precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs_cdr >>> pp = HidroCLVariable('pp', 'PERSIANN-CCS-CDR', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS-CDR' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs_cdr = Persiann_ccs_cdr(pp, product_path, vector_path, pp_log) >>> persiann_ccs_cdr Class to extract PERSIANN-CCS-CDR 0.04\u00ba Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS-CDR precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS-CDR precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS-CDR 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs_cdr\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs_cdr\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs_cdr\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs_cdr' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) __repr__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 1388 1389 1390 1391 1392 1393 1394 1395 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' __str__ () Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS-CDR precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS-CDR precipitation database path: { self . pp . database } ''' run_extraction ( limit = None ) Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs_cdr\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) run_maintainer ( log_file , limit = None ) Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file )","title":"Product processors"},{"location":"products/#product-processors","text":"","title":"Product processors"},{"location":"products/#hidrocl.products.Gldas_noah","text":"A class to process GLDAS_NOAH025_3H to hidrocl variables Attributes: Name Type Description snow HidroCLVariable HidroCLVariable with the GLDAS snow data temp HidroCLVariable HidroCLVariable with the GLDAS temperature data et HidroCLVariable HidroCLVariable with the GLDAS evapotranspiration data soilm HidroCLVariable HidroCLVariable with the GLDAS soil moisture data snow_log str Path to the log file for the snow extraction temp_log str Path to the log file for the temperature extraction et_log str Path to the log file for the evapotranspiration extraction soilm_log str Path to the log file for the soil moisture extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list List of common elements between the snow, temp, et and soilm databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 8 scenes for modis) complete_scenes list List of complete scenes (8 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 8 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 class Gldas_noah : \"\"\" A class to process GLDAS_NOAH025_3H to hidrocl variables Attributes: snow (HidroCLVariable): HidroCLVariable with the GLDAS snow data \\n temp (HidroCLVariable): HidroCLVariable with the GLDAS temperature data \\n et (HidroCLVariable): HidroCLVariable with the GLDAS evapotranspiration data \\n soilm (HidroCLVariable): HidroCLVariable with the GLDAS soil moisture data \\n snow_log (str): Path to the log file for the snow extraction \\n temp_log (str): Path to the log file for the temperature extraction \\n et_log (str): Path to the log file for the evapotranspiration extraction \\n soilm_log (str): Path to the log file for the soil moisture extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): List of common elements between the snow, temp, et and soilm databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 8 scenes for modis) \\n complete_scenes (list): List of complete scenes (8 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 8 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , snow , temp , et , soilm , product_path , vector_path , snow_log , temp_log , et_log , soilm_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gldas_noah >>> snow = HidroCLVariable('snow', 'snow.db', 'snow_pc.db') >>> temp = HidroCLVariable('temp', 'temp.db', 'temp_pc.db') >>> et = HidroCLVariable('et', 'et.db', 'et.db') >>> soilm = HidroCLVariable('soilm', 'soilm.db', 'soilm_pc.db') >>> product_path = '/home/user/data/GLDAS_NOAH025_3H' >>> vector_path = '/home/user/data/vector.shp' >>> snow_log = '/home/user/data/logs/snow.log' >>> temp_log = '/home/user/data/logs/temp.log' >>> et_log = '/home/user/data/logs/et.log' >>> soilm_log = '/home/user/data/logs/soilm.log' >>> gldas = Gldas_noah(snow, temp, et, soilm, product_path, ... vector_path, snow_log, temp_log, et_log, soilm_log) >>> gldas Class to extract GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1 Args: snow (HidroCLVariable): HidroCLVariable with the GLDAS snow data \\n temp (HidroCLVariable): HidroCLVariable with the GLDAS temperature data \\n et (HidroCLVariable): HidroCLVariable with the GLDAS evapotranspiration data \\n soilm (HidroCLVariable): HidroCLVariable with the GLDAS soil moisture data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n temp_log (str): Path to the log file for the temperature extraction \\n et_log (str): Path to the log file for the evapotranspiration extraction \\n soilm_log (str): Path to the log file for the soil moisture extraction \\n Raises: TypeError: If snow, temp, et or soilm is not a HidroCLVariable \"\"\" if t . check_instance ( snow , temp , et , soilm ): self . snow = snow self . temp = temp self . et = et self . soilm = soilm self . snow_log = snow_log self . temp_log = temp_log self . et_log = et_log self . soilm_log = soilm_log self . productname = \"GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"gldas\" ) self . product_ids = t . get_product_ids ( self . product_files , \"gldas\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"gldas\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'gldas' ) else : raise TypeError ( 'snow, temp, et and soilm must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } Snow records: { len ( self . snow . indatabase ) } . Snow path: { self . snow . database } Temperature records: { len ( self . temp . indatabase ) } . Temperature path: { self . temp . database } Evapotranspiration records: { len ( self . et . indatabase ) } . Evapotranspiration path: { self . et . database } Soil moisture records: { len ( self . soilm . indatabase ) } . Soil moisture path: { self . soilm . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . snow . indatabase : if scene not in self . snow . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snow_gldas' , self . snow . catchment_names , self . snow_log , database = self . snow . database , pcdatabase = self . snow . pcdatabase , vector_path = self . vectorpath , layer = \"SWE_inst\" ) if scene not in self . temp . indatabase : if scene not in self . temp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'temp_gldas' , self . temp . catchment_names , self . temp_log , database = self . temp . database , pcdatabase = self . temp . pcdatabase , vector_path = self . vectorpath , layer = \"Tair_f_inst\" ) if scene not in self . et . indatabase : if scene not in self . et . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'et_gldas' , self . et . catchment_names , self . et_log , database = self . et . database , pcdatabase = self . et . pcdatabase , vector_path = self . vectorpath , layer = \"ECanop_tavg\" ) if scene not in self . soilm . indatabase : if scene not in self . soilm . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'soilm_gldas' , self . soilm . catchment_names , self . soilm_log , database = self . soilm . database , pcdatabase = self . soilm . pcdatabase , vector_path = self . vectorpath , layer = [ \"SoilMoi0_10cm_inst\" , \"SoilMoi10_40cm_inst\" , \"SoilMoi40_100cm_inst\" , \"SoilMoi100_200cm_inst\" ]) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'gldas' , log_file = log_file )","title":"Gldas_noah"},{"location":"products/#hidrocl.products.Gldas_noah.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gldas_noah >>> snow = HidroCLVariable ( 'snow' , 'snow.db' , 'snow_pc.db' ) >>> temp = HidroCLVariable ( 'temp' , 'temp.db' , 'temp_pc.db' ) >>> et = HidroCLVariable ( 'et' , 'et.db' , 'et.db' ) >>> soilm = HidroCLVariable ( 'soilm' , 'soilm.db' , 'soilm_pc.db' ) >>> product_path = '/home/user/data/GLDAS_NOAH025_3H' >>> vector_path = '/home/user/data/vector.shp' >>> snow_log = '/home/user/data/logs/snow.log' >>> temp_log = '/home/user/data/logs/temp.log' >>> et_log = '/home/user/data/logs/et.log' >>> soilm_log = '/home/user/data/logs/soilm.log' >>> gldas = Gldas_noah ( snow , temp , et , soilm , product_path , ... vector_path , snow_log , temp_log , et_log , soilm_log ) >>> gldas Class to extract GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1 Parameters: Name Type Description Default snow HidroCLVariable HidroCLVariable with the GLDAS snow data required temp HidroCLVariable HidroCLVariable with the GLDAS temperature data required et HidroCLVariable HidroCLVariable with the GLDAS evapotranspiration data required soilm HidroCLVariable HidroCLVariable with the GLDAS soil moisture data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required snow_log str Path to the log file for the snow extraction required temp_log str Path to the log file for the temperature extraction required et_log str Path to the log file for the evapotranspiration extraction required soilm_log str Path to the log file for the soil moisture extraction required Raises: Type Description TypeError If snow, temp, et or soilm is not a HidroCLVariable Source code in hidrocl/products/__init__.py 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 def __init__ ( self , snow , temp , et , soilm , product_path , vector_path , snow_log , temp_log , et_log , soilm_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gldas_noah >>> snow = HidroCLVariable('snow', 'snow.db', 'snow_pc.db') >>> temp = HidroCLVariable('temp', 'temp.db', 'temp_pc.db') >>> et = HidroCLVariable('et', 'et.db', 'et.db') >>> soilm = HidroCLVariable('soilm', 'soilm.db', 'soilm_pc.db') >>> product_path = '/home/user/data/GLDAS_NOAH025_3H' >>> vector_path = '/home/user/data/vector.shp' >>> snow_log = '/home/user/data/logs/snow.log' >>> temp_log = '/home/user/data/logs/temp.log' >>> et_log = '/home/user/data/logs/et.log' >>> soilm_log = '/home/user/data/logs/soilm.log' >>> gldas = Gldas_noah(snow, temp, et, soilm, product_path, ... vector_path, snow_log, temp_log, et_log, soilm_log) >>> gldas Class to extract GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1 Args: snow (HidroCLVariable): HidroCLVariable with the GLDAS snow data \\n temp (HidroCLVariable): HidroCLVariable with the GLDAS temperature data \\n et (HidroCLVariable): HidroCLVariable with the GLDAS evapotranspiration data \\n soilm (HidroCLVariable): HidroCLVariable with the GLDAS soil moisture data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n temp_log (str): Path to the log file for the temperature extraction \\n et_log (str): Path to the log file for the evapotranspiration extraction \\n soilm_log (str): Path to the log file for the soil moisture extraction \\n Raises: TypeError: If snow, temp, et or soilm is not a HidroCLVariable \"\"\" if t . check_instance ( snow , temp , et , soilm ): self . snow = snow self . temp = temp self . et = et self . soilm = soilm self . snow_log = snow_log self . temp_log = temp_log self . et_log = et_log self . soilm_log = soilm_log self . productname = \"GLDAS Noah Land Surface Model L4 3 hourly 0.25 degree Version 2.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"gldas\" ) self . product_ids = t . get_product_ids ( self . product_files , \"gldas\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"gldas\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'gldas' ) else : raise TypeError ( 'snow, temp, et and soilm must be HidroCLVariable objects' )","title":"__init__()"},{"location":"products/#hidrocl.products.Gldas_noah.__repr__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 1012 1013 1014 1015 1016 1017 1018 1019 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Gldas_noah.__str__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } Snow records: { len ( self . snow . indatabase ) } . Snow path: { self . snow . database } Temperature records: { len ( self . temp . indatabase ) } . Temperature path: { self . temp . database } Evapotranspiration records: { len ( self . et . indatabase ) } . Evapotranspiration path: { self . et . database } Soil moisture records: { len ( self . soilm . indatabase ) } . Soil moisture path: { self . soilm . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Gldas_noah.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . snow . indatabase : if scene not in self . snow . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'snow_gldas' , self . snow . catchment_names , self . snow_log , database = self . snow . database , pcdatabase = self . snow . pcdatabase , vector_path = self . vectorpath , layer = \"SWE_inst\" ) if scene not in self . temp . indatabase : if scene not in self . temp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'temp_gldas' , self . temp . catchment_names , self . temp_log , database = self . temp . database , pcdatabase = self . temp . pcdatabase , vector_path = self . vectorpath , layer = \"Tair_f_inst\" ) if scene not in self . et . indatabase : if scene not in self . et . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'et_gldas' , self . et . catchment_names , self . et_log , database = self . et . database , pcdatabase = self . et . pcdatabase , vector_path = self . vectorpath , layer = \"ECanop_tavg\" ) if scene not in self . soilm . indatabase : if scene not in self . soilm . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'soilm_gldas' , self . soilm . catchment_names , self . soilm_log , database = self . soilm . database , pcdatabase = self . soilm . pcdatabase , vector_path = self . vectorpath , layer = [ \"SoilMoi0_10cm_inst\" , \"SoilMoi10_40cm_inst\" , \"SoilMoi40_100cm_inst\" , \"SoilMoi100_200cm_inst\" ])","title":"run_extraction()"},{"location":"products/#hidrocl.products.Gldas_noah.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . snow . checkdatabase () self . temp . checkdatabase () self . et . checkdatabase () self . soilm . checkdatabase () self . common_elements = t . compare_indatabase ( self . snow . indatabase , self . temp . indatabase , self . et . indatabase , self . soilm . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , \"gldas\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'gldas' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Gpm_3imrghhl","text":"A class to process GPM_3IMRGHHL to hidrocl variables Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with IMERG precipitation data pp_log str Path to the log file for IMERG precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 48 scenes for modis) complete_scenes list List of complete scenes (48 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 48 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Gpm_3imrghhl : \"\"\" A class to process GPM_3IMRGHHL to hidrocl variables Attributes: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n pp_log (str): Path to the log file for IMERG precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 48 scenes for modis) \\n complete_scenes (list): List of complete scenes (48 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 48 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gpm_3imrghhl >>> pp = HidroCLVariable('pp', 'imerg', 'pp.db', 'pp_pc.db') >>> gpm = Gpm_3imrghhl(pp, product_path, vector_path, pp_log) >>> gpm Class to extract GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6 Args: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for IMERG precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"imerg\" ) self . product_ids = t . get_product_ids ( self . product_files , \"imerg\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"imerg\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'imerg' ) else : raise TypeError ( 'pp must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } IMERG precipitation records: { len ( self . pp . indatabase ) } . IMERG precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'imerg' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath , layer = \"Grid_precipitationCal\" ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'imerg' , log_file = log_file )","title":"Gpm_3imrghhl"},{"location":"products/#hidrocl.products.Gpm_3imrghhl.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gpm_3imrghhl >>> pp = HidroCLVariable ( 'pp' , 'imerg' , 'pp.db' , 'pp_pc.db' ) >>> gpm = Gpm_3imrghhl ( pp , product_path , vector_path , pp_log ) >>> gpm Class to extract GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6 Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with IMERG precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for IMERG precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Gpm_3imrghhl >>> pp = HidroCLVariable('pp', 'imerg', 'pp.db', 'pp_pc.db') >>> gpm = Gpm_3imrghhl(pp, product_path, vector_path, pp_log) >>> gpm Class to extract GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6 Args: pp (HidroCLVariable): HidroCLVariable object with IMERG precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for IMERG precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"GPM IMERG Late Precipitation L3 Half Hourly 0.1 degree Version 0.6\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"imerg\" ) self . product_ids = t . get_product_ids ( self . product_files , \"imerg\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"imerg\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'imerg' ) else : raise TypeError ( 'pp must be HidroCLVariable objects' )","title":"__init__()"},{"location":"products/#hidrocl.products.Gpm_3imrghhl.__repr__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 824 825 826 827 828 829 830 831 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Gpm_3imrghhl.__str__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 833 834 835 836 837 838 839 840 841 842 843 844 845 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } IMERG precipitation records: { len ( self . pp . indatabase ) } . IMERG precipitation database path: { self . pp . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Gpm_3imrghhl.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'imerg' , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath , layer = \"Grid_precipitationCal\" )","title":"run_extraction()"},{"location":"products/#hidrocl.products.Gpm_3imrghhl.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"imerg\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'imerg' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Mcd15a2h","text":"A class to process MCD15A2H to hidrocl variables Attributes: Name Type Description lai HidroCLVariable HidroCLVariable object with the LAI data fpar HidroCLVariable HidroCLVariable object with the FPAR data lai_log str Path to the log file for the LAI extraction fpar_log str Path to the log file for the FPAR extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list List of common elements between the FPAR and LAI databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mcd15a2h : \"\"\" A class to process MCD15A2H to hidrocl variables Attributes: lai (HidroCLVariable): HidroCLVariable object with the LAI data \\n fpar (HidroCLVariable): HidroCLVariable object with the FPAR data \\n lai_log (str): Path to the log file for the LAI extraction \\n fpar_log (str): Path to the log file for the FPAR extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): List of common elements between the FPAR and LAI databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , lai , fpar , product_path , vector_path , lai_log , fpar_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mcd15a2h >>> lai = HidroCLVariable('lai', 'lai.db', 'lai_pc.db') >>> fpar = HidroCLVariable('fpar', 'fpar.db', 'fpar_pc.db') >>> product_path = '/home/user/mod15a2h' >>> vector_path = '/home/user/vector' >>> lai_log = '/home/user/lai.log' >>> fpar_log = '/home/user/fpar.log' >>> mcd15a2h = Mcd15a2h(lai, fpar, product_path, vector_path, ... lai_log, fpar_log) >>> mcd15a2h Class to extract MODIS MCD15A2H Version 6.0 Args: lai (HidroCLVariable): HidroCLVariable object with the LAI data fpar (HidroCLVariable): HidroCLVariable object with the FPAR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder lai_log (str): Path to the log file for the LAI extraction fpar_log (str): Path to the log file for the FPAR extraction Raises: TypeError: If lai or fpar is not HidroCLVariable object \"\"\" if t . check_instance ( lai , fpar ): self . lai = lai self . fpar = fpar self . lai_log = lai_log self . fpar_log = fpar_log self . productname = \"MODIS MCD15A2H Version 6.0\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'lai and fpar must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } LAI records: { len ( self . lai . indatabase ) } . LAI database path: { self . lai . database } FPAR records: { len ( self . fpar . indatabase ) } . FPAR database path: { self . fpar . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . lai . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'lai' , self . lai . catchment_names , self . lai_log , database = self . lai . database , pcdatabase = self . lai . pcdatabase , vector_path = self . vectorpath , layer = \"Lai_500m\" , ) if scene not in self . fpar . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'fpar' , self . fpar . catchment_names , self . fpar_log , database = self . fpar . database , pcdatabase = self . fpar . pcdatabase , vector_path = self . vectorpath , layer = \"Fpar_500m\" ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"Mcd15a2h"},{"location":"products/#hidrocl.products.Mcd15a2h.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mcd15a2h >>> lai = HidroCLVariable ( 'lai' , 'lai.db' , 'lai_pc.db' ) >>> fpar = HidroCLVariable ( 'fpar' , 'fpar.db' , 'fpar_pc.db' ) >>> product_path = '/home/user/mod15a2h' >>> vector_path = '/home/user/vector' >>> lai_log = '/home/user/lai.log' >>> fpar_log = '/home/user/fpar.log' >>> mcd15a2h = Mcd15a2h ( lai , fpar , product_path , vector_path , ... lai_log , fpar_log ) >>> mcd15a2h Class to extract MODIS MCD15A2H Version 6.0 Parameters: Name Type Description Default lai HidroCLVariable HidroCLVariable object with the LAI data required fpar HidroCLVariable HidroCLVariable object with the FPAR data required product_path str Path to the product folder required vector_path str Path to the vector folder required lai_log str Path to the log file for the LAI extraction required fpar_log str Path to the log file for the FPAR extraction required Raises: Type Description TypeError If lai or fpar is not HidroCLVariable object Source code in hidrocl/products/__init__.py 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 def __init__ ( self , lai , fpar , product_path , vector_path , lai_log , fpar_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mcd15a2h >>> lai = HidroCLVariable('lai', 'lai.db', 'lai_pc.db') >>> fpar = HidroCLVariable('fpar', 'fpar.db', 'fpar_pc.db') >>> product_path = '/home/user/mod15a2h' >>> vector_path = '/home/user/vector' >>> lai_log = '/home/user/lai.log' >>> fpar_log = '/home/user/fpar.log' >>> mcd15a2h = Mcd15a2h(lai, fpar, product_path, vector_path, ... lai_log, fpar_log) >>> mcd15a2h Class to extract MODIS MCD15A2H Version 6.0 Args: lai (HidroCLVariable): HidroCLVariable object with the LAI data fpar (HidroCLVariable): HidroCLVariable object with the FPAR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder lai_log (str): Path to the log file for the LAI extraction fpar_log (str): Path to the log file for the FPAR extraction Raises: TypeError: If lai or fpar is not HidroCLVariable object \"\"\" if t . check_instance ( lai , fpar ): self . lai = lai self . fpar = fpar self . lai_log = lai_log self . fpar_log = fpar_log self . productname = \"MODIS MCD15A2H Version 6.0\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'lai and fpar must be HidroCLVariable objects' )","title":"__init__()"},{"location":"products/#hidrocl.products.Mcd15a2h.__repr__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 648 649 650 651 652 653 654 655 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Mcd15a2h.__str__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } LAI records: { len ( self . lai . indatabase ) } . LAI database path: { self . lai . database } FPAR records: { len ( self . fpar . indatabase ) } . FPAR database path: { self . fpar . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Mcd15a2h.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . lai . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'lai' , self . lai . catchment_names , self . lai_log , database = self . lai . database , pcdatabase = self . lai . pcdatabase , vector_path = self . vectorpath , layer = \"Lai_500m\" , ) if scene not in self . fpar . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'fpar' , self . fpar . catchment_names , self . fpar_log , database = self . fpar . database , pcdatabase = self . fpar . pcdatabase , vector_path = self . vectorpath , layer = \"Fpar_500m\" )","title":"run_extraction()"},{"location":"products/#hidrocl.products.Mcd15a2h.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . lai . checkdatabase () self . fpar . checkdatabase () self . common_elements = t . compare_indatabase ( self . lai . indatabase , self . fpar . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Mod10a2","text":"A class to process MOD10A2 to hidrocl variables Attributes: Name Type Description nsnow HidroCLVariable HidroCLVariable object with north face snow data ssnow HidroCLVariable HidroCLVariable object with south face snow data snow_log str Path to the log file for the snow extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located northvectorpath str Path to the vector folder with the north Shapefile with areas to be processed southvectorpath str Path to the vector folder with the south Shapefile with areas to be processed common_elements list List of common elements between the nsnow and ssnow databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mod10a2 : \"\"\" A class to process MOD10A2 to hidrocl variables Attributes: nsnow (HidroCLVariable): HidroCLVariable object with north face snow data \\n ssnow (HidroCLVariable): HidroCLVariable object with south face snow data \\n snow_log (str): Path to the log file for the snow extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n northvectorpath (str): Path to the vector folder with the north Shapefile with areas to be processed \\n southvectorpath (str): Path to the vector folder with the south Shapefile with areas to be processed \\n common_elements (list): List of common elements between the nsnow and ssnow databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , nsnow , ssnow , product_path , north_vector_path , south_vector_path , snow_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod10a2 >>> nsnow = HidroCLVariable('nsnow', 'modis', 'mod10a2', 'north') >>> ssnow = HidroCLVariable('ssnow', 'modis', 'mod10a2', 'south') >>> product_path = '/home/user/mod10a2' >>> north_vector_path = '/home/user/north_vector.shp' >>> south_vector_path = '/home/user/south_vector.shp' >>> snow_log = '/home/user/snow.log' >>> mod10a2 = Mod10a2(nsnow, ssnow, product_path, ... north_vector_path, south_vector_path, snow_log) >>> mod10a2 Class to extract MODIS MOD10A2 Version 6.1 Args: nsnow (HidroCLVariable): HidroCLVariable object with north face snow data \\n ssnow (HidroCLVariable): HidroCLVariable object with south face snow data \\n product_path (str): Path to the product folder where the product files are located \\n north_vector_path (str): Path to the vector folder with the north Shapefile with areas to be processed \\n south_vector_path (str): Path to the vector folder with the south Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n Raises: TypeError: If nsnow or ssnow is not a HidroCLVariable object \\n \"\"\" if t . check_instance ( nsnow , ssnow ): self . nsnow = nsnow self . ssnow = ssnow self . snow_log = snow_log self . productname = \"MODIS MOD10A2 Version 6.1\" self . productpath = product_path self . northvectorpath = north_vector_path self . southvectorpath = south_vector_path self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'nsnow and ssnow must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } North face snow records: { len ( self . nsnow . indatabase ) } . North face snow path: { self . nsnow . database } South face snow records: { len ( self . ssnow . indatabase ) } . South face snow database path: { self . ssnow . database } ''' def run_extraction ( self , limit = None ): \"\"\"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . nsnow . indatabase : # so what about the south one? e . zonal_stats ( scene , scenes_path , temp_dir , 'snow' , self . nsnow . catchment_names , self . snow_log , north_database = self . nsnow . database , north_pcdatabase = self . nsnow . pcdatabase , south_database = self . ssnow . database , south_pcdatabase = self . ssnow . pcdatabase , north_vector_path = self . northvectorpath , south_vector_path = self . southvectorpath , layer = \"Maximum_Snow_Extent\" ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"Mod10a2"},{"location":"products/#hidrocl.products.Mod10a2.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod10a2 >>> nsnow = HidroCLVariable ( 'nsnow' , 'modis' , 'mod10a2' , 'north' ) >>> ssnow = HidroCLVariable ( 'ssnow' , 'modis' , 'mod10a2' , 'south' ) >>> product_path = '/home/user/mod10a2' >>> north_vector_path = '/home/user/north_vector.shp' >>> south_vector_path = '/home/user/south_vector.shp' >>> snow_log = '/home/user/snow.log' >>> mod10a2 = Mod10a2 ( nsnow , ssnow , product_path , ... north_vector_path , south_vector_path , snow_log ) >>> mod10a2 Class to extract MODIS MOD10A2 Version 6.1 Parameters: Name Type Description Default nsnow HidroCLVariable HidroCLVariable object with north face snow data required ssnow HidroCLVariable HidroCLVariable object with south face snow data required product_path str Path to the product folder where the product files are located required north_vector_path str Path to the vector folder with the north Shapefile with areas to be processed required south_vector_path str Path to the vector folder with the south Shapefile with areas to be processed required snow_log str Path to the log file for the snow extraction required Raises: Type Description TypeError If nsnow or ssnow is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 def __init__ ( self , nsnow , ssnow , product_path , north_vector_path , south_vector_path , snow_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod10a2 >>> nsnow = HidroCLVariable('nsnow', 'modis', 'mod10a2', 'north') >>> ssnow = HidroCLVariable('ssnow', 'modis', 'mod10a2', 'south') >>> product_path = '/home/user/mod10a2' >>> north_vector_path = '/home/user/north_vector.shp' >>> south_vector_path = '/home/user/south_vector.shp' >>> snow_log = '/home/user/snow.log' >>> mod10a2 = Mod10a2(nsnow, ssnow, product_path, ... north_vector_path, south_vector_path, snow_log) >>> mod10a2 Class to extract MODIS MOD10A2 Version 6.1 Args: nsnow (HidroCLVariable): HidroCLVariable object with north face snow data \\n ssnow (HidroCLVariable): HidroCLVariable object with south face snow data \\n product_path (str): Path to the product folder where the product files are located \\n north_vector_path (str): Path to the vector folder with the north Shapefile with areas to be processed \\n south_vector_path (str): Path to the vector folder with the south Shapefile with areas to be processed \\n snow_log (str): Path to the log file for the snow extraction \\n Raises: TypeError: If nsnow or ssnow is not a HidroCLVariable object \\n \"\"\" if t . check_instance ( nsnow , ssnow ): self . nsnow = nsnow self . ssnow = ssnow self . snow_log = snow_log self . productname = \"MODIS MOD10A2 Version 6.1\" self . productpath = product_path self . northvectorpath = north_vector_path self . southvectorpath = south_vector_path self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'nsnow and ssnow must be HidroCLVariable objects' )","title":"__init__()"},{"location":"products/#hidrocl.products.Mod10a2.__repr__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 305 306 307 308 309 310 311 312 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Mod10a2.__str__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } North face snow records: { len ( self . nsnow . indatabase ) } . North face snow path: { self . nsnow . database } South face snow records: { len ( self . ssnow . indatabase ) } . South face snow database path: { self . ssnow . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Mod10a2.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 def run_extraction ( self , limit = None ): \"\"\"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . nsnow . indatabase : # so what about the south one? e . zonal_stats ( scene , scenes_path , temp_dir , 'snow' , self . nsnow . catchment_names , self . snow_log , north_database = self . nsnow . database , north_pcdatabase = self . nsnow . pcdatabase , south_database = self . ssnow . database , south_pcdatabase = self . ssnow . pcdatabase , north_vector_path = self . northvectorpath , south_vector_path = self . southvectorpath , layer = \"Maximum_Snow_Extent\" )","title":"run_extraction()"},{"location":"products/#hidrocl.products.Mod10a2.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . nsnow . checkdatabase () self . ssnow . checkdatabase () self . common_elements = t . compare_indatabase ( self . nsnow . indatabase , self . ssnow . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Mod13q1","text":"A class to process MOD13Q1 to hidrocl variables Attributes: Name Type Description ndvi HidroCLVariable HidroCLVariable object with the NDVI data evi HidroCLVariable HidroCLVariable object with the EVI data nbr HidroCLVariable HidroCLVariable object with the NBR data ndvi_log str Path to the log file for the NDVI extraction evi_log str Path to the log file for the EVI extraction nbr_log str Path to the log file for the NBR extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list List of common elements between the NDVI, EVI and NBR databases product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mod13q1 : \"\"\" A class to process MOD13Q1 to hidrocl variables Attributes: ndvi (HidroCLVariable): HidroCLVariable object with the NDVI data \\n evi (HidroCLVariable): HidroCLVariable object with the EVI data \\n nbr (HidroCLVariable): HidroCLVariable object with the NBR data \\n ndvi_log (str): Path to the log file for the NDVI extraction \\n evi_log (str): Path to the log file for the EVI extraction \\n nbr_log (str): Path to the log file for the NBR extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): List of common elements between the NDVI, EVI and NBR databases \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , ndvi , evi , nbr , product_path , vector_path , ndvi_log , evi_log , nbr_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl.products import Mod13q1 >>> ndvi = HidroCLVariable('ndvi', 'ndvi.db', 'ndvi_pc.db') >>> evi = HidroCLVariable('evi', 'evi.db', 'evi_pc.db') >>> nbr = HidroCLVariable('nbr', 'nbr.db', 'nbr_pc.db') >>> product_path = '/home/user/mod13q1' >>> vector_path = '/home/user/vector.shp' >>> ndvi_log = '/home/user/ndvi.log' >>> evi_log = '/home/user/evi.log' >>> nbr_log = '/home/user/nbr.log' >>> mod13q1 = Mod13q1(ndvi, evi, nbr, product_path, vector_path, ... ndvi_log, evi_log, nbr_log) >>> mod13q1 Class to extract MODIS MOD13Q1 Version 6.1 Args: ndvi (HidroCLVariable): Object with the NDVI data evi (HidroCLVariable): Object with the EVI data nbr (HidroCLVariable): Object with the NBR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder ndvi_log (str): Path to the log file for the NDVI extraction evi_log (str): Path to the log file for the EVI extraction nbr_log (str): Path to the log file for the NBR extraction Raises: TypeError: If the input is not a HidroCLVariable object \"\"\" if t . check_instance ( ndvi , evi , nbr ): self . ndvi = ndvi self . evi = evi self . nbr = nbr self . ndvi_log = ndvi_log self . evi_log = evi_log self . nbr_log = nbr_log self . productname = \"MODIS MOD13Q1 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'ndvi, evi and nbr must be HidroCLVariable objects' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } NDVI records: { len ( self . ndvi . indatabase ) } . NDVI database path: { self . ndvi . database } EVI records: { len ( self . evi . indatabase ) } . EVI database path: { self . evi . database } NBR records: { len ( self . nbr . indatabase ) } . NBR database path: { self . nbr . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . ndvi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'ndvi' , self . ndvi . catchment_names , self . ndvi_log , database = self . ndvi . database , pcdatabase = self . ndvi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days NDVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'evi' , self . evi . catchment_names , self . evi_log , database = self . evi . database , pcdatabase = self . evi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days EVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'nbr' , self . nbr . catchment_names , self . nbr_log , database = self . nbr . database , pcdatabase = self . nbr . pcdatabase , vector_path = self . vectorpath , layer = [ \"250m 16 days NIR reflectance\" , \"250m 16 days MIR reflectance\" ]) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"Mod13q1"},{"location":"products/#hidrocl.products.Mod13q1.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl.products import Mod13q1 >>> ndvi = HidroCLVariable ( 'ndvi' , 'ndvi.db' , 'ndvi_pc.db' ) >>> evi = HidroCLVariable ( 'evi' , 'evi.db' , 'evi_pc.db' ) >>> nbr = HidroCLVariable ( 'nbr' , 'nbr.db' , 'nbr_pc.db' ) >>> product_path = '/home/user/mod13q1' >>> vector_path = '/home/user/vector.shp' >>> ndvi_log = '/home/user/ndvi.log' >>> evi_log = '/home/user/evi.log' >>> nbr_log = '/home/user/nbr.log' >>> mod13q1 = Mod13q1 ( ndvi , evi , nbr , product_path , vector_path , ... ndvi_log , evi_log , nbr_log ) >>> mod13q1 Class to extract MODIS MOD13Q1 Version 6.1 Parameters: Name Type Description Default ndvi HidroCLVariable Object with the NDVI data required evi HidroCLVariable Object with the EVI data required nbr HidroCLVariable Object with the NBR data required product_path str Path to the product folder required vector_path str Path to the vector folder required ndvi_log str Path to the log file for the NDVI extraction required evi_log str Path to the log file for the EVI extraction required nbr_log str Path to the log file for the NBR extraction required Raises: Type Description TypeError If the input is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 def __init__ ( self , ndvi , evi , nbr , product_path , vector_path , ndvi_log , evi_log , nbr_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl.products import Mod13q1 >>> ndvi = HidroCLVariable('ndvi', 'ndvi.db', 'ndvi_pc.db') >>> evi = HidroCLVariable('evi', 'evi.db', 'evi_pc.db') >>> nbr = HidroCLVariable('nbr', 'nbr.db', 'nbr_pc.db') >>> product_path = '/home/user/mod13q1' >>> vector_path = '/home/user/vector.shp' >>> ndvi_log = '/home/user/ndvi.log' >>> evi_log = '/home/user/evi.log' >>> nbr_log = '/home/user/nbr.log' >>> mod13q1 = Mod13q1(ndvi, evi, nbr, product_path, vector_path, ... ndvi_log, evi_log, nbr_log) >>> mod13q1 Class to extract MODIS MOD13Q1 Version 6.1 Args: ndvi (HidroCLVariable): Object with the NDVI data evi (HidroCLVariable): Object with the EVI data nbr (HidroCLVariable): Object with the NBR data product_path (str): Path to the product folder vector_path (str): Path to the vector folder ndvi_log (str): Path to the log file for the NDVI extraction evi_log (str): Path to the log file for the EVI extraction nbr_log (str): Path to the log file for the NBR extraction Raises: TypeError: If the input is not a HidroCLVariable object \"\"\" if t . check_instance ( ndvi , evi , nbr ): self . ndvi = ndvi self . evi = evi self . nbr = nbr self . ndvi_log = ndvi_log self . evi_log = evi_log self . nbr_log = nbr_log self . productname = \"MODIS MOD13Q1 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'ndvi, evi and nbr must be HidroCLVariable objects' )","title":"__init__()"},{"location":"products/#hidrocl.products.Mod13q1.__repr__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 98 99 100 101 102 103 104 105 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Mod13q1.__str__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } NDVI records: { len ( self . ndvi . indatabase ) } . NDVI database path: { self . ndvi . database } EVI records: { len ( self . evi . indatabase ) } . EVI database path: { self . evi . database } NBR records: { len ( self . nbr . indatabase ) } . NBR database path: { self . nbr . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Mod13q1.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . ndvi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'ndvi' , self . ndvi . catchment_names , self . ndvi_log , database = self . ndvi . database , pcdatabase = self . ndvi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days NDVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'evi' , self . evi . catchment_names , self . evi_log , database = self . evi . database , pcdatabase = self . evi . pcdatabase , vector_path = self . vectorpath , layer = \"250m 16 days EVI\" , ) if scene not in self . evi . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'nbr' , self . nbr . catchment_names , self . nbr_log , database = self . nbr . database , pcdatabase = self . nbr . pcdatabase , vector_path = self . vectorpath , layer = [ \"250m 16 days NIR reflectance\" , \"250m 16 days MIR reflectance\" ])","title":"run_extraction()"},{"location":"products/#hidrocl.products.Mod13q1.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . ndvi . checkdatabase () self . evi . checkdatabase () self . nbr . checkdatabase () self . common_elements = t . compare_indatabase ( self . ndvi . indatabase , self . evi . indatabase , self . nbr . indatabase ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Mod16a2","text":"A class to process MOD16A2 to hidrocl variables Attributes: Name Type Description pet HidroCLVariable HidroCLVariable object with the potential evapotranspiration pet_log str Path to the log file for the pet extraction productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list Elements in pet database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 9 scenes for modis) complete_scenes list List of complete scenes (9 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 9 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.pyclass Mod16a2 : \"\"\" A class to process MOD16A2 to hidrocl variables Attributes: pet (HidroCLVariable): HidroCLVariable object with the potential evapotranspiration \\n pet_log (str): Path to the log file for the pet extraction \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): Elements in pet database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 9 scenes for modis) \\n complete_scenes (list): List of complete scenes (9 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 9 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pet , product_path , vector_path , pet_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod16a2 >>> pet = HidroCLVariable('pet', 'pet.db', 'pet_pc.db') >>> product_path = '/home/user/modis/mod16a2' >>> vector_path = '/home/user/vector.shp' >>> pet_log = '/home/user/log/pet.log' >>> mod16a2 = Mod16a2(pet, product_path, vector_path, pet_log) >>> mod16a2 Class to extract MODIS MOD16A2 Version 6.1 Args: pet (HidroCLVariable): Object with the potential evapotranspiration data product_path (str): Path to the product folder vector_path (str): Path to the vector folder pet_log (str): Path to the log file for the pet extraction Raises: TypeError: If pet is not a HidroCLVariable object \"\"\" if t . check_instance ( pet ): self . pet = pet self . pet_log = pet_log self . productname = \"MODIS MOD16A2 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pet . indatabase self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'pet must be HidroCLVariable object' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } PET records: { len ( self . pet . indatabase ) } . PET database path: { self . pet . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pet . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pet' , self . pet . catchment_names , self . pet_log , database = self . pet . database , pcdatabase = self . pet . pcdatabase , vector_path = self . vectorpath , layer = \"PET_500m\" , ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"Mod16a2"},{"location":"products/#hidrocl.products.Mod16a2.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod16a2 >>> pet = HidroCLVariable ( 'pet' , 'pet.db' , 'pet_pc.db' ) >>> product_path = '/home/user/modis/mod16a2' >>> vector_path = '/home/user/vector.shp' >>> pet_log = '/home/user/log/pet.log' >>> mod16a2 = Mod16a2 ( pet , product_path , vector_path , pet_log ) >>> mod16a2 Class to extract MODIS MOD16A2 Version 6.1 Parameters: Name Type Description Default pet HidroCLVariable Object with the potential evapotranspiration data required product_path str Path to the product folder required vector_path str Path to the vector folder required pet_log str Path to the log file for the pet extraction required Raises: Type Description TypeError If pet is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 def __init__ ( self , pet , product_path , vector_path , pet_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Mod16a2 >>> pet = HidroCLVariable('pet', 'pet.db', 'pet_pc.db') >>> product_path = '/home/user/modis/mod16a2' >>> vector_path = '/home/user/vector.shp' >>> pet_log = '/home/user/log/pet.log' >>> mod16a2 = Mod16a2(pet, product_path, vector_path, pet_log) >>> mod16a2 Class to extract MODIS MOD16A2 Version 6.1 Args: pet (HidroCLVariable): Object with the potential evapotranspiration data product_path (str): Path to the product folder vector_path (str): Path to the vector folder pet_log (str): Path to the log file for the pet extraction Raises: TypeError: If pet is not a HidroCLVariable object \"\"\" if t . check_instance ( pet ): self . pet = pet self . pet_log = pet_log self . productname = \"MODIS MOD16A2 Version 6.1\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pet . indatabase self . product_files = t . read_product_files ( self . productpath , \"modis\" ) self . product_ids = t . get_product_ids ( self . product_files , \"modis\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"modis\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'modis' ) else : raise TypeError ( 'pet must be HidroCLVariable object' )","title":"__init__()"},{"location":"products/#hidrocl.products.Mod16a2.__repr__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 478 479 480 481 482 483 484 485 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Mod16a2.__str__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 487 488 489 490 491 492 493 494 495 496 497 498 499 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } PET records: { len ( self . pet . indatabase ) } . PET database path: { self . pet . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Mod16a2.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pet . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , 'pet' , self . pet . catchment_names , self . pet_log , database = self . pet . database , pcdatabase = self . pet . pcdatabase , vector_path = self . vectorpath , layer = \"PET_500m\" , )","title":"run_extraction()"},{"location":"products/#hidrocl.products.Mod16a2.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pet . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pet . indatabase ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'modis' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Persiann_ccs","text":"A class to process PERSIANN-CCS to hidrocl variables Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS precipitation data pp_log str Path to the log file for PERSIANN-CCS precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 1 scenes for modis) complete_scenes list List of complete scenes (1 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 1 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 class Persiann_ccs : \"\"\" A class to process PERSIANN-CCS to hidrocl variables Attributes: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS precipitation data \\n pp_log (str): Path to the log file for PERSIANN-CCS precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 1 scenes for modis) \\n complete_scenes (list): List of complete scenes (1 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 1 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs >>> pp = HidroCLVariable('pp', 'PERSIANN-CCS', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs = Persiann_ccs(pp, product_path, vector_path, pp_log) >>> persiann_ccs Class to extract PERSIANN-CCS 0.04\u00ba Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file )","title":"Persiann_ccs"},{"location":"products/#hidrocl.products.Persiann_ccs.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs >>> pp = HidroCLVariable ( 'pp' , 'PERSIANN-CCS' , 'pp.db' , 'pp_pc.db' ) >>> product_path = '/home/user/data/PERSIANN-CCS' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs = Persiann_ccs ( pp , product_path , vector_path , pp_log ) >>> persiann_ccs Class to extract PERSIANN-CCS 0.04\u00ba Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for PERSIANN-CCS precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs >>> pp = HidroCLVariable('pp', 'PERSIANN-CCS', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs = Persiann_ccs(pp, product_path, vector_path, pp_log) >>> persiann_ccs Class to extract PERSIANN-CCS 0.04\u00ba Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs' ) else : raise TypeError ( 'pp must be HidroCLVariable object' )","title":"__init__()"},{"location":"products/#hidrocl.products.Persiann_ccs.__repr__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 1230 1231 1232 1233 1234 1235 1236 1237 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Persiann_ccs.__str__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS precipitation database path: { self . pp . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Persiann_ccs.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath )","title":"run_extraction()"},{"location":"products/#hidrocl.products.Persiann_ccs.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , \"persiann_ccs\" ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file )","title":"run_maintainer()"},{"location":"products/#hidrocl.products.Persiann_ccs_cdr","text":"A class to process PERSIANN-CCS-CDR to hidrocl variables Attributes: Name Type Description pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS-CDR precipitation data pp_log str Path to the log file for PERSIANN-CCS-CDR precipitation data productname str Name of the remote sensing product to be processed productpath str Path to the product folder where the product files are located vectorpath str Path to the vector folder with Shapefile with areas to be processed common_elements list common_elements (list): Elements in precipitation database product_files list List of product files in the product folder product_ids list List of product ids. Each product id is str with common tag by date all_scenes list List of all scenes (no matter the product id here) scenes_occurrences list List of scenes occurrences for each product id overpopulated_scenes list List of overpopulated scenes (more than 1 scenes for modis) complete_scenes list List of complete scenes (1 scenes for modis) incomplete_scenes list List of incomplete scenes (less than 1 scenes for modis) scenes_to_process list List of scenes to process (complete scenes no processed) Source code in hidrocl/products/__init__.py 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 class Persiann_ccs_cdr : \"\"\" A class to process PERSIANN-CCS-CDR to hidrocl variables Attributes: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS-CDR precipitation data \\n pp_log (str): Path to the log file for PERSIANN-CCS-CDR precipitation data \\n productname (str): Name of the remote sensing product to be processed \\n productpath (str): Path to the product folder where the product files are located \\n vectorpath (str): Path to the vector folder with Shapefile with areas to be processed \\n common_elements (list): common_elements (list): Elements in precipitation database \\n product_files (list): List of product files in the product folder \\n product_ids (list): List of product ids. Each product id is str with common tag by date \\n all_scenes (list): List of all scenes (no matter the product id here) \\n scenes_occurrences (list): List of scenes occurrences for each product id \\n overpopulated_scenes (list): List of overpopulated scenes (more than 1 scenes for modis) \\n complete_scenes (list): List of complete scenes (1 scenes for modis) \\n incomplete_scenes (list): List of incomplete scenes (less than 1 scenes for modis) \\n scenes_to_process (list): List of scenes to process (complete scenes no processed) \\n \"\"\" def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs_cdr >>> pp = HidroCLVariable('pp', 'PERSIANN-CCS-CDR', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS-CDR' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs_cdr = Persiann_ccs_cdr(pp, product_path, vector_path, pp_log) >>> persiann_ccs_cdr Class to extract PERSIANN-CCS-CDR 0.04\u00ba Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS-CDR precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS-CDR precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS-CDR 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs_cdr\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs_cdr\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs_cdr\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs_cdr' ) else : raise TypeError ( 'pp must be HidroCLVariable object' ) def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } ' def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS-CDR precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS-CDR precipitation database path: { self . pp . database } ''' def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs_cdr\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath ) def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file )","title":"Persiann_ccs_cdr"},{"location":"products/#hidrocl.products.Persiann_ccs_cdr.__init__","text":"Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs_cdr >>> pp = HidroCLVariable ( 'pp' , 'PERSIANN-CCS-CDR' , 'pp.db' , 'pp_pc.db' ) >>> product_path = '/home/user/data/PERSIANN-CCS-CDR' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs_cdr = Persiann_ccs_cdr ( pp , product_path , vector_path , pp_log ) >>> persiann_ccs_cdr Class to extract PERSIANN-CCS-CDR 0.04\u00ba Parameters: Name Type Description Default pp HidroCLVariable HidroCLVariable object with PERSIANN-CCS-CDR precipitation data required product_path str Path to the product folder where the product files are located required vector_path str Path to the vector folder with Shapefile with areas to be processed required pp_log str Path to the log file for PERSIANN-CCS-CDR precipitation data required Raises: Type Description TypeError If pp is not a HidroCLVariable object Source code in hidrocl/products/__init__.py 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 def __init__ ( self , pp , product_path , vector_path , pp_log ): \"\"\" Examples: >>> from hidrocl import HidroCLVariable >>> from hidrocl import Persiann_ccs_cdr >>> pp = HidroCLVariable('pp', 'PERSIANN-CCS-CDR', 'pp.db', 'pp_pc.db') >>> product_path = '/home/user/data/PERSIANN-CCS-CDR' >>> vector_path = '/home/user/data/vector.shp' >>> pp_log = '/home/user/data/logs/pp_log.txt' >>> persiann_ccs_cdr = Persiann_ccs_cdr(pp, product_path, vector_path, pp_log) >>> persiann_ccs_cdr Class to extract PERSIANN-CCS-CDR 0.04\u00ba Args: pp (HidroCLVariable): HidroCLVariable object with PERSIANN-CCS-CDR precipitation data \\n product_path (str): Path to the product folder where the product files are located \\n vector_path (str): Path to the vector folder with Shapefile with areas to be processed \\n pp_log (str): Path to the log file for PERSIANN-CCS-CDR precipitation data \\n Raises: TypeError: If pp is not a HidroCLVariable object \"\"\" if t . check_instance ( pp ): self . pp = pp self . pp_log = pp_log self . productname = \"PERSIANN-CCS-CDR 0.04\u00ba\" self . productpath = product_path self . vectorpath = vector_path self . common_elements = self . pp . indatabase self . product_files = t . read_product_files ( self . productpath , \"persiann_ccs_cdr\" ) self . product_ids = t . get_product_ids ( self . product_files , \"persiann_ccs_cdr\" ) self . all_scenes = t . check_product_files ( self . product_ids ) self . scenes_occurrences = t . count_scenes_occurrences ( self . all_scenes , self . product_ids ) ( self . overpopulated_scenes , self . complete_scenes , self . incomplete_scenes ) = t . classify_occurrences ( self . scenes_occurrences , \"persiann_ccs_cdr\" ) self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . common_elements , what = 'persiann_ccs_cdr' ) else : raise TypeError ( 'pp must be HidroCLVariable object' )","title":"__init__()"},{"location":"products/#hidrocl.products.Persiann_ccs_cdr.__repr__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 1388 1389 1390 1391 1392 1393 1394 1395 def __repr__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f 'Class to extract { self . productname } '","title":"__repr__()"},{"location":"products/#hidrocl.products.Persiann_ccs_cdr.__str__","text":"Return a string representation of the object Returns: Type Description str Source code in hidrocl/products/__init__.py 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 def __str__ ( self ): \"\"\" Return a string representation of the object Returns: str \"\"\" return f ''' Product: { self . productname } PERSIANN-CCS-CDR precipitation records: { len ( self . pp . indatabase ) } . PERSIANN-CCS-CDR precipitation database path: { self . pp . database } '''","title":"__str__()"},{"location":"products/#hidrocl.products.Persiann_ccs_cdr.run_extraction","text":"Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Parameters: Name Type Description Default limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 def run_extraction ( self , limit = None ): \"\"\" Run the extraction of the product. If limit is None, all scenes will be processed. If limit is a number, only the first limit scenes will be processed. Args: limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) with TemporaryDirectory () as tempdirname : temp_dir = Path ( tempdirname ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : if scene not in self . pp . indatabase : e . zonal_stats ( scene , scenes_path , temp_dir , \"persiann_ccs_cdr\" , self . pp . catchment_names , self . pp_log , database = self . pp . database , pcdatabase = self . pp . pcdatabase , vector_path = self . vectorpath )","title":"run_extraction()"},{"location":"products/#hidrocl.products.Persiann_ccs_cdr.run_maintainer","text":"Run file maintainer. It will remove any file with problems Parameters: Name Type Description Default log_file str log file path required limit int length of the scenes_to_process None Returns: Type Description Print Source code in hidrocl/products/__init__.py 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 def run_maintainer ( self , log_file , limit = None ): \"\"\" Run file maintainer. It will remove any file with problems Args: log_file (str): log file path limit (int): length of the scenes_to_process Returns: Print \"\"\" with t . HiddenPrints (): self . pp . checkdatabase () self . scenes_to_process = t . get_scenes_out_of_db ( self . complete_scenes , self . pp . indatabase , 'persiann_ccs_cdr' ) scenes_path = t . get_scenes_path ( self . product_files , self . productpath ) if limit is not None : scenes_to_process = self . scenes_to_process [: limit ] else : scenes_to_process = self . scenes_to_process for scene in scenes_to_process : m . file_maintainer ( scene = scene , scenes_path = scenes_path , name = 'persiann' , log_file = log_file )","title":"run_maintainer()"},{"location":"reference/","text":"Reference Page structure: Base variable Product processors Download functions","title":"Reference index"},{"location":"reference/#reference","text":"Page structure: Base variable Product processors Download functions","title":"Reference"}]}